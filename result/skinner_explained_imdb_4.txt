execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/10a.sql_explained.sql
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=46680.35..46680.36 rows=1 width=64) (actual time=433.392..433.392 rows=1 loops=1)
   ->  Gather  (cost=46680.13..46680.34 rows=2 width=64) (actual time=432.630..436.082 rows=3 loops=1)
         Workers Planned: 2
         Workers Launched: 2
         ->  Partial Aggregate  (cost=45680.13..45680.14 rows=1 width=64) (actual time=430.250..430.250 rows=1 loops=3)
               ->  Nested Loop  (cost=4736.00..45680.12 rows=2 width=33) (actual time=34.123..430.214 rows=35 loops=3)
                     ->  Nested Loop  (cost=4735.87..45679.82 rows=2 width=37) (actual time=34.090..430.104 rows=35 loops=3)
                           ->  Hash Join  (cost=4735.44..45655.14 rows=5 width=25) (actual time=27.367..429.695 rows=37 loops=3)
                                 Hash Cond: (ci.role_id = rt.id)
                                 ->  Nested Loop  (cost=4734.28..45653.76 rows=62 width=29) (actual time=20.795..429.585 rows=50 loops=3)
                                       Join Filter: (t.id = ci.movie_id)
                                       ->  Nested Loop  (cost=4733.71..40613.13 rows=2585 width=29) (actual time=16.020..200.511 rows=1513 loops=3)
                                             ->  Parallel Hash Join  (cost=4733.28..37248.44 rows=6523 width=8) (actual time=15.974..177.610 rows=2930 loops=3)
                                                   Hash Cond: (mc.company_id = cn.id)
                                                   ->  Parallel Seq Scan on movie_companies mc  (cost=0.00..29661.37 rows=1087137 width=12) (actual time=0.024..77.253 rows=869710 loops=3)
                                                   ->  Parallel Hash  (cost=4722.92..4722.92 rows=829 width=4) (actual time=15.715..15.715 rows=454 loops=3)
                                                         Buckets: 2048  Batches: 1  Memory Usage: 112kB
                                                         ->  Parallel Seq Scan on company_name cn  (cost=0.00..4722.92 rows=829 width=4) (actual time=0.033..15.552 rows=454 loops=3)
                                                               Filter: ((country_code)::text = '[ru]'::text)
                                                               Rows Removed by Filter: 77879
                                             ->  Index Scan using title_pkey on title t  (cost=0.43..0.52 rows=1 width=21) (actual time=0.007..0.007 rows=1 loops=8790)
                                                   Index Cond: (id = mc.movie_id)
                                                   Filter: (production_year > 2005)
                                                   Rows Removed by Filter: 0
                                       ->  Index Scan using movie_id_cast_info on cast_info ci  (cost=0.56..1.94 rows=1 width=12) (actual time=0.141..0.151 rows=0 loops=4539)
                                             Index Cond: (movie_id = mc.movie_id)
                                             Filter: (((note)::text ~~ '%(voice)%'::text) AND ((note)::text ~~ '%(uncredited)%'::text))
                                             Rows Removed by Filter: 50
                                 ->  Hash  (cost=1.15..1.15 rows=1 width=4) (actual time=0.020..0.020 rows=1 loops=3)
                                       Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                       ->  Seq Scan on role_type rt  (cost=0.00..1.15 rows=1 width=4) (actual time=0.013..0.015 rows=1 loops=3)
                                             Filter: ((role)::text = 'actor'::text)
                                             Rows Removed by Filter: 11
                           ->  Index Scan using char_name_pkey on char_name chn  (cost=0.43..4.94 rows=1 width=20) (actual time=0.010..0.010 rows=1 loops=112)
                                 Index Cond: (id = ci.person_role_id)
                     ->  Index Only Scan using company_type_pkey on company_type ct  (cost=0.13..0.15 rows=1 width=4) (actual time=0.002..0.002 rows=1 loops=104)
                           Index Cond: (id = mc.company_type_id)
                           Heap Fetches: 104
 Planning Time: 4.188 ms
 Execution Time: 436.274 ms
(40 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/10b.sql_explained.sql
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=43581.05..43581.06 rows=1 width=64) (actual time=265.217..265.217 rows=1 loops=1)
   ->  Gather  (cost=43580.83..43581.04 rows=2 width=64) (actual time=265.070..268.147 rows=3 loops=1)
         Workers Planned: 2
         Workers Launched: 2
         ->  Partial Aggregate  (cost=42580.83..42580.84 rows=1 width=64) (actual time=262.558..262.558 rows=1 loops=3)
               ->  Hash Join  (cost=4736.96..42580.54 rows=58 width=33) (actual time=262.552..262.552 rows=0 loops=3)
                     Hash Cond: (mc.company_type_id = ct.id)
                     ->  Nested Loop  (cost=4735.87..42579.14 rows=58 width=37) (actual time=262.483..262.483 rows=0 loops=3)
                           ->  Hash Join  (cost=4735.44..42510.24 rows=119 width=25) (actual time=262.482..262.483 rows=0 loops=3)
                                 Hash Cond: (ci.role_id = rt.id)
                                 ->  Nested Loop  (cost=4734.28..42504.02 rows=1424 width=29) (actual time=16.447..262.362 rows=871 loops=3)
                                       Join Filter: (t.id = ci.movie_id)
                                       ->  Nested Loop  (cost=4733.71..40613.13 rows=1018 width=29) (actual time=15.708..198.952 rows=420 loops=3)
                                             ->  Parallel Hash Join  (cost=4733.28..37248.44 rows=6523 width=8) (actual time=15.630..174.844 rows=2930 loops=3)
                                                   Hash Cond: (mc.company_id = cn.id)
                                                   ->  Parallel Seq Scan on movie_companies mc  (cost=0.00..29661.37 rows=1087137 width=12) (actual time=0.021..76.312 rows=869710 loops=3)
                                                   ->  Parallel Hash  (cost=4722.92..4722.92 rows=829 width=4) (actual time=15.367..15.368 rows=454 loops=3)
                                                         Buckets: 2048  Batches: 1  Memory Usage: 112kB
                                                         ->  Parallel Seq Scan on company_name cn  (cost=0.00..4722.92 rows=829 width=4) (actual time=0.042..15.199 rows=454 loops=3)
                                                               Filter: ((country_code)::text = '[ru]'::text)
                                                               Rows Removed by Filter: 77879
                                             ->  Index Scan using title_pkey on title t  (cost=0.43..0.52 rows=1 width=21) (actual time=0.008..0.008 rows=0 loops=8790)
                                                   Index Cond: (id = mc.movie_id)
                                                   Filter: (production_year > 2010)
                                                   Rows Removed by Filter: 1
                                       ->  Index Scan using movie_id_cast_info on cast_info ci  (cost=0.56..1.84 rows=1 width=12) (actual time=0.080..0.150 rows=2 loops=1259)
                                             Index Cond: (movie_id = mc.movie_id)
                                             Filter: ((note)::text ~~ '%(producer)%'::text)
                                             Rows Removed by Filter: 44
                                 ->  Hash  (cost=1.15..1.15 rows=1 width=4) (actual time=0.016..0.016 rows=1 loops=3)
                                       Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                       ->  Seq Scan on role_type rt  (cost=0.00..1.15 rows=1 width=4) (actual time=0.012..0.013 rows=1 loops=3)
                                             Filter: ((role)::text = 'actor'::text)
                                             Rows Removed by Filter: 11
                           ->  Index Scan using char_name_pkey on char_name chn  (cost=0.43..0.58 rows=1 width=20) (never executed)
                                 Index Cond: (id = ci.person_role_id)
                     ->  Hash  (cost=1.04..1.04 rows=4 width=4) (actual time=0.019..0.019 rows=4 loops=3)
                           Buckets: 1024  Batches: 1  Memory Usage: 9kB
                           ->  Seq Scan on company_type ct  (cost=0.00..1.04 rows=4 width=4) (actual time=0.014..0.014 rows=4 loops=3)
 Planning Time: 4.195 ms
 Execution Time: 268.348 ms
(41 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/10c.sql_explained.sql
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=652454.39..652454.40 rows=1 width=64) (actual time=2629.582..2629.582 rows=1 loops=1)
   ->  Gather  (cost=652454.17..652454.38 rows=2 width=64) (actual time=2626.636..2687.993 rows=3 loops=1)
         Workers Planned: 2
         Workers Launched: 2
         ->  Partial Aggregate  (cost=651454.17..651454.18 rows=1 width=64) (actual time=2624.157..2624.158 rows=1 loops=3)
               ->  Hash Join  (cost=186238.47..650533.03 rows=184228 width=33) (actual time=2613.774..2624.141 rows=3 loops=3)
                     Hash Cond: (ci.role_id = rt.id)
                     ->  Hash Join  (cost=186237.20..649877.37 rows=184228 width=37) (actual time=2613.652..2624.017 rows=3 loops=3)
                           Hash Cond: (mc.company_type_id = ct.id)
                           ->  Parallel Hash Join  (cost=186236.11..648880.30 rows=184228 width=41) (actual time=2613.624..2623.988 rows=3 loops=3)
                                 Hash Cond: (ci.movie_id = t.id)
                                 ->  Parallel Hash Join  (cost=73555.68..529761.99 rows=276569 width=24) (actual time=1825.236..1861.986 rows=5 loops=3)
                                       Hash Cond: (ci.person_role_id = chn.id)
                                       ->  Parallel Seq Scan on cast_info ci  (cost=0.00..441459.62 rows=571306 width=12) (actual time=149.491..1403.339 rows=478480 loops=3)
                                             Filter: ((note)::text ~~ '%(producer)%'::text)
                                             Rows Removed by Filter: 11602968
                                       ->  Parallel Hash  (cost=49532.75..49532.75 rows=1308475 width=20) (actual time=360.152..360.152 rows=1046780 loops=3)
                                             Buckets: 65536  Batches: 64  Memory Usage: 3264kB
                                             ->  Parallel Seq Scan on char_name chn  (cost=0.00..49532.75 rows=1308475 width=20) (actual time=0.025..130.674 rows=1046780 loops=3)
                                 ->  Parallel Hash  (cost=107416.88..107416.88 rows=272203 width=29) (actual time=746.037..746.037 rows=198750 loops=3)
                                       Buckets: 65536  Batches: 16  Memory Usage: 3008kB
                                       ->  Parallel Hash Join  (cost=44358.48..107416.88 rows=272203 width=29) (actual time=560.362..705.011 rows=198750 loops=3)
                                             Hash Cond: (t.id = mc.movie_id)
                                             ->  Parallel Seq Scan on title t  (cost=0.00..49166.29 rows=724782 width=21) (actual time=0.021..125.957 rows=583011 loops=3)
                                                   Filter: (production_year > 1990)
                                                   Rows Removed by Filter: 259760
                                             ->  Parallel Hash  (cost=37866.93..37866.93 rows=395644 width=8) (actual time=307.490..307.490 rows=384599 loops=3)
                                                   Buckets: 131072  Batches: 16  Memory Usage: 3904kB
                                                   ->  Parallel Hash Join  (cost=5351.77..37866.93 rows=395644 width=8) (actual time=24.933..251.254 rows=384599 loops=3)
                                                         Hash Cond: (mc.company_id = cn.id)
                                                         ->  Parallel Seq Scan on movie_companies mc  (cost=0.00..29661.37 rows=1087137 width=12) (actual time=0.017..77.674 rows=869710 loops=3)
                                                         ->  Parallel Hash  (cost=4722.92..4722.92 rows=50308 width=4) (actual time=24.658..24.658 rows=28281 loops=3)
                                                               Buckets: 131072  Batches: 1  Memory Usage: 4416kB
                                                               ->  Parallel Seq Scan on company_name cn  (cost=0.00..4722.92 rows=50308 width=4) (actual time=0.020..17.128 rows=28281 loops=3)
                                                                     Filter: ((country_code)::text = '[us]'::text)
                                                                     Rows Removed by Filter: 50051
                           ->  Hash  (cost=1.04..1.04 rows=4 width=4) (actual time=0.010..0.010 rows=4 loops=3)
                                 Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                 ->  Seq Scan on company_type ct  (cost=0.00..1.04 rows=4 width=4) (actual time=0.006..0.007 rows=4 loops=3)
                     ->  Hash  (cost=1.12..1.12 rows=12 width=4) (actual time=0.020..0.020 rows=12 loops=3)
                           Buckets: 1024  Batches: 1  Memory Usage: 9kB
                           ->  Seq Scan on role_type rt  (cost=0.00..1.12 rows=12 width=4) (actual time=0.011..0.012 rows=12 loops=3)
 Planning Time: 4.190 ms
 Execution Time: 2688.226 ms
(44 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/11a.sql_explained.sql
SET
                                                                                      QUERY PLAN                                                                                       
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=3751.33..3751.34 rows=1 width=96) (actual time=98.108..98.109 rows=1 loops=1)
   ->  Nested Loop  (cost=8.32..3751.32 rows=1 width=118) (actual time=4.042..98.028 rows=310 loops=1)
         Join Filter: (ml.movie_id = t.id)
         ->  Nested Loop  (cost=7.89..3750.82 rows=1 width=113) (actual time=4.018..97.173 rows=402 loops=1)
               Join Filter: (mc.company_type_id = ct.id)
               Rows Removed by Join Filter: 20
               ->  Nested Loop  (cost=7.89..3749.75 rows=1 width=117) (actual time=4.010..96.742 rows=422 loops=1)
                     ->  Nested Loop  (cost=7.47..3749.30 rows=1 width=102) (actual time=3.582..94.388 rows=1021 loops=1)
                           Join Filter: (ml.movie_id = mc.movie_id)
                           ->  Nested Loop  (cost=7.04..3748.73 rows=1 width=90) (actual time=3.549..93.140 rows=199 loops=1)
                                 Join Filter: (ml.link_type_id = lt.id)
                                 Rows Removed by Join Filter: 303
                                 ->  Seq Scan on link_type lt  (cost=0.00..1.23 rows=1 width=86) (actual time=0.016..0.021 rows=2 loops=1)
                                       Filter: ((link)::text ~~ '%follow%'::text)
                                       Rows Removed by Filter: 16
                                 ->  Nested Loop  (cost=7.04..3747.37 rows=11 width=12) (actual time=3.103..46.531 rows=251 loops=2)
                                       ->  Nested Loop  (cost=6.75..3732.91 rows=34 width=4) (actual time=3.096..36.867 rows=10544 loops=2)
                                             ->  Seq Scan on keyword k  (cost=0.00..2626.12 rows=1 width=4) (actual time=0.783..12.074 rows=1 loops=2)
                                                   Filter: ((keyword)::text = 'sequel'::text)
                                                   Rows Removed by Filter: 134169
                                             ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1103.80 rows=299 width=8) (actual time=2.295..23.792 rows=10544 loops=2)
                                                   Recheck Cond: (keyword_id = k.id)
                                                   Heap Blocks: exact=11140
                                                   ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=1.367..1.367 rows=10544 loops=2)
                                                         Index Cond: (keyword_id = k.id)
                                       ->  Index Scan using movie_id_movie_link on movie_link ml  (cost=0.29..0.38 rows=5 width=8) (actual time=0.001..0.001 rows=0 loops=21088)
                                             Index Cond: (movie_id = mk.movie_id)
                           ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..0.54 rows=2 width=12) (actual time=0.004..0.005 rows=5 loops=199)
                                 Index Cond: (movie_id = mk.movie_id)
                                 Filter: (note IS NULL)
                                 Rows Removed by Filter: 2
                     ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..0.46 rows=1 width=23) (actual time=0.002..0.002 rows=0 loops=1021)
                           Index Cond: (id = mc.company_id)
                           Filter: (((country_code)::text <> '[pl]'::text) AND (((name)::text ~~ '%Film%'::text) OR ((name)::text ~~ '%Warner%'::text)))
                           Rows Removed by Filter: 1
               ->  Seq Scan on company_type ct  (cost=0.00..1.05 rows=1 width=4) (actual time=0.000..0.000 rows=1 loops=422)
                     Filter: ((kind)::text = 'production companies'::text)
                     Rows Removed by Filter: 1
         ->  Index Scan using title_pkey on title t  (cost=0.43..0.49 rows=1 width=21) (actual time=0.002..0.002 rows=1 loops=402)
               Index Cond: (id = mk.movie_id)
               Filter: ((production_year >= 1950) AND (production_year <= 2000))
               Rows Removed by Filter: 0
 Planning Time: 6.857 ms
 Execution Time: 98.316 ms
(44 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/11b.sql_explained.sql
SET
                                                                                      QUERY PLAN                                                                                       
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=3751.33..3751.34 rows=1 width=96) (actual time=32.438..32.438 rows=1 loops=1)
   ->  Nested Loop  (cost=8.32..3751.32 rows=1 width=118) (actual time=4.627..32.424 rows=14 loops=1)
         Join Filter: (ml.movie_id = t.id)
         ->  Nested Loop  (cost=7.89..3750.82 rows=1 width=113) (actual time=3.372..32.196 rows=102 loops=1)
               Join Filter: (mc.company_type_id = ct.id)
               Rows Removed by Join Filter: 1
               ->  Nested Loop  (cost=7.89..3749.75 rows=1 width=117) (actual time=3.365..32.088 rows=103 loops=1)
                     ->  Nested Loop  (cost=7.47..3749.30 rows=1 width=102) (actual time=3.080..31.273 rows=288 loops=1)
                           Join Filter: (ml.movie_id = mc.movie_id)
                           ->  Nested Loop  (cost=7.04..3748.73 rows=1 width=90) (actual time=3.063..30.852 rows=64 loops=1)
                                 Join Filter: (ml.link_type_id = lt.id)
                                 Rows Removed by Join Filter: 187
                                 ->  Seq Scan on link_type lt  (cost=0.00..1.23 rows=1 width=86) (actual time=0.010..0.013 rows=1 loops=1)
                                       Filter: ((link)::text ~~ '%follows%'::text)
                                       Rows Removed by Filter: 17
                                 ->  Nested Loop  (cost=7.04..3747.37 rows=11 width=12) (actual time=3.049..30.814 rows=251 loops=1)
                                       ->  Nested Loop  (cost=6.75..3732.91 rows=34 width=4) (actual time=3.042..21.866 rows=10544 loops=1)
                                             ->  Seq Scan on keyword k  (cost=0.00..2626.12 rows=1 width=4) (actual time=0.717..10.046 rows=1 loops=1)
                                                   Filter: ((keyword)::text = 'sequel'::text)
                                                   Rows Removed by Filter: 134169
                                             ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1103.80 rows=299 width=8) (actual time=2.323..10.884 rows=10544 loops=1)
                                                   Recheck Cond: (keyword_id = k.id)
                                                   Heap Blocks: exact=5570
                                                   ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=1.402..1.403 rows=10544 loops=1)
                                                         Index Cond: (keyword_id = k.id)
                                       ->  Index Scan using movie_id_movie_link on movie_link ml  (cost=0.29..0.38 rows=5 width=8) (actual time=0.001..0.001 rows=0 loops=10544)
                                             Index Cond: (movie_id = mk.movie_id)
                           ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..0.54 rows=2 width=12) (actual time=0.004..0.006 rows=4 loops=64)
                                 Index Cond: (movie_id = mk.movie_id)
                                 Filter: (note IS NULL)
                                 Rows Removed by Filter: 2
                     ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..0.46 rows=1 width=23) (actual time=0.003..0.003 rows=0 loops=288)
                           Index Cond: (id = mc.company_id)
                           Filter: (((country_code)::text <> '[pl]'::text) AND (((name)::text ~~ '%Film%'::text) OR ((name)::text ~~ '%Warner%'::text)))
                           Rows Removed by Filter: 1
               ->  Seq Scan on company_type ct  (cost=0.00..1.05 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=103)
                     Filter: ((kind)::text = 'production companies'::text)
                     Rows Removed by Filter: 1
         ->  Index Scan using title_pkey on title t  (cost=0.43..0.49 rows=1 width=21) (actual time=0.002..0.002 rows=0 loops=102)
               Index Cond: (id = mk.movie_id)
               Filter: (((title)::text ~~ '%Money%'::text) AND (production_year = 1998))
               Rows Removed by Filter: 1
 Planning Time: 6.644 ms
 Execution Time: 32.637 ms
(44 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/11c.sql_explained.sql
SET
                                                                                      QUERY PLAN                                                                                       
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=6166.44..6166.45 rows=1 width=96) (actual time=217.203..217.203 rows=1 loops=1)
   ->  Nested Loop  (cost=8.32..6166.44 rows=1 width=60) (actual time=3.533..215.589 rows=6946 loops=1)
         Join Filter: (ml.movie_id = t.id)
         ->  Nested Loop  (cost=7.89..6165.94 rows=1 width=55) (actual time=3.513..204.120 rows=6946 loops=1)
               Join Filter: (ml.link_type_id = lt.id)
               Rows Removed by Join Filter: 42158
               ->  Nested Loop  (cost=7.89..6164.53 rows=1 width=59) (actual time=3.505..191.210 rows=6946 loops=1)
                     ->  Nested Loop  (cost=7.47..6137.17 rows=60 width=44) (actual time=3.161..164.866 rows=14916 loops=1)
                           Join Filter: (mc.company_type_id = ct.id)
                           Rows Removed by Join Filter: 1782
                           ->  Nested Loop  (cost=7.47..6133.01 rows=79 width=48) (actual time=3.151..161.022 rows=15510 loops=1)
                                 Join Filter: (ml.movie_id = mc.movie_id)
                                 ->  Nested Loop  (cost=7.04..6115.09 rows=31 width=12) (actual time=3.128..152.001 rows=1460 loops=1)
                                       ->  Nested Loop  (cost=6.75..6072.14 rows=101 width=4) (actual time=3.121..109.741 rows=47403 loops=1)
                                             ->  Seq Scan on keyword k  (cost=0.00..2793.84 rows=3 width=4) (actual time=0.791..17.018 rows=3 loops=1)
                                                   Filter: ((keyword)::text = ANY ('{sequel,revenge,based-on-novel}'::text[]))
                                                   Rows Removed by Filter: 134167
                                             ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1089.78 rows=299 width=8) (actual time=3.270..29.384 rows=15801 loops=3)
                                                   Recheck Cond: (keyword_id = k.id)
                                                   Heap Blocks: exact=23953
                                                   ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=1.901..1.901 rows=15801 loops=3)
                                                         Index Cond: (keyword_id = k.id)
                                       ->  Index Scan using movie_id_movie_link on movie_link ml  (cost=0.29..0.38 rows=5 width=8) (actual time=0.001..0.001 rows=0 loops=47403)
                                             Index Cond: (movie_id = mk.movie_id)
                                 ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..0.54 rows=3 width=36) (actual time=0.002..0.005 rows=11 loops=1460)
                                       Index Cond: (movie_id = mk.movie_id)
                                       Filter: (note IS NOT NULL)
                                       Rows Removed by Filter: 2
                           ->  Materialize  (cost=0.00..1.06 rows=3 width=4) (actual time=0.000..0.000 rows=1 loops=15510)
                                 ->  Seq Scan on company_type ct  (cost=0.00..1.05 rows=3 width=4) (actual time=0.006..0.008 rows=3 loops=1)
                                       Filter: ((kind IS NOT NULL) AND ((kind)::text <> 'production companies'::text))
                                       Rows Removed by Filter: 1
                     ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..0.46 rows=1 width=23) (actual time=0.002..0.002 rows=0 loops=14916)
                           Index Cond: (id = mc.company_id)
                           Filter: (((country_code)::text <> '[pl]'::text) AND (((name)::text ~~ '20th Century Fox%'::text) OR ((name)::text ~~ 'Twentieth Century Fox%'::text)))
                           Rows Removed by Filter: 1
               ->  Seq Scan on link_type lt  (cost=0.00..1.18 rows=18 width=4) (actual time=0.001..0.001 rows=7 loops=6946)
         ->  Index Scan using title_pkey on title t  (cost=0.43..0.49 rows=1 width=21) (actual time=0.001..0.001 rows=1 loops=6946)
               Index Cond: (id = mk.movie_id)
               Filter: (production_year > 1950)
 Planning Time: 6.536 ms
 Execution Time: 217.369 ms
(42 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/11d.sql_explained.sql
SET
                                                                                      QUERY PLAN                                                                                       
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=6183.65..6183.66 rows=1 width=96) (actual time=196.200..196.200 rows=1 loops=1)
   ->  Nested Loop  (cost=8.32..6183.29 rows=48 width=60) (actual time=3.168..193.102 rows=14899 loops=1)
         ->  Nested Loop  (cost=7.90..6158.94 rows=54 width=45) (actual time=3.154..169.080 rows=14916 loops=1)
               Join Filter: (mc.company_type_id = ct.id)
               Rows Removed by Join Filter: 1782
               ->  Nested Loop  (cost=7.90..6155.09 rows=71 width=49) (actual time=3.146..165.551 rows=15510 loops=1)
                     Join Filter: (ml.movie_id = mc.movie_id)
                     ->  Nested Loop  (cost=7.47..6138.91 rows=28 width=29) (actual time=3.139..157.613 rows=1460 loops=1)
                           Join Filter: (ml.link_type_id = lt.id)
                           Rows Removed by Join Filter: 10576
                           ->  Nested Loop  (cost=7.47..6130.60 rows=28 width=33) (actual time=3.126..156.104 rows=1460 loops=1)
                                 Join Filter: (ml.movie_id = t.id)
                                 ->  Nested Loop  (cost=7.04..6115.09 rows=31 width=12) (actual time=3.103..152.513 rows=1460 loops=1)
                                       ->  Nested Loop  (cost=6.75..6072.14 rows=101 width=4) (actual time=3.096..110.005 rows=47403 loops=1)
                                             ->  Seq Scan on keyword k  (cost=0.00..2793.84 rows=3 width=4) (actual time=0.805..19.345 rows=3 loops=1)
                                                   Filter: ((keyword)::text = ANY ('{sequel,revenge,based-on-novel}'::text[]))
                                                   Rows Removed by Filter: 134167
                                             ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1089.78 rows=299 width=8) (actual time=3.239..28.728 rows=15801 loops=3)
                                                   Recheck Cond: (keyword_id = k.id)
                                                   Heap Blocks: exact=23953
                                                   ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=1.884..1.884 rows=15801 loops=3)
                                                         Index Cond: (keyword_id = k.id)
                                       ->  Index Scan using movie_id_movie_link on movie_link ml  (cost=0.29..0.38 rows=5 width=8) (actual time=0.001..0.001 rows=0 loops=47403)
                                             Index Cond: (movie_id = mk.movie_id)
                                 ->  Index Scan using title_pkey on title t  (cost=0.43..0.49 rows=1 width=21) (actual time=0.002..0.002 rows=1 loops=1460)
                                       Index Cond: (id = mk.movie_id)
                                       Filter: (production_year > 1950)
                           ->  Materialize  (cost=0.00..1.27 rows=18 width=4) (actual time=0.000..0.000 rows=8 loops=1460)
                                 ->  Seq Scan on link_type lt  (cost=0.00..1.18 rows=18 width=4) (actual time=0.007..0.009 rows=16 loops=1)
                     ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..0.54 rows=3 width=36) (actual time=0.002..0.004 rows=11 loops=1460)
                           Index Cond: (movie_id = mk.movie_id)
                           Filter: (note IS NOT NULL)
                           Rows Removed by Filter: 2
               ->  Materialize  (cost=0.00..1.06 rows=3 width=4) (actual time=0.000..0.000 rows=1 loops=15510)
                     ->  Seq Scan on company_type ct  (cost=0.00..1.05 rows=3 width=4) (actual time=0.006..0.008 rows=3 loops=1)
                           Filter: ((kind IS NOT NULL) AND ((kind)::text <> 'production companies'::text))
                           Rows Removed by Filter: 1
         ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..0.45 rows=1 width=23) (actual time=0.001..0.001 rows=1 loops=14916)
               Index Cond: (id = mc.company_id)
               Filter: ((country_code)::text <> '[pl]'::text)
               Rows Removed by Filter: 0
 Planning Time: 6.686 ms
 Execution Time: 196.368 ms
(43 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/12a.sql_explained.sql
SET
                                                                                            QUERY PLAN                                                                                            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=16845.82..16845.83 rows=1 width=96) (actual time=204.345..204.345 rows=1 loops=1)
   ->  Gather  (cost=1005.35..16845.81 rows=1 width=42) (actual time=19.575..207.154 rows=397 loops=1)
         Workers Planned: 2
         Workers Launched: 2
         ->  Nested Loop  (cost=5.34..15845.71 rows=1 width=42) (actual time=13.205..201.602 rows=132 loops=3)
               ->  Nested Loop  (cost=5.20..15844.23 rows=9 width=46) (actual time=13.193..201.367 rows=132 loops=3)
                     Join Filter: (t.id = mi.movie_id)
                     ->  Nested Loop  (cost=4.77..15820.25 rows=15 width=54) (actual time=1.049..155.555 rows=1891 loops=3)
                           ->  Nested Loop  (cost=4.35..15801.98 rows=41 width=39) (actual time=1.015..146.061 rows=2203 loops=3)
                                 Join Filter: (mi_idx.movie_id = t.id)
                                 ->  Hash Join  (cost=3.92..15677.77 rows=234 width=18) (actual time=0.187..98.837 rows=8078 loops=3)
                                       Hash Cond: (mc.company_type_id = ct.id)
                                       ->  Nested Loop  (cost=2.86..15671.64 rows=938 width=22) (actual time=0.093..96.098 rows=21569 loops=3)
                                             ->  Hash Join  (cost=2.43..15182.64 rows=187 width=10) (actual time=0.055..56.329 rows=5283 loops=3)
                                                   Hash Cond: (mi_idx.info_type_id = it2.id)
                                                   ->  Parallel Seq Scan on movie_info_idx mi_idx  (cost=0.00..15122.68 rows=21125 width=14) (actual time=0.021..54.319 rows=17543 loops=3)
                                                         Filter: ((info)::text > '8.0'::text)
                                                         Rows Removed by Filter: 442469
                                                   ->  Hash  (cost=2.41..2.41 rows=1 width=4) (actual time=0.018..0.018 rows=1 loops=3)
                                                         Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                         ->  Seq Scan on info_type it2  (cost=0.00..2.41 rows=1 width=4) (actual time=0.014..0.015 rows=1 loops=3)
                                                               Filter: ((info)::text = 'rating'::text)
                                                               Rows Removed by Filter: 112
                                             ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..2.56 rows=5 width=12) (actual time=0.005..0.007 rows=4 loops=15849)
                                                   Index Cond: (movie_id = mi_idx.movie_id)
                                       ->  Hash  (cost=1.05..1.05 rows=1 width=4) (actual time=0.021..0.021 rows=1 loops=3)
                                             Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                             ->  Seq Scan on company_type ct  (cost=0.00..1.05 rows=1 width=4) (actual time=0.015..0.016 rows=1 loops=3)
                                                   Filter: ((kind)::text = 'production companies'::text)
                                                   Rows Removed by Filter: 3
                                 ->  Index Scan using title_pkey on title t  (cost=0.43..0.52 rows=1 width=21) (actual time=0.006..0.006 rows=0 loops=24233)
                                       Index Cond: (id = mc.movie_id)
                                       Filter: ((production_year >= 2005) AND (production_year <= 2008))
                                       Rows Removed by Filter: 1
                           ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..0.45 rows=1 width=23) (actual time=0.004..0.004 rows=1 loops=6610)
                                 Index Cond: (id = mc.company_id)
                                 Filter: ((country_code)::text = '[us]'::text)
                                 Rows Removed by Filter: 0
                     ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..1.59 rows=1 width=8) (actual time=0.024..0.024 rows=0 loops=5674)
                           Index Cond: (movie_id = mc.movie_id)
                           Filter: ((info)::text = ANY ('{Drama,Horror}'::text[]))
                           Rows Removed by Filter: 28
               ->  Index Scan using info_type_pkey on info_type it1  (cost=0.14..0.16 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=397)
                     Index Cond: (id = mi.info_type_id)
                     Filter: ((info)::text = 'genres'::text)
 Planning Time: 6.740 ms
 Execution Time: 207.474 ms
(47 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/12b.sql_explained.sql
SET
                                                                                         QUERY PLAN                                                                                          
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=19208.36..19208.37 rows=1 width=64) (actual time=75.345..75.345 rows=1 loops=1)
   ->  Gather  (cost=1004.41..19208.36 rows=1 width=59) (actual time=73.222..75.404 rows=10 loops=1)
         Workers Planned: 2
         Workers Launched: 2
         ->  Nested Loop  (cost=4.41..18208.26 rows=1 width=59) (actual time=70.460..71.163 rows=3 loops=3)
               ->  Nested Loop  (cost=4.27..18205.80 rows=15 width=63) (actual time=70.411..70.780 rows=403 loops=3)
                     Join Filter: (t.id = mi.movie_id)
                     ->  Nested Loop  (cost=3.84..18203.79 rows=1 width=29) (actual time=70.397..70.544 rows=3 loops=3)
                           ->  Nested Loop  (cost=3.42..18203.35 rows=1 width=33) (actual time=70.388..70.436 rows=11 loops=3)
                                 ->  Nested Loop  (cost=3.29..18203.03 rows=2 width=37) (actual time=70.380..70.414 rows=11 loops=3)
                                       Join Filter: (t.id = mc.movie_id)
                                       ->  Nested Loop  (cost=2.86..18202.37 rows=1 width=25) (actual time=70.370..70.390 rows=1 loops=3)
                                             ->  Hash Join  (cost=2.43..15253.60 rows=5089 width=4) (actual time=70.297..70.298 rows=3 loops=3)
                                                   Hash Cond: (mi_idx.info_type_id = it2.id)
                                                   ->  Parallel Seq Scan on movie_info_idx mi_idx  (cost=0.00..13685.15 rows=575015 width=8) (actual time=0.016..38.103 rows=460012 loops=3)
                                                   ->  Hash  (cost=2.41..2.41 rows=1 width=4) (actual time=0.026..0.026 rows=1 loops=3)
                                                         Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                         ->  Seq Scan on info_type it2  (cost=0.00..2.41 rows=1 width=4) (actual time=0.021..0.021 rows=1 loops=3)
                                                               Filter: ((info)::text = 'bottom 10 rank'::text)
                                                               Rows Removed by Filter: 112
                                             ->  Index Scan using title_pkey on title t  (cost=0.43..0.58 rows=1 width=21) (actual time=0.027..0.027 rows=0 loops=10)
                                                   Index Cond: (id = mi_idx.movie_id)
                                                   Filter: ((production_year > 2000) AND (((title)::text ~~ 'Birdemic%'::text) OR ((title)::text ~~ '%Movie%'::text)))
                                                   Rows Removed by Filter: 1
                                       ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..0.59 rows=5 width=12) (actual time=0.022..0.031 rows=16 loops=2)
                                             Index Cond: (movie_id = mi_idx.movie_id)
                                 ->  Index Scan using company_type_pkey on company_type ct  (cost=0.13..0.15 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=33)
                                       Index Cond: (id = mc.company_type_id)
                                       Filter: ((kind IS NOT NULL) AND (((kind)::text = 'production companies'::text) OR ((kind)::text = 'distributors'::text)))
                           ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..0.45 rows=1 width=4) (actual time=0.010..0.010 rows=0 loops=33)
                                 Index Cond: (id = mc.company_id)
                                 Filter: ((country_code)::text = '[us]'::text)
                                 Rows Removed by Filter: 1
                     ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..1.48 rows=42 width=50) (actual time=0.007..0.052 rows=121 loops=10)
                           Index Cond: (movie_id = mc.movie_id)
               ->  Index Scan using info_type_pkey on info_type it1  (cost=0.14..0.16 rows=1 width=4) (actual time=0.001..0.001 rows=0 loops=1210)
                     Index Cond: (id = mi.info_type_id)
                     Filter: ((info)::text = 'budget'::text)
                     Rows Removed by Filter: 1
 Planning Time: 7.101 ms
 Execution Time: 75.605 ms
(41 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/12c.sql_explained.sql
SET
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=17912.37..17912.38 rows=1 width=96) (actual time=680.160..680.161 rows=1 loops=1)
   ->  Gather  (cost=1007.63..17912.35 rows=2 width=42) (actual time=2.923..692.155 rows=4711 loops=1)
         Workers Planned: 2
         Workers Launched: 2
         ->  Hash Join  (cost=7.63..16912.15 rows=1 width=42) (actual time=1.960..676.323 rows=1570 loops=3)
               Hash Cond: (mi.info_type_id = it1.id)
               ->  Nested Loop  (cost=5.20..16909.46 rows=98 width=46) (actual time=1.887..675.831 rows=1570 loops=3)
                     Join Filter: (t.id = mi.movie_id)
                     ->  Nested Loop  (cost=4.77..16679.52 rows=135 width=54) (actual time=0.360..416.014 rows=14111 loops=3)
                           ->  Hash Join  (cost=4.35..16514.65 rows=370 width=39) (actual time=0.175..342.561 rows=22822 loops=3)
                                 Hash Cond: (mc.company_type_id = ct.id)
                                 ->  Nested Loop  (cost=3.29..16505.58 rows=1482 width=43) (actual time=0.128..335.070 rows=56386 loops=3)
                                       ->  Nested Loop  (cost=2.86..16307.87 rows=296 width=31) (actual time=0.103..247.619 rows=17435 loops=3)
                                             ->  Hash Join  (cost=2.43..15347.68 rows=723 width=10) (actual time=0.054..72.235 rows=40524 loops=3)
                                                   Hash Cond: (mi_idx.info_type_id = it2.id)
                                                   ->  Parallel Seq Scan on movie_info_idx mi_idx  (cost=0.00..15122.68 rows=81724 width=14) (actual time=0.024..62.646 rows=64280 loops=3)
                                                         Filter: ((info)::text > '7.0'::text)
                                                         Rows Removed by Filter: 395732
                                                   ->  Hash  (cost=2.41..2.41 rows=1 width=4) (actual time=0.013..0.014 rows=1 loops=3)
                                                         Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                         ->  Seq Scan on info_type it2  (cost=0.00..2.41 rows=1 width=4) (actual time=0.010..0.011 rows=1 loops=3)
                                                               Filter: ((info)::text = 'rating'::text)
                                                               Rows Removed by Filter: 112
                                             ->  Index Scan using title_pkey on title t  (cost=0.43..1.33 rows=1 width=21) (actual time=0.004..0.004 rows=0 loops=121572)
                                                   Index Cond: (id = mi_idx.movie_id)
                                                   Filter: ((production_year >= 2000) AND (production_year <= 2010))
                                                   Rows Removed by Filter: 1
                                       ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..0.62 rows=5 width=12) (actual time=0.003..0.004 rows=3 loops=52304)
                                             Index Cond: (movie_id = t.id)
                                 ->  Hash  (cost=1.05..1.05 rows=1 width=4) (actual time=0.013..0.013 rows=1 loops=3)
                                       Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                       ->  Seq Scan on company_type ct  (cost=0.00..1.05 rows=1 width=4) (actual time=0.010..0.010 rows=1 loops=3)
                                             Filter: ((kind)::text = 'production companies'::text)
                                             Rows Removed by Filter: 3
                           ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..0.45 rows=1 width=23) (actual time=0.003..0.003 rows=1 loops=68466)
                                 Index Cond: (id = mc.company_id)
                                 Filter: ((country_code)::text = '[us]'::text)
                                 Rows Removed by Filter: 0
                     ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..1.69 rows=1 width=8) (actual time=0.018..0.018 rows=0 loops=42332)
                           Index Cond: (movie_id = mc.movie_id)
                           Filter: ((info)::text = ANY ('{Drama,Horror,Western,Family}'::text[]))
                           Rows Removed by Filter: 29
               ->  Hash  (cost=2.41..2.41 rows=1 width=4) (actual time=0.025..0.025 rows=1 loops=3)
                     Buckets: 1024  Batches: 1  Memory Usage: 9kB
                     ->  Seq Scan on info_type it1  (cost=0.00..2.41 rows=1 width=4) (actual time=0.014..0.021 rows=1 loops=3)
                           Filter: ((info)::text = 'genres'::text)
                           Rows Removed by Filter: 112
 Planning Time: 6.485 ms
 Execution Time: 693.533 ms
(49 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/13a.sql_explained.sql
SET
                                                                                               QUERY PLAN                                                                                                
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=20132.55..20132.56 rows=1 width=96) (actual time=1325.818..1325.818 rows=1 loops=1)
   ->  Gather  (cost=20132.32..20132.53 rows=2 width=96) (actual time=1325.255..1328.531 rows=3 loops=1)
         Workers Planned: 2
         Workers Launched: 2
         ->  Partial Aggregate  (cost=19132.32..19132.33 rows=1 width=96) (actual time=1322.773..1322.773 rows=1 loops=3)
               ->  Hash Join  (cost=8.73..19132.25 rows=10 width=65) (actual time=268.132..1315.808 rows=37034 loops=3)
                     Hash Cond: (mi.info_type_id = it2.id)
                     ->  Nested Loop  (cost=6.30..19126.56 rows=1197 width=69) (actual time=268.029..1300.310 rows=172109 loops=3)
                           ->  Nested Loop  (cost=5.87..19055.86 rows=37 width=35) (actual time=267.997..1158.764 rows=5490 loops=3)
                                 ->  Hash Join  (cost=5.45..18649.93 rows=911 width=39) (actual time=266.926..882.329 rows=100870 loops=3)
                                       Hash Cond: (mc.company_type_id = ct.id)
                                       ->  Nested Loop  (cost=4.39..18629.17 rows=3643 width=43) (actual time=266.896..852.002 rows=257695 loops=3)
                                             ->  Hash Join  (cost=3.96..18186.75 rows=727 width=31) (actual time=266.846..601.724 rows=69960 loops=3)
                                                   Hash Cond: (t.kind_id = kt.id)
                                                   ->  Nested Loop  (cost=2.86..18164.20 rows=5089 width=35) (actual time=0.083..581.368 rows=153308 loops=3)
                                                         ->  Hash Join  (cost=2.43..15253.60 rows=5089 width=10) (actual time=0.050..109.815 rows=153308 loops=3)
                                                               Hash Cond: (miidx.info_type_id = it.id)
                                                               ->  Parallel Seq Scan on movie_info_idx miidx  (cost=0.00..13685.15 rows=575015 width=14) (actual time=0.019..43.124 rows=460012 loops=3)
                                                               ->  Hash  (cost=2.41..2.41 rows=1 width=4) (actual time=0.015..0.015 rows=1 loops=3)
                                                                     Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                                     ->  Seq Scan on info_type it  (cost=0.00..2.41 rows=1 width=4) (actual time=0.010..0.011 rows=1 loops=3)
                                                                           Filter: ((info)::text = 'rating'::text)
                                                                           Rows Removed by Filter: 112
                                                         ->  Index Scan using title_pkey on title t  (cost=0.43..0.57 rows=1 width=25) (actual time=0.003..0.003 rows=1 loops=459925)
                                                               Index Cond: (id = miidx.movie_id)
                                                   ->  Hash  (cost=1.09..1.09 rows=1 width=4) (actual time=0.011..0.011 rows=1 loops=3)
                                                         Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                         ->  Seq Scan on kind_type kt  (cost=0.00..1.09 rows=1 width=4) (actual time=0.009..0.009 rows=1 loops=3)
                                                               Filter: ((kind)::text = 'movie'::text)
                                                               Rows Removed by Filter: 6
                                             ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..0.56 rows=5 width=12) (actual time=0.002..0.003 rows=4 loops=209880)
                                                   Index Cond: (movie_id = t.id)
                                       ->  Hash  (cost=1.05..1.05 rows=1 width=4) (actual time=0.014..0.014 rows=1 loops=3)
                                             Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                             ->  Seq Scan on company_type ct  (cost=0.00..1.05 rows=1 width=4) (actual time=0.010..0.010 rows=1 loops=3)
                                                   Filter: ((kind)::text = 'production companies'::text)
                                                   Rows Removed by Filter: 3
                                 ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..0.45 rows=1 width=4) (actual time=0.003..0.003 rows=0 loops=302610)
                                       Index Cond: (id = mc.company_id)
                                       Filter: ((country_code)::text = '[de]'::text)
                                       Rows Removed by Filter: 1
                           ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..1.49 rows=42 width=50) (actual time=0.005..0.022 rows=31 loops=16470)
                                 Index Cond: (movie_id = t.id)
                     ->  Hash  (cost=2.41..2.41 rows=1 width=4) (actual time=0.023..0.023 rows=1 loops=3)
                           Buckets: 1024  Batches: 1  Memory Usage: 9kB
                           ->  Seq Scan on info_type it2  (cost=0.00..2.41 rows=1 width=4) (actual time=0.013..0.019 rows=1 loops=3)
                                 Filter: ((info)::text = 'release dates'::text)
                                 Rows Removed by Filter: 112
 Planning Time: 10.114 ms
 Execution Time: 1328.771 ms
(50 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/13b.sql_explained.sql
SET
                                                                                            QUERY PLAN                                                                                             
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=19206.33..19206.34 rows=1 width=96) (actual time=636.236..636.236 rows=1 loops=1)
   ->  Gather  (cost=1004.54..19206.32 rows=1 width=42) (actual time=280.953..645.375 rows=372 loops=1)
         Workers Planned: 2
         Workers Launched: 2
         ->  Nested Loop  (cost=4.54..18206.22 rows=1 width=42) (actual time=294.929..633.431 rows=124 loops=3)
               ->  Nested Loop  (cost=4.40..18205.87 rows=2 width=46) (actual time=294.899..632.671 rows=707 loops=3)
                     Join Filter: (t.id = mi.movie_id)
                     ->  Nested Loop  (cost=3.97..18203.87 rows=1 width=54) (actual time=294.865..631.761 rows=20 loops=3)
                           ->  Nested Loop  (cost=3.84..18203.70 rows=1 width=58) (actual time=294.839..631.667 rows=54 loops=3)
                                 ->  Nested Loop  (cost=3.42..18203.25 rows=1 width=43) (actual time=286.191..630.896 rows=104 loops=3)
                                       Join Filter: (t.id = mc.movie_id)
                                       ->  Nested Loop  (cost=2.99..18202.60 rows=1 width=31) (actual time=286.144..630.481 rows=30 loops=3)
                                             ->  Nested Loop  (cost=2.86..18202.37 rows=1 width=35) (actual time=2.210..630.273 rows=117 loops=3)
                                                   ->  Hash Join  (cost=2.43..15253.60 rows=5089 width=10) (actual time=0.120..106.151 rows=153308 loops=3)
                                                         Hash Cond: (miidx.info_type_id = it.id)
                                                         ->  Parallel Seq Scan on movie_info_idx miidx  (cost=0.00..13685.15 rows=575015 width=14) (actual time=0.021..41.027 rows=460012 loops=3)
                                                         ->  Hash  (cost=2.41..2.41 rows=1 width=4) (actual time=0.023..0.023 rows=1 loops=3)
                                                               Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                               ->  Seq Scan on info_type it  (cost=0.00..2.41 rows=1 width=4) (actual time=0.017..0.018 rows=1 loops=3)
                                                                     Filter: ((info)::text = 'rating'::text)
                                                                     Rows Removed by Filter: 112
                                                   ->  Index Scan using title_pkey on title t  (cost=0.43..0.58 rows=1 width=25) (actual time=0.003..0.003 rows=0 loops=459925)
                                                         Index Cond: (id = miidx.movie_id)
                                                         Filter: (((title)::text <> ''::text) AND (((title)::text ~~ '%Champion%'::text) OR ((title)::text ~~ '%Loser%'::text)))
                                                         Rows Removed by Filter: 1
                                             ->  Index Scan using kind_type_pkey on kind_type kt  (cost=0.13..0.18 rows=1 width=4) (actual time=0.001..0.001 rows=0 loops=352)
                                                   Index Cond: (id = t.kind_id)
                                                   Filter: ((kind)::text = 'movie'::text)
                                                   Rows Removed by Filter: 1
                                       ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..0.59 rows=5 width=12) (actual time=0.010..0.012 rows=3 loops=90)
                                             Index Cond: (movie_id = miidx.movie_id)
                                 ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..0.45 rows=1 width=23) (actual time=0.007..0.007 rows=1 loops=313)
                                       Index Cond: (id = mc.company_id)
                                       Filter: ((country_code)::text = '[us]'::text)
                                       Rows Removed by Filter: 0
                           ->  Index Scan using company_type_pkey on company_type ct  (cost=0.13..0.15 rows=1 width=4) (actual time=0.001..0.001 rows=0 loops=161)
                                 Index Cond: (id = mc.company_type_id)
                                 Filter: ((kind)::text = 'production companies'::text)
                                 Rows Removed by Filter: 1
                     ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..1.48 rows=42 width=8) (actual time=0.009..0.039 rows=35 loops=61)
                           Index Cond: (movie_id = mc.movie_id)
               ->  Index Scan using info_type_pkey on info_type it2  (cost=0.14..0.16 rows=1 width=4) (actual time=0.001..0.001 rows=0 loops=2122)
                     Index Cond: (id = mi.info_type_id)
                     Filter: ((info)::text = 'release dates'::text)
                     Rows Removed by Filter: 1
 Planning Time: 10.556 ms
 Execution Time: 645.711 ms
(47 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/13c.sql_explained.sql
SET
                                                                                            QUERY PLAN                                                                                             
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=19206.33..19206.34 rows=1 width=96) (actual time=616.549..616.549 rows=1 loops=1)
   ->  Gather  (cost=1004.54..19206.32 rows=1 width=42) (actual time=616.421..621.227 rows=53 loops=1)
         Workers Planned: 2
         Workers Launched: 2
         ->  Nested Loop  (cost=4.54..18206.22 rows=1 width=42) (actual time=457.509..613.734 rows=18 loops=3)
               ->  Nested Loop  (cost=4.40..18205.87 rows=2 width=46) (actual time=457.479..613.639 rows=73 loops=3)
                     Join Filter: (t.id = mi.movie_id)
                     ->  Nested Loop  (cost=3.97..18203.87 rows=1 width=54) (actual time=457.451..613.502 rows=5 loops=3)
                           ->  Nested Loop  (cost=3.84..18203.70 rows=1 width=58) (actual time=457.381..613.470 rows=16 loops=3)
                                 ->  Nested Loop  (cost=3.42..18203.25 rows=1 width=43) (actual time=457.354..613.210 rows=32 loops=3)
                                       Join Filter: (t.id = mc.movie_id)
                                       ->  Nested Loop  (cost=2.99..18202.60 rows=1 width=31) (actual time=457.312..613.124 rows=10 loops=3)
                                             ->  Nested Loop  (cost=2.86..18202.37 rows=1 width=35) (actual time=28.331..613.075 rows=22 loops=3)
                                                   ->  Hash Join  (cost=2.43..15253.60 rows=5089 width=10) (actual time=0.122..105.951 rows=153308 loops=3)
                                                         Hash Cond: (miidx.info_type_id = it.id)
                                                         ->  Parallel Seq Scan on movie_info_idx miidx  (cost=0.00..13685.15 rows=575015 width=14) (actual time=0.017..40.867 rows=460012 loops=3)
                                                         ->  Hash  (cost=2.41..2.41 rows=1 width=4) (actual time=0.026..0.026 rows=1 loops=3)
                                                               Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                               ->  Seq Scan on info_type it  (cost=0.00..2.41 rows=1 width=4) (actual time=0.020..0.021 rows=1 loops=3)
                                                                     Filter: ((info)::text = 'rating'::text)
                                                                     Rows Removed by Filter: 112
                                                   ->  Index Scan using title_pkey on title t  (cost=0.43..0.58 rows=1 width=25) (actual time=0.003..0.003 rows=0 loops=459925)
                                                         Index Cond: (id = miidx.movie_id)
                                                         Filter: (((title)::text <> ''::text) AND (((title)::text ~~ 'Champion%'::text) OR ((title)::text ~~ 'Loser%'::text)))
                                                         Rows Removed by Filter: 1
                                             ->  Index Scan using kind_type_pkey on kind_type kt  (cost=0.13..0.18 rows=1 width=4) (actual time=0.002..0.002 rows=0 loops=66)
                                                   Index Cond: (id = t.kind_id)
                                                   Filter: ((kind)::text = 'movie'::text)
                                                   Rows Removed by Filter: 1
                                       ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..0.59 rows=5 width=12) (actual time=0.006..0.008 rows=3 loops=29)
                                             Index Cond: (movie_id = miidx.movie_id)
                                 ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..0.45 rows=1 width=23) (actual time=0.008..0.008 rows=0 loops=95)
                                       Index Cond: (id = mc.company_id)
                                       Filter: ((country_code)::text = '[us]'::text)
                                       Rows Removed by Filter: 1
                           ->  Index Scan using company_type_pkey on company_type ct  (cost=0.13..0.15 rows=1 width=4) (actual time=0.002..0.002 rows=0 loops=47)
                                 Index Cond: (id = mc.company_type_id)
                                 Filter: ((kind)::text = 'production companies'::text)
                                 Rows Removed by Filter: 1
                     ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..1.48 rows=42 width=8) (actual time=0.009..0.026 rows=16 loops=14)
                           Index Cond: (movie_id = mc.movie_id)
               ->  Index Scan using info_type_pkey on info_type it2  (cost=0.14..0.16 rows=1 width=4) (actual time=0.001..0.001 rows=0 loops=218)
                     Index Cond: (id = mi.info_type_id)
                     Filter: ((info)::text = 'release dates'::text)
                     Rows Removed by Filter: 1
 Planning Time: 10.777 ms
 Execution Time: 621.486 ms
(47 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/13d.sql_explained.sql
SET
                                                                                               QUERY PLAN                                                                                                
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=20720.69..20720.70 rows=1 width=96) (actual time=2034.143..2034.143 rows=1 loops=1)
   ->  Gather  (cost=20720.46..20720.67 rows=2 width=96) (actual time=2034.120..2036.898 rows=3 loops=1)
         Workers Planned: 2
         Workers Launched: 2
         ->  Partial Aggregate  (cost=19720.46..19720.47 rows=1 width=96) (actual time=2031.322..2031.322 rows=1 loops=3)
               ->  Hash Join  (cost=8.73..19719.76 rows=94 width=42) (actual time=266.436..1990.229 rows=223463 loops=3)
                     Hash Cond: (mi.info_type_id = it2.id)
                     ->  Nested Loop  (cost=6.30..19688.31 rows=10660 width=46) (actual time=266.329..1876.472 rows=1438861 loops=3)
                           ->  Nested Loop  (cost=5.87..19055.86 rows=331 width=54) (actual time=266.300..1171.009 rows=29098 loops=3)
                                 ->  Hash Join  (cost=5.45..18649.93 rows=911 width=39) (actual time=266.246..881.778 rows=100870 loops=3)
                                       Hash Cond: (mc.company_type_id = ct.id)
                                       ->  Nested Loop  (cost=4.39..18629.17 rows=3643 width=43) (actual time=266.217..850.290 rows=257695 loops=3)
                                             ->  Hash Join  (cost=3.96..18186.75 rows=727 width=31) (actual time=266.171..599.414 rows=69960 loops=3)
                                                   Hash Cond: (t.kind_id = kt.id)
                                                   ->  Nested Loop  (cost=2.86..18164.20 rows=5089 width=35) (actual time=0.097..578.304 rows=153308 loops=3)
                                                         ->  Hash Join  (cost=2.43..15253.60 rows=5089 width=10) (actual time=0.055..110.811 rows=153308 loops=3)
                                                               Hash Cond: (miidx.info_type_id = it.id)
                                                               ->  Parallel Seq Scan on movie_info_idx miidx  (cost=0.00..13685.15 rows=575015 width=14) (actual time=0.023..43.975 rows=460012 loops=3)
                                                               ->  Hash  (cost=2.41..2.41 rows=1 width=4) (actual time=0.016..0.017 rows=1 loops=3)
                                                                     Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                                     ->  Seq Scan on info_type it  (cost=0.00..2.41 rows=1 width=4) (actual time=0.012..0.013 rows=1 loops=3)
                                                                           Filter: ((info)::text = 'rating'::text)
                                                                           Rows Removed by Filter: 112
                                                         ->  Index Scan using title_pkey on title t  (cost=0.43..0.57 rows=1 width=25) (actual time=0.003..0.003 rows=1 loops=459925)
                                                               Index Cond: (id = miidx.movie_id)
                                                   ->  Hash  (cost=1.09..1.09 rows=1 width=4) (actual time=0.010..0.010 rows=1 loops=3)
                                                         Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                         ->  Seq Scan on kind_type kt  (cost=0.00..1.09 rows=1 width=4) (actual time=0.007..0.008 rows=1 loops=3)
                                                               Filter: ((kind)::text = 'movie'::text)
                                                               Rows Removed by Filter: 6
                                             ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..0.56 rows=5 width=12) (actual time=0.002..0.003 rows=4 loops=209880)
                                                   Index Cond: (movie_id = t.id)
                                       ->  Hash  (cost=1.05..1.05 rows=1 width=4) (actual time=0.012..0.012 rows=1 loops=3)
                                             Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                             ->  Seq Scan on company_type ct  (cost=0.00..1.05 rows=1 width=4) (actual time=0.008..0.009 rows=1 loops=3)
                                                   Filter: ((kind)::text = 'production companies'::text)
                                                   Rows Removed by Filter: 3
                                 ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..0.45 rows=1 width=23) (actual time=0.003..0.003 rows=0 loops=302610)
                                       Index Cond: (id = mc.company_id)
                                       Filter: ((country_code)::text = '[us]'::text)
                                       Rows Removed by Filter: 1
                           ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..1.49 rows=42 width=8) (actual time=0.004..0.019 rows=49 loops=87293)
                                 Index Cond: (movie_id = t.id)
                     ->  Hash  (cost=2.41..2.41 rows=1 width=4) (actual time=0.026..0.026 rows=1 loops=3)
                           Buckets: 1024  Batches: 1  Memory Usage: 9kB
                           ->  Seq Scan on info_type it2  (cost=0.00..2.41 rows=1 width=4) (actual time=0.016..0.022 rows=1 loops=3)
                                 Filter: ((info)::text = 'release dates'::text)
                                 Rows Removed by Filter: 112
 Planning Time: 10.482 ms
 Execution Time: 2037.208 ms
(50 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/14a.sql_explained.sql
SET
                                                                                      QUERY PLAN                                                                                       
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=7380.25..7380.26 rows=1 width=64) (actual time=412.417..412.417 rows=1 loops=1)
   ->  Nested Loop  (cost=8.04..7380.24 rows=1 width=23) (actual time=16.116..412.192 rows=761 loops=1)
         Join Filter: (mi.info_type_id = it1.id)
         Rows Removed by Join Filter: 117
         ->  Nested Loop  (cost=8.04..7377.82 rows=1 width=27) (actual time=16.110..408.857 rows=878 loops=1)
               Join Filter: (t.id = mi.movie_id)
               ->  Nested Loop  (cost=7.61..7375.92 rows=1 width=35) (actual time=15.564..324.304 rows=1147 loops=1)
                     Join Filter: (mi_idx.info_type_id = it2.id)
                     Rows Removed by Join Filter: 2233
                     ->  Seq Scan on info_type it2  (cost=0.00..2.41 rows=1 width=4) (actual time=0.012..0.013 rows=1 loops=1)
                           Filter: ((info)::text = 'rating'::text)
                           Rows Removed by Filter: 112
                     ->  Nested Loop  (cost=7.61..7373.39 rows=9 width=39) (actual time=15.177..323.921 rows=3380 loops=1)
                           Join Filter: (t.id = mi_idx.movie_id)
                           ->  Nested Loop  (cost=7.18..7371.79 rows=3 width=25) (actual time=15.148..310.863 rows=1966 loops=1)
                                 Join Filter: (t.kind_id = kt.id)
                                 Rows Removed by Join Filter: 616
                                 ->  Seq Scan on kind_type kt  (cost=0.00..1.09 rows=1 width=4) (actual time=0.013..0.014 rows=1 loops=1)
                                       Filter: ((kind)::text = 'movie'::text)
                                       Rows Removed by Filter: 6
                                 ->  Nested Loop  (cost=7.18..7370.44 rows=21 width=29) (actual time=4.801..310.428 rows=2582 loops=1)
                                       ->  Nested Loop  (cost=6.75..7304.56 rows=135 width=4) (actual time=4.537..140.414 rows=37091 loops=1)
                                             ->  Seq Scan on keyword k  (cost=0.00..2961.55 rows=4 width=4) (actual time=1.172..20.749 rows=3 loops=1)
                                                   Filter: ((keyword)::text = ANY ('{murder,murder-in-title,blood,violence}'::text[]))
                                                   Rows Removed by Filter: 134167
                                             ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1082.76 rows=299 width=8) (actual time=3.370..38.493 rows=12364 loops=3)
                                                   Recheck Cond: (keyword_id = k.id)
                                                   Heap Blocks: exact=26312
                                                   ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=1.835..1.835 rows=12364 loops=3)
                                                         Index Cond: (keyword_id = k.id)
                                       ->  Index Scan using title_pkey on title t  (cost=0.43..0.49 rows=1 width=25) (actual time=0.004..0.004 rows=0 loops=37091)
                                             Index Cond: (id = mk.movie_id)
                                             Filter: (production_year > 2010)
                                             Rows Removed by Filter: 1
                           ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx  (cost=0.43..0.50 rows=3 width=14) (actual time=0.006..0.006 rows=2 loops=1966)
                                 Index Cond: (movie_id = mk.movie_id)
                                 Filter: ((info)::text < '8.5'::text)
                                 Rows Removed by Filter: 0
               ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..1.87 rows=2 width=8) (actual time=0.062..0.073 rows=1 loops=1147)
                     Index Cond: (movie_id = mk.movie_id)
                     Filter: ((info)::text = ANY ('{Sweden,Norway,Germany,Denmark,Swedish,Denish,Norwegian,German,USA,American}'::text[]))
                     Rows Removed by Filter: 69
         ->  Seq Scan on info_type it1  (cost=0.00..2.41 rows=1 width=4) (actual time=0.002..0.003 rows=1 loops=878)
               Filter: ((info)::text = 'countries'::text)
               Rows Removed by Filter: 21
 Planning Time: 6.550 ms
 Execution Time: 412.581 ms
(47 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/14b.sql_explained.sql
SET
                                                                                              QUERY PLAN                                                                                              
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=4867.25..4867.26 rows=1 width=64) (actual time=181.241..181.241 rows=1 loops=1)
   ->  Nested Loop  (cost=8.04..4867.24 rows=1 width=23) (actual time=120.738..181.231 rows=1 loops=1)
         Join Filter: (t.kind_id = kt.id)
         Rows Removed by Join Filter: 1
         ->  Nested Loop  (cost=8.04..4866.14 rows=1 width=27) (actual time=8.320..181.218 rows=2 loops=1)
               Join Filter: (mi_idx.info_type_id = it2.id)
               Rows Removed by Join Filter: 1
               ->  Nested Loop  (cost=8.04..4863.72 rows=1 width=31) (actual time=8.300..181.189 rows=3 loops=1)
                     Join Filter: (t.id = mi_idx.movie_id)
                     ->  Nested Loop  (cost=7.61..4863.21 rows=1 width=33) (actual time=8.280..181.100 rows=8 loops=1)
                           Join Filter: (mi.info_type_id = it1.id)
                           ->  Nested Loop  (cost=7.61..4860.78 rows=1 width=37) (actual time=8.273..181.064 rows=8 loops=1)
                                 Join Filter: (t.id = mi.movie_id)
                                 ->  Nested Loop  (cost=7.18..4858.88 rows=1 width=29) (actual time=8.144..180.384 rows=15 loops=1)
                                       ->  Nested Loop  (cost=6.75..4825.68 rows=67 width=4) (actual time=6.277..81.843 rows=19528 loops=1)
                                             ->  Seq Scan on keyword k  (cost=0.00..2626.12 rows=2 width=4) (actual time=1.172..16.456 rows=1 loops=1)
                                                   Filter: ((keyword)::text = ANY ('{murder,murder-in-title}'::text[]))
                                                   Rows Removed by Filter: 134169
                                             ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1096.79 rows=299 width=8) (actual time=5.102..63.350 rows=19528 loops=1)
                                                   Recheck Cond: (keyword_id = k.id)
                                                   Heap Blocks: exact=12389
                                                   ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=2.924..2.924 rows=19528 loops=1)
                                                         Index Cond: (keyword_id = k.id)
                                       ->  Index Scan using title_pkey on title t  (cost=0.43..0.50 rows=1 width=25) (actual time=0.005..0.005 rows=0 loops=19528)
                                             Index Cond: (id = mk.movie_id)
                                             Filter: ((production_year > 2010) AND (((title)::text ~~ '%murder%'::text) OR ((title)::text ~~ '%Murder%'::text) OR ((title)::text ~~ '%Mord%'::text)))
                                             Rows Removed by Filter: 1
                                 ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..1.87 rows=2 width=8) (actual time=0.042..0.044 rows=1 loops=15)
                                       Index Cond: (movie_id = mk.movie_id)
                                       Filter: ((info)::text = ANY ('{Sweden,Norway,Germany,Denmark,Swedish,Denish,Norwegian,German,USA,American}'::text[]))
                                       Rows Removed by Filter: 12
                           ->  Seq Scan on info_type it1  (cost=0.00..2.41 rows=1 width=4) (actual time=0.003..0.003 rows=1 loops=8)
                                 Filter: ((info)::text = 'countries'::text)
                                 Rows Removed by Filter: 7
                     ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx  (cost=0.43..0.50 rows=1 width=14) (actual time=0.010..0.010 rows=0 loops=8)
                           Index Cond: (movie_id = mk.movie_id)
                           Filter: ((info)::text > '6.0'::text)
                           Rows Removed by Filter: 1
               ->  Seq Scan on info_type it2  (cost=0.00..2.41 rows=1 width=4) (actual time=0.008..0.009 rows=1 loops=3)
                     Filter: ((info)::text = 'rating'::text)
                     Rows Removed by Filter: 104
         ->  Seq Scan on kind_type kt  (cost=0.00..1.09 rows=1 width=4) (actual time=0.005..0.005 rows=1 loops=2)
               Filter: ((kind)::text = 'movie'::text)
               Rows Removed by Filter: 3
 Planning Time: 6.472 ms
 Execution Time: 181.457 ms
(46 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/14c.sql_explained.sql
SET
                                                                                      QUERY PLAN                                                                                       
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=7388.39..7388.40 rows=1 width=64) (actual time=743.476..743.476 rows=1 loops=1)
   ->  Nested Loop  (cost=8.04..7388.39 rows=1 width=23) (actual time=4.709..742.542 rows=4115 loops=1)
         Join Filter: (mi.info_type_id = it1.id)
         Rows Removed by Join Filter: 594
         ->  Nested Loop  (cost=8.04..7385.96 rows=1 width=27) (actual time=4.704..725.802 rows=4709 loops=1)
               Join Filter: (t.id = mi.movie_id)
               ->  Nested Loop  (cost=7.61..7384.06 rows=1 width=35) (actual time=4.643..349.161 rows=5949 loops=1)
                     Join Filter: (mi_idx.info_type_id = it2.id)
                     Rows Removed by Join Filter: 11839
                     ->  Seq Scan on info_type it2  (cost=0.00..2.41 rows=1 width=4) (actual time=0.011..0.013 rows=1 loops=1)
                           Filter: ((info)::text = 'rating'::text)
                           Rows Removed by Filter: 112
                     ->  Nested Loop  (cost=7.61..7381.10 rows=44 width=39) (actual time=4.627..347.304 rows=17788 loops=1)
                           Join Filter: (t.id = mi_idx.movie_id)
                           ->  Nested Loop  (cost=7.18..7373.07 rows=15 width=25) (actual time=4.606..301.583 rows=8073 loops=1)
                                 Join Filter: (t.kind_id = kt.id)
                                 Rows Removed by Join Filter: 4332
                                 ->  Nested Loop  (cost=7.18..7370.44 rows=54 width=29) (actual time=4.534..298.287 rows=9739 loops=1)
                                       ->  Nested Loop  (cost=6.75..7304.56 rows=135 width=4) (actual time=4.512..133.487 rows=37091 loops=1)
                                             ->  Seq Scan on keyword k  (cost=0.00..2961.55 rows=4 width=4) (actual time=1.174..21.407 rows=3 loops=1)
                                                   Filter: ((keyword IS NOT NULL) AND ((keyword)::text = ANY ('{murder,murder-in-title,blood,violence}'::text[])))
                                                   Rows Removed by Filter: 134167
                                             ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1082.76 rows=299 width=8) (actual time=3.370..35.996 rows=12364 loops=3)
                                                   Recheck Cond: (keyword_id = k.id)
                                                   Heap Blocks: exact=26312
                                                   ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=1.836..1.836 rows=12364 loops=3)
                                                         Index Cond: (keyword_id = k.id)
                                       ->  Index Scan using title_pkey on title t  (cost=0.43..0.49 rows=1 width=25) (actual time=0.004..0.004 rows=0 loops=37091)
                                             Index Cond: (id = mk.movie_id)
                                             Filter: (production_year > 2005)
                                             Rows Removed by Filter: 1
                                 ->  Materialize  (cost=0.00..1.10 rows=2 width=4) (actual time=0.000..0.000 rows=1 loops=9739)
                                       ->  Seq Scan on kind_type kt  (cost=0.00..1.09 rows=2 width=4) (actual time=0.017..0.019 rows=2 loops=1)
                                             Filter: ((kind)::text = ANY ('{movie,episode}'::text[]))
                                             Rows Removed by Filter: 5
                           ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx  (cost=0.43..0.50 rows=3 width=14) (actual time=0.005..0.005 rows=2 loops=8073)
                                 Index Cond: (movie_id = mk.movie_id)
                                 Filter: ((info)::text < '8.5'::text)
                                 Rows Removed by Filter: 0
               ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..1.87 rows=2 width=8) (actual time=0.054..0.063 rows=1 loops=5949)
                     Index Cond: (movie_id = mk.movie_id)
                     Filter: ((info)::text = ANY ('{Sweden,Norway,Germany,Denmark,Swedish,Danish,Norwegian,German,USA,American}'::text[]))
                     Rows Removed by Filter: 71
         ->  Seq Scan on info_type it1  (cost=0.00..2.41 rows=1 width=4) (actual time=0.002..0.003 rows=1 loops=4709)
               Filter: ((info)::text = 'countries'::text)
               Rows Removed by Filter: 20
 Planning Time: 6.305 ms
 Execution Time: 743.640 ms
(48 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/15a.sql_explained.sql
SET
                                                                                              QUERY PLAN                                                                                              
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=51520.30..51520.31 rows=1 width=64) (actual time=321.125..321.125 rows=1 loops=1)
   ->  Gather  (cost=51520.08..51520.29 rows=2 width=64) (actual time=320.782..323.955 rows=3 loops=1)
         Workers Planned: 2
         Workers Launched: 2
         ->  Partial Aggregate  (cost=50520.08..50520.09 rows=1 width=64) (actual time=317.996..317.996 rows=1 loops=3)
               ->  Nested Loop  (cost=5354.18..50520.04 rows=7 width=59) (actual time=98.024..317.959 rows=109 loops=3)
                     ->  Nested Loop  (cost=5353.76..50516.97 rows=7 width=63) (actual time=97.998..317.320 rows=109 loops=3)
                           ->  Nested Loop  (cost=5353.33..50515.14 rows=1 width=75) (actual time=69.654..317.089 rows=19 loops=3)
                                 ->  Nested Loop  (cost=5353.19..50514.85 rows=1 width=79) (actual time=69.632..317.022 rows=19 loops=3)
                                       ->  Nested Loop  (cost=5353.06..50514.70 rows=1 width=83) (actual time=69.603..316.951 rows=19 loops=3)
                                             ->  Nested Loop  (cost=5352.62..48271.71 rows=1133 width=33) (actual time=25.066..236.770 rows=1711 loops=3)
                                                   ->  Nested Loop  (cost=5352.19..46344.74 rows=2083 width=12) (actual time=24.941..214.525 rows=4566 loops=3)
                                                         ->  Parallel Hash Join  (cost=5351.77..40470.46 rows=3000 width=8) (actual time=24.878..170.002 rows=14612 loops=3)
                                                               Hash Cond: (mc.company_id = cn.id)
                                                               ->  Parallel Seq Scan on movie_companies mc  (cost=0.00..35097.06 rows=8243 width=12) (actual time=0.031..139.056 rows=20555 loops=3)
                                                                     Filter: (((note)::text ~~ '%(200%)%'::text) AND ((note)::text ~~ '%(worldwide)%'::text))
                                                                     Rows Removed by Filter: 849155
                                                               ->  Parallel Hash  (cost=4722.92..4722.92 rows=50308 width=4) (actual time=24.350..24.350 rows=28281 loops=3)
                                                                     Buckets: 131072  Batches: 1  Memory Usage: 4384kB
                                                                     ->  Parallel Seq Scan on company_name cn  (cost=0.00..4722.92 rows=50308 width=4) (actual time=0.021..17.133 rows=28281 loops=3)
                                                                           Filter: ((country_code)::text = '[us]'::text)
                                                                           Rows Removed by Filter: 50051
                                                         ->  Index Only Scan using movie_id_aka_title on aka_title at  (cost=0.42..1.93 rows=3 width=4) (actual time=0.002..0.003 rows=0 loops=43837)
                                                               Index Cond: (movie_id = mc.movie_id)
                                                               Heap Fetches: 13699
                                                   ->  Index Scan using title_pkey on title t  (cost=0.43..0.93 rows=1 width=21) (actual time=0.005..0.005 rows=0 loops=13699)
                                                         Index Cond: (id = at.movie_id)
                                                         Filter: (production_year > 2000)
                                                         Rows Removed by Filter: 1
                                             ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..1.97 rows=1 width=50) (actual time=0.046..0.047 rows=0 loops=5134)
                                                   Index Cond: (movie_id = t.id)
                                                   Filter: (((note)::text ~~ '%internet%'::text) AND ((info)::text ~~ 'USA:% 200%'::text))
                                                   Rows Removed by Filter: 72
                                       ->  Index Only Scan using company_type_pkey on company_type ct  (cost=0.13..0.15 rows=1 width=4) (actual time=0.003..0.003 rows=1 loops=57)
                                             Index Cond: (id = mc.company_type_id)
                                             Heap Fetches: 57
                                 ->  Index Scan using info_type_pkey on info_type it1  (cost=0.14..0.21 rows=1 width=4) (actual time=0.003..0.003 rows=1 loops=57)
                                       Index Cond: (id = mi.info_type_id)
                                       Filter: ((info)::text = 'release dates'::text)
                           ->  Index Scan using movie_id_movie_keyword on movie_keyword mk  (cost=0.43..1.36 rows=47 width=8) (actual time=0.010..0.011 rows=6 loops=57)
                                 Index Cond: (movie_id = t.id)
                     ->  Index Only Scan using keyword_pkey on keyword k  (cost=0.42..0.44 rows=1 width=4) (actual time=0.005..0.005 rows=1 loops=328)
                           Index Cond: (id = mk.keyword_id)
                           Heap Fetches: 328
 Planning Time: 14.688 ms
 Execution Time: 324.191 ms
(46 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/15b.sql_explained.sql
SET
                                                                                                      QUERY PLAN                                                                                                      
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=6425.67..6425.68 rows=1 width=64) (actual time=30.794..30.794 rows=1 loops=1)
   ->  Gather  (cost=6425.55..6425.66 rows=1 width=64) (actual time=30.718..31.863 rows=2 loops=1)
         Workers Planned: 1
         Workers Launched: 1
         ->  Partial Aggregate  (cost=5425.55..5425.56 rows=1 width=64) (actual time=28.762..28.762 rows=1 loops=2)
               ->  Nested Loop  (cost=2.84..5425.53 rows=5 width=59) (actual time=20.774..28.753 rows=18 loops=2)
                     ->  Nested Loop  (cost=2.42..5423.34 rows=5 width=63) (actual time=20.761..28.605 rows=18 loops=2)
                           ->  Nested Loop  (cost=1.99..5421.40 rows=1 width=75) (actual time=18.378..28.567 rows=2 loops=2)
                                 ->  Nested Loop  (cost=1.85..5421.11 rows=1 width=79) (actual time=18.374..28.560 rows=2 loops=2)
                                       ->  Nested Loop  (cost=1.41..5418.58 rows=1 width=29) (actual time=16.499..27.659 rows=13 loops=2)
                                             ->  Nested Loop  (cost=0.98..5417.65 rows=1 width=8) (actual time=16.482..27.436 rows=14 loops=2)
                                                   ->  Nested Loop  (cost=0.85..5417.49 rows=1 width=12) (actual time=16.463..27.398 rows=14 loops=2)
                                                         ->  Nested Loop  (cost=0.43..5415.54 rows=1 width=8) (actual time=16.116..26.604 rows=139 loops=2)
                                                               ->  Parallel Seq Scan on company_name cn  (cost=0.00..5068.50 rows=1 width=4) (actual time=16.088..22.789 rows=0 loops=2)
                                                                     Filter: (((country_code)::text = '[us]'::text) AND ((name)::text = 'YouTube'::text))
                                                                     Rows Removed by Filter: 117498
                                                               ->  Index Scan using company_id_movie_companies on movie_companies mc  (cost=0.43..347.02 rows=1 width=12) (actual time=0.052..7.592 rows=278 loops=1)
                                                                     Index Cond: (company_id = cn.id)
                                                                     Filter: (((note)::text ~~ '%(200%)%'::text) AND ((note)::text ~~ '%(worldwide)%'::text))
                                                                     Rows Removed by Filter: 1180
                                                         ->  Index Only Scan using movie_id_aka_title on aka_title at  (cost=0.42..1.93 rows=3 width=4) (actual time=0.005..0.005 rows=0 loops=278)
                                                               Index Cond: (movie_id = mc.movie_id)
                                                               Heap Fetches: 27
                                                   ->  Index Only Scan using company_type_pkey on company_type ct  (cost=0.13..0.15 rows=1 width=4) (actual time=0.002..0.002 rows=1 loops=27)
                                                         Index Cond: (id = mc.company_type_id)
                                                         Heap Fetches: 27
                                             ->  Index Scan using title_pkey on title t  (cost=0.43..0.93 rows=1 width=21) (actual time=0.016..0.016 rows=1 loops=27)
                                                   Index Cond: (id = at.movie_id)
                                                   Filter: ((production_year >= 2005) AND (production_year <= 2010))
                                                   Rows Removed by Filter: 0
                                       ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..2.53 rows=1 width=50) (actual time=0.065..0.069 rows=0 loops=26)
                                             Index Cond: (movie_id = t.id)
                                             Filter: (((note)::text ~~ '%internet%'::text) AND ((info)::text ~~ 'USA:% 200%'::text))
                                             Rows Removed by Filter: 19
                                 ->  Index Scan using info_type_pkey on info_type it1  (cost=0.14..0.21 rows=1 width=4) (actual time=0.003..0.003 rows=1 loops=3)
                                       Index Cond: (id = mi.info_type_id)
                                       Filter: ((info)::text = 'release dates'::text)
                           ->  Index Scan using movie_id_movie_keyword on movie_keyword mk  (cost=0.43..1.46 rows=47 width=8) (actual time=0.020..0.023 rows=12 loops=3)
                                 Index Cond: (movie_id = t.id)
                     ->  Index Only Scan using keyword_pkey on keyword k  (cost=0.42..0.44 rows=1 width=4) (actual time=0.008..0.008 rows=1 loops=37)
                           Index Cond: (id = mk.keyword_id)
                           Heap Fetches: 37
 Planning Time: 14.988 ms
 Execution Time: 32.104 ms
(44 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/15c.sql_explained.sql
SET
                                                                                                          QUERY PLAN                                                                                                          
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=271194.30..271194.31 rows=1 width=64) (actual time=591.198..591.198 rows=1 loops=1)
   ->  Gather  (cost=271194.08..271194.29 rows=2 width=64) (actual time=591.078..594.042 rows=3 loops=1)
         Workers Planned: 2
         Workers Launched: 2
         ->  Partial Aggregate  (cost=270194.08..270194.09 rows=1 width=64) (actual time=588.470..588.470 rows=1 loops=3)
               ->  Nested Loop  (cost=5.11..270193.85 rows=46 width=59) (actual time=148.994..588.330 rows=757 loops=3)
                     Join Filter: (t.id = at.movie_id)
                     ->  Nested Loop  (cost=4.69..270184.51 rows=18 width=75) (actual time=144.919..583.609 rows=2655 loops=3)
                           ->  Nested Loop  (cost=4.27..270176.61 rows=18 width=79) (actual time=144.895..575.550 rows=2655 loops=3)
                                 ->  Nested Loop  (cost=3.84..270174.80 rows=1 width=71) (actual time=144.768..569.113 rows=882 loops=3)
                                       ->  Nested Loop  (cost=3.71..270174.65 rows=1 width=75) (actual time=144.740..567.809 rows=882 loops=3)
                                             ->  Nested Loop  (cost=3.29..270172.87 rows=4 width=79) (actual time=144.520..562.141 rows=961 loops=3)
                                                   ->  Nested Loop  (cost=2.86..270172.24 rows=1 width=67) (actual time=144.489..553.082 rows=594 loops=3)
                                                         ->  Hash Join  (cost=2.43..270163.87 rows=1 width=46) (actual time=144.444..544.676 rows=594 loops=3)
                                                               Hash Cond: (mi.info_type_id = it1.id)
                                                               ->  Parallel Seq Scan on movie_info mi  (cost=0.00..270161.12 rows=119 width=50) (actual time=144.326..544.406 rows=594 loops=3)
                                                                     Filter: ((info IS NOT NULL) AND ((note)::text ~~ '%internet%'::text) AND (((info)::text ~~ 'USA:% 199%'::text) OR ((info)::text ~~ 'USA:% 200%'::text)))
                                                                     Rows Removed by Filter: 4944646
                                                               ->  Hash  (cost=2.41..2.41 rows=1 width=4) (actual time=0.027..0.027 rows=1 loops=3)
                                                                     Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                                     ->  Seq Scan on info_type it1  (cost=0.00..2.41 rows=1 width=4) (actual time=0.014..0.021 rows=1 loops=3)
                                                                           Filter: ((info)::text = 'release dates'::text)
                                                                           Rows Removed by Filter: 112
                                                         ->  Index Scan using title_pkey on title t  (cost=0.43..8.37 rows=1 width=21) (actual time=0.014..0.014 rows=1 loops=1783)
                                                               Index Cond: (id = mi.movie_id)
                                                               Filter: (production_year > 1990)
                                                               Rows Removed by Filter: 0
                                                   ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..0.58 rows=5 width=12) (actual time=0.012..0.015 rows=2 loops=1782)
                                                         Index Cond: (movie_id = t.id)
                                             ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..0.45 rows=1 width=4) (actual time=0.005..0.005 rows=1 loops=2884)
                                                   Index Cond: (id = mc.company_id)
                                                   Filter: ((country_code)::text = '[us]'::text)
                                                   Rows Removed by Filter: 0
                                       ->  Index Only Scan using company_type_pkey on company_type ct  (cost=0.13..0.15 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=2647)
                                             Index Cond: (id = mc.company_type_id)
                                             Heap Fetches: 2647
                                 ->  Index Scan using movie_id_movie_keyword on movie_keyword mk  (cost=0.43..1.34 rows=47 width=8) (actual time=0.006..0.007 rows=3 loops=2647)
                                       Index Cond: (movie_id = t.id)
                           ->  Index Only Scan using keyword_pkey on keyword k  (cost=0.42..0.44 rows=1 width=4) (actual time=0.003..0.003 rows=1 loops=7964)
                                 Index Cond: (id = mk.keyword_id)
                                 Heap Fetches: 7964
                     ->  Index Only Scan using movie_id_aka_title on aka_title at  (cost=0.42..0.48 rows=3 width=4) (actual time=0.001..0.002 rows=0 loops=7964)
                           Index Cond: (movie_id = mk.movie_id)
                           Heap Fetches: 2271
 Planning Time: 14.944 ms
 Execution Time: 594.288 ms
(46 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/15d.sql_explained.sql
SET
                                                                                               QUERY PLAN                                                                                               
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=241312.72..241312.73 rows=1 width=64) (actual time=666.459..666.459 rows=1 loops=1)
   ->  Gather  (cost=241312.50..241312.71 rows=2 width=64) (actual time=666.338..669.417 rows=3 loops=1)
         Workers Planned: 2
         Workers Launched: 2
         ->  Partial Aggregate  (cost=240312.50..240312.51 rows=1 width=64) (actual time=663.667..663.667 rows=1 loops=3)
               ->  Nested Loop  (cost=6.07..240304.29 rows=1642 width=38) (actual time=140.058..663.062 rows=3782 loops=3)
                     Join Filter: (t.id = at.movie_id)
                     ->  Nested Loop  (cost=5.65..239970.15 rows=644 width=33) (actual time=135.503..648.817 rows=8521 loops=3)
                           ->  Nested Loop  (cost=5.23..239687.65 rows=644 width=37) (actual time=135.465..628.575 rows=8521 loops=3)
                                 ->  Hash Join  (cost=4.80..239595.35 rows=51 width=29) (actual time=135.272..610.484 rows=3286 loops=3)
                                       Hash Cond: (mc.company_type_id = ct.id)
                                       ->  Nested Loop  (cost=3.71..239593.98 rows=51 width=33) (actual time=135.196..609.634 rows=3286 loops=3)
                                             ->  Nested Loop  (cost=3.29..239532.04 rows=139 width=37) (actual time=135.171..589.341 rows=4792 loops=3)
                                                   ->  Nested Loop  (cost=2.86..239514.48 rows=28 width=25) (actual time=135.070..555.076 rows=3554 loops=3)
                                                         ->  Hash Join  (cost=2.43..239268.23 rows=40 width=4) (actual time=135.026..520.146 rows=3560 loops=3)
                                                               Hash Cond: (mi.info_type_id = it1.id)
                                                               ->  Parallel Seq Scan on movie_info mi  (cost=0.00..239253.38 rows=4567 width=8) (actual time=19.626..519.258 rows=3603 loops=3)
                                                                     Filter: ((note)::text ~~ '%internet%'::text)
                                                                     Rows Removed by Filter: 4941637
                                                               ->  Hash  (cost=2.41..2.41 rows=1 width=4) (actual time=0.024..0.024 rows=1 loops=3)
                                                                     Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                                     ->  Seq Scan on info_type it1  (cost=0.00..2.41 rows=1 width=4) (actual time=0.014..0.020 rows=1 loops=3)
                                                                           Filter: ((info)::text = 'release dates'::text)
                                                                           Rows Removed by Filter: 112
                                                         ->  Index Scan using title_pkey on title t  (cost=0.43..6.16 rows=1 width=21) (actual time=0.009..0.009 rows=1 loops=10679)
                                                               Index Cond: (id = mi.movie_id)
                                                               Filter: (production_year > 1990)
                                                               Rows Removed by Filter: 0
                                                   ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..0.58 rows=5 width=12) (actual time=0.008..0.009 rows=1 loops=10662)
                                                         Index Cond: (movie_id = t.id)
                                             ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..0.45 rows=1 width=4) (actual time=0.004..0.004 rows=1 loops=14377)
                                                   Index Cond: (id = mc.company_id)
                                                   Filter: ((country_code)::text = '[us]'::text)
                                                   Rows Removed by Filter: 0
                                       ->  Hash  (cost=1.04..1.04 rows=4 width=4) (actual time=0.020..0.020 rows=4 loops=3)
                                             Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                             ->  Seq Scan on company_type ct  (cost=0.00..1.04 rows=4 width=4) (actual time=0.014..0.015 rows=4 loops=3)
                                 ->  Index Scan using movie_id_movie_keyword on movie_keyword mk  (cost=0.43..1.34 rows=47 width=8) (actual time=0.005..0.005 rows=3 loops=9857)
                                       Index Cond: (movie_id = t.id)
                           ->  Index Only Scan using keyword_pkey on keyword k  (cost=0.42..0.44 rows=1 width=4) (actual time=0.002..0.002 rows=1 loops=25564)
                                 Index Cond: (id = mk.keyword_id)
                                 Heap Fetches: 25564
                     ->  Index Scan using movie_id_aka_title on aka_title at  (cost=0.42..0.48 rows=3 width=25) (actual time=0.001..0.001 rows=0 loops=25564)
                           Index Cond: (movie_id = mk.movie_id)
 Planning Time: 15.032 ms
 Execution Time: 669.671 ms
(46 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/16a.sql_explained.sql
SET
                                                                                      QUERY PLAN                                                                                       
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=3786.91..3786.92 rows=1 width=64) (actual time=262.309..262.309 rows=1 loops=1)
   ->  Nested Loop  (cost=9.45..3786.52 rows=79 width=33) (actual time=16.643..262.229 rows=385 loops=1)
         Join Filter: (n.id = an.person_id)
         ->  Nested Loop  (cost=9.02..3770.95 rows=32 width=25) (actual time=16.614..260.155 rows=323 loops=1)
               ->  Nested Loop  (cost=8.59..3756.39 rows=32 width=21) (actual time=16.582..257.719 rows=323 loops=1)
                     Join Filter: (t.id = ci.movie_id)
                     ->  Nested Loop  (cost=8.03..3752.42 rows=2 width=29) (actual time=16.558..256.462 rows=25 loops=1)
                           ->  Nested Loop  (cost=7.61..3750.19 rows=5 width=33) (actual time=16.353..256.138 rows=54 loops=1)
                                 Join Filter: (t.id = mc.movie_id)
                                 ->  Nested Loop  (cost=7.18..3749.59 rows=1 width=25) (actual time=13.678..255.500 rows=146 loops=1)
                                       ->  Nested Loop  (cost=6.75..3732.91 rows=34 width=4) (actual time=6.716..74.566 rows=41840 loops=1)
                                             ->  Seq Scan on keyword k  (cost=0.00..2626.12 rows=1 width=4) (actual time=0.635..11.676 rows=1 loops=1)
                                                   Filter: ((keyword)::text = 'character-name-in-title'::text)
                                                   Rows Removed by Filter: 134169
                                             ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1103.80 rows=299 width=8) (actual time=6.078..58.727 rows=41840 loops=1)
                                                   Recheck Cond: (keyword_id = k.id)
                                                   Heap Blocks: exact=11541
                                                   ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=4.019..4.019 rows=41840 loops=1)
                                                         Index Cond: (keyword_id = k.id)
                                       ->  Index Scan using title_pkey on title t  (cost=0.43..0.49 rows=1 width=21) (actual time=0.004..0.004 rows=0 loops=41840)
                                             Index Cond: (id = mk.movie_id)
                                             Filter: ((episode_nr >= 50) AND (episode_nr < 100))
                                             Rows Removed by Filter: 1
                                 ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..0.54 rows=5 width=8) (actual time=0.004..0.004 rows=0 loops=146)
                                       Index Cond: (movie_id = mk.movie_id)
                           ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..0.45 rows=1 width=4) (actual time=0.005..0.006 rows=0 loops=54)
                                 Index Cond: (id = mc.company_id)
                                 Filter: ((country_code)::text = '[us]'::text)
                                 Rows Removed by Filter: 1
                     ->  Index Scan using movie_id_cast_info on cast_info ci  (cost=0.56..1.52 rows=37 width=8) (actual time=0.012..0.047 rows=13 loops=25)
                           Index Cond: (movie_id = mk.movie_id)
               ->  Index Only Scan using name_pkey on name n  (cost=0.43..0.45 rows=1 width=4) (actual time=0.007..0.007 rows=1 loops=323)
                     Index Cond: (id = ci.person_id)
                     Heap Fetches: 323
         ->  Index Scan using person_id_aka_name on aka_name an  (cost=0.42..0.46 rows=2 width=20) (actual time=0.005..0.006 rows=1 loops=323)
               Index Cond: (person_id = ci.person_id)
 Planning Time: 8.300 ms
 Execution Time: 262.539 ms
(38 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/16b.sql_explained.sql
SET
                                                                                      QUERY PLAN                                                                                       
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=5116.99..5117.00 rows=1 width=64) (actual time=20921.880..20921.881 rows=1 loops=1)
   ->  Nested Loop  (cost=9.45..5102.20 rows=2957 width=33) (actual time=7.195..20370.003 rows=3710592 loops=1)
         Join Filter: (n.id = an.person_id)
         ->  Nested Loop  (cost=9.02..4515.45 rows=1206 width=25) (actual time=7.165..12934.103 rows=2832555 loops=1)
               ->  Nested Loop  (cost=8.59..3966.84 rows=1206 width=21) (actual time=7.133..4562.684 rows=2832555 loops=1)
                     Join Filter: (t.id = ci.movie_id)
                     ->  Nested Loop  (cost=8.03..3845.67 rows=61 width=29) (actual time=6.759..1104.067 rows=68316 loops=1)
                           ->  Nested Loop  (cost=7.61..3769.92 rows=170 width=33) (actual time=6.704..515.876 rows=148552 loops=1)
                                 Join Filter: (t.id = mc.movie_id)
                                 ->  Nested Loop  (cost=7.18..3749.42 rows=34 width=25) (actual time=6.652..299.414 rows=41840 loops=1)
                                       ->  Nested Loop  (cost=6.75..3732.91 rows=34 width=4) (actual time=6.631..83.002 rows=41840 loops=1)
                                             ->  Seq Scan on keyword k  (cost=0.00..2626.12 rows=1 width=4) (actual time=0.643..11.748 rows=1 loops=1)
                                                   Filter: ((keyword)::text = 'character-name-in-title'::text)
                                                   Rows Removed by Filter: 134169
                                             ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1103.80 rows=299 width=8) (actual time=5.985..64.119 rows=41840 loops=1)
                                                   Recheck Cond: (keyword_id = k.id)
                                                   Heap Blocks: exact=11541
                                                   ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=3.914..3.914 rows=41840 loops=1)
                                                         Index Cond: (keyword_id = k.id)
                                       ->  Index Scan using title_pkey on title t  (cost=0.43..0.49 rows=1 width=21) (actual time=0.005..0.005 rows=1 loops=41840)
                                             Index Cond: (id = mk.movie_id)
                                 ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..0.54 rows=5 width=8) (actual time=0.003..0.004 rows=4 loops=41840)
                                       Index Cond: (movie_id = mk.movie_id)
                           ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..0.45 rows=1 width=4) (actual time=0.004..0.004 rows=0 loops=148552)
                                 Index Cond: (id = mc.company_id)
                                 Filter: ((country_code)::text = '[us]'::text)
                                 Rows Removed by Filter: 1
                     ->  Index Scan using movie_id_cast_info on cast_info ci  (cost=0.56..1.52 rows=37 width=8) (actual time=0.004..0.044 rows=41 loops=68316)
                           Index Cond: (movie_id = mk.movie_id)
               ->  Index Only Scan using name_pkey on name n  (cost=0.43..0.45 rows=1 width=4) (actual time=0.003..0.003 rows=1 loops=2832555)
                     Index Cond: (id = ci.person_id)
                     Heap Fetches: 2832555
         ->  Index Scan using person_id_aka_name on aka_name an  (cost=0.42..0.46 rows=2 width=20) (actual time=0.002..0.002 rows=1 loops=2832555)
               Index Cond: (person_id = ci.person_id)
 Planning Time: 8.152 ms
 Execution Time: 20922.158 ms
(36 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/16c.sql_explained.sql
SET
                                                                                      QUERY PLAN                                                                                       
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=4258.35..4258.36 rows=1 width=64) (actual time=1789.508..1789.508 rows=1 loops=1)
   ->  Nested Loop  (cost=9.45..4252.86 rows=1097 width=33) (actual time=7.202..1741.162 rows=319932 loops=1)
         Join Filter: (n.id = an.person_id)
         ->  Nested Loop  (cost=9.02..4034.90 rows=448 width=25) (actual time=7.177..1157.443 rows=221609 loops=1)
               ->  Nested Loop  (cost=8.59..3831.10 rows=448 width=21) (actual time=7.142..544.455 rows=221609 loops=1)
                     Join Filter: (t.id = ci.movie_id)
                     ->  Nested Loop  (cost=8.03..3785.41 rows=23 width=29) (actual time=7.113..270.799 rows=8538 loops=1)
                           ->  Nested Loop  (cost=7.61..3757.34 rows=63 width=33) (actual time=6.755..242.394 rows=11406 loops=1)
                                 Join Filter: (t.id = mc.movie_id)
                                 ->  Nested Loop  (cost=7.18..3749.50 rows=13 width=25) (actual time=6.677..217.771 rows=6926 loops=1)
                                       ->  Nested Loop  (cost=6.75..3732.91 rows=34 width=4) (actual time=6.662..67.634 rows=41840 loops=1)
                                             ->  Seq Scan on keyword k  (cost=0.00..2626.12 rows=1 width=4) (actual time=0.647..11.666 rows=1 loops=1)
                                                   Filter: ((keyword)::text = 'character-name-in-title'::text)
                                                   Rows Removed by Filter: 134169
                                             ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1103.80 rows=299 width=8) (actual time=6.010..51.309 rows=41840 loops=1)
                                                   Recheck Cond: (keyword_id = k.id)
                                                   Heap Blocks: exact=11541
                                                   ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=3.949..3.949 rows=41840 loops=1)
                                                         Index Cond: (keyword_id = k.id)
                                       ->  Index Scan using title_pkey on title t  (cost=0.43..0.49 rows=1 width=21) (actual time=0.003..0.003 rows=0 loops=41840)
                                             Index Cond: (id = mk.movie_id)
                                             Filter: (episode_nr < 100)
                                             Rows Removed by Filter: 1
                                 ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..0.54 rows=5 width=8) (actual time=0.002..0.003 rows=2 loops=6926)
                                       Index Cond: (movie_id = mk.movie_id)
                           ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..0.45 rows=1 width=4) (actual time=0.002..0.002 rows=1 loops=11406)
                                 Index Cond: (id = mc.company_id)
                                 Filter: ((country_code)::text = '[us]'::text)
                                 Rows Removed by Filter: 0
                     ->  Index Scan using movie_id_cast_info on cast_info ci  (cost=0.56..1.52 rows=37 width=8) (actual time=0.004..0.028 rows=26 loops=8538)
                           Index Cond: (movie_id = mk.movie_id)
               ->  Index Only Scan using name_pkey on name n  (cost=0.43..0.45 rows=1 width=4) (actual time=0.002..0.002 rows=1 loops=221609)
                     Index Cond: (id = ci.person_id)
                     Heap Fetches: 221609
         ->  Index Scan using person_id_aka_name on aka_name an  (cost=0.42..0.46 rows=2 width=20) (actual time=0.002..0.002 rows=1 loops=221609)
               Index Cond: (person_id = ci.person_id)
 Planning Time: 8.187 ms
 Execution Time: 1789.741 ms
(38 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/16d.sql_explained.sql
SET
                                                                                      QUERY PLAN                                                                                       
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=4117.25..4117.26 rows=1 width=64) (actual time=1449.437..1449.437 rows=1 loops=1)
   ->  Nested Loop  (cost=9.45..4113.26 rows=798 width=33) (actual time=7.239..1411.742 rows=249455 loops=1)
         Join Filter: (n.id = an.person_id)
         ->  Nested Loop  (cost=9.02..3955.14 rows=325 width=25) (actual time=7.214..954.723 rows=169273 loops=1)
               ->  Nested Loop  (cost=8.59..3807.29 rows=325 width=21) (actual time=7.182..477.150 rows=169273 loops=1)
                     Join Filter: (t.id = ci.movie_id)
                     ->  Nested Loop  (cost=8.03..3775.51 rows=16 width=29) (actual time=7.155..261.440 rows=6766 loops=1)
                           ->  Nested Loop  (cost=7.61..3755.01 rows=46 width=33) (actual time=6.822..239.221 rows=8661 loops=1)
                                 Join Filter: (t.id = mc.movie_id)
                                 ->  Nested Loop  (cost=7.18..3749.59 rows=9 width=25) (actual time=6.741..219.287 rows=5385 loops=1)
                                       ->  Nested Loop  (cost=6.75..3732.91 rows=34 width=4) (actual time=6.721..67.858 rows=41840 loops=1)
                                             ->  Seq Scan on keyword k  (cost=0.00..2626.12 rows=1 width=4) (actual time=0.649..11.693 rows=1 loops=1)
                                                   Filter: ((keyword)::text = 'character-name-in-title'::text)
                                                   Rows Removed by Filter: 134169
                                             ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1103.80 rows=299 width=8) (actual time=6.070..51.742 rows=41840 loops=1)
                                                   Recheck Cond: (keyword_id = k.id)
                                                   Heap Blocks: exact=11541
                                                   ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=4.000..4.000 rows=41840 loops=1)
                                                         Index Cond: (keyword_id = k.id)
                                       ->  Index Scan using title_pkey on title t  (cost=0.43..0.49 rows=1 width=21) (actual time=0.003..0.003 rows=0 loops=41840)
                                             Index Cond: (id = mk.movie_id)
                                             Filter: ((episode_nr >= 5) AND (episode_nr < 100))
                                             Rows Removed by Filter: 1
                                 ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..0.54 rows=5 width=8) (actual time=0.002..0.003 rows=2 loops=5385)
                                       Index Cond: (movie_id = mk.movie_id)
                           ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..0.45 rows=1 width=4) (actual time=0.002..0.002 rows=1 loops=8661)
                                 Index Cond: (id = mc.company_id)
                                 Filter: ((country_code)::text = '[us]'::text)
                                 Rows Removed by Filter: 0
                     ->  Index Scan using movie_id_cast_info on cast_info ci  (cost=0.56..1.52 rows=37 width=8) (actual time=0.004..0.028 rows=25 loops=6766)
                           Index Cond: (movie_id = mk.movie_id)
               ->  Index Only Scan using name_pkey on name n  (cost=0.43..0.45 rows=1 width=4) (actual time=0.003..0.003 rows=1 loops=169273)
                     Index Cond: (id = ci.person_id)
                     Heap Fetches: 169273
         ->  Index Scan using person_id_aka_name on aka_name an  (cost=0.42..0.46 rows=2 width=20) (actual time=0.002..0.002 rows=1 loops=169273)
               Index Cond: (person_id = ci.person_id)
 Planning Time: 8.298 ms
 Execution Time: 1449.669 ms
(38 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/17a.sql_explained.sql
SET
                                                                                   QUERY PLAN                                                                                    
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=4518.95..4518.96 rows=1 width=64) (actual time=12378.510..12378.510 rows=1 loops=1)
   ->  Nested Loop  (cost=9.02..4518.46 rows=97 width=15) (actual time=7.196..12344.486 rows=258289 loops=1)
         ->  Nested Loop  (cost=8.59..3966.84 rows=1206 width=4) (actual time=7.136..4334.123 rows=2832555 loops=1)
               Join Filter: (t.id = ci.movie_id)
               ->  Nested Loop  (cost=8.03..3845.67 rows=61 width=12) (actual time=6.760..1030.522 rows=68316 loops=1)
                     ->  Nested Loop  (cost=7.61..3769.92 rows=170 width=16) (actual time=6.703..488.430 rows=148552 loops=1)
                           Join Filter: (t.id = mc.movie_id)
                           ->  Nested Loop  (cost=7.18..3749.42 rows=34 width=8) (actual time=6.650..283.153 rows=41840 loops=1)
                                 ->  Nested Loop  (cost=6.75..3732.91 rows=34 width=4) (actual time=6.632..79.639 rows=41840 loops=1)
                                       ->  Seq Scan on keyword k  (cost=0.00..2626.12 rows=1 width=4) (actual time=0.641..11.615 rows=1 loops=1)
                                             Filter: ((keyword)::text = 'character-name-in-title'::text)
                                             Rows Removed by Filter: 134169
                                       ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1103.80 rows=299 width=8) (actual time=5.988..60.813 rows=41840 loops=1)
                                             Recheck Cond: (keyword_id = k.id)
                                             Heap Blocks: exact=11541
                                             ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=3.918..3.918 rows=41840 loops=1)
                                                   Index Cond: (keyword_id = k.id)
                                 ->  Index Only Scan using title_pkey on title t  (cost=0.43..0.49 rows=1 width=4) (actual time=0.004..0.004 rows=1 loops=41840)
                                       Index Cond: (id = mk.movie_id)
                                       Heap Fetches: 41840
                           ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..0.54 rows=5 width=8) (actual time=0.003..0.004 rows=4 loops=41840)
                                 Index Cond: (movie_id = mk.movie_id)
                     ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..0.45 rows=1 width=4) (actual time=0.003..0.003 rows=0 loops=148552)
                           Index Cond: (id = mc.company_id)
                           Filter: ((country_code)::text = '[us]'::text)
                           Rows Removed by Filter: 1
               ->  Index Scan using movie_id_cast_info on cast_info ci  (cost=0.56..1.52 rows=37 width=8) (actual time=0.004..0.042 rows=41 loops=68316)
                     Index Cond: (movie_id = mk.movie_id)
         ->  Index Scan using name_pkey on name n  (cost=0.43..0.46 rows=1 width=19) (actual time=0.003..0.003 rows=0 loops=2832555)
               Index Cond: (id = ci.person_id)
               Filter: ((name)::text ~~ 'B%'::text)
               Rows Removed by Filter: 1
 Planning Time: 5.166 ms
 Execution Time: 12378.738 ms
(34 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/17b.sql_explained.sql
SET
                                                                                   QUERY PLAN                                                                                    
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=4395.31..4395.32 rows=1 width=64) (actual time=8684.252..8684.252 rows=1 loops=1)
   ->  Nested Loop  (cost=9.02..4395.14 rows=33 width=15) (actual time=12.950..8677.202 rows=52306 loops=1)
         ->  Nested Loop  (cost=8.60..4380.52 rows=33 width=19) (actual time=12.935..8495.537 rows=52306 loops=1)
               ->  Nested Loop  (cost=8.17..4373.10 rows=13 width=27) (actual time=12.916..8438.876 rows=6642 loops=1)
                     ->  Nested Loop  (cost=7.74..4367.22 rows=13 width=23) (actual time=12.891..8399.540 rows=6642 loops=1)
                           ->  Nested Loop  (cost=7.31..3797.31 rows=1246 width=12) (actual time=6.771..2949.612 rows=1038393 loops=1)
                                 ->  Nested Loop  (cost=6.75..3732.91 rows=34 width=4) (actual time=6.746..77.860 rows=41840 loops=1)
                                       ->  Seq Scan on keyword k  (cost=0.00..2626.12 rows=1 width=4) (actual time=0.656..11.581 rows=1 loops=1)
                                             Filter: ((keyword)::text = 'character-name-in-title'::text)
                                             Rows Removed by Filter: 134169
                                       ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1103.80 rows=299 width=8) (actual time=6.086..58.830 rows=41840 loops=1)
                                             Recheck Cond: (keyword_id = k.id)
                                             Heap Blocks: exact=11541
                                             ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=4.033..4.033 rows=41840 loops=1)
                                                   Index Cond: (keyword_id = k.id)
                                 ->  Index Scan using movie_id_cast_info on cast_info ci  (cost=0.56..1.52 rows=37 width=8) (actual time=0.006..0.065 rows=25 loops=41840)
                                       Index Cond: (movie_id = mk.movie_id)
                           ->  Index Scan using name_pkey on name n  (cost=0.43..0.46 rows=1 width=19) (actual time=0.005..0.005 rows=0 loops=1038393)
                                 Index Cond: (id = ci.person_id)
                                 Filter: ((name)::text ~~ 'Z%'::text)
                                 Rows Removed by Filter: 1
                     ->  Index Only Scan using title_pkey on title t  (cost=0.43..0.45 rows=1 width=4) (actual time=0.005..0.005 rows=1 loops=6642)
                           Index Cond: (id = ci.movie_id)
                           Heap Fetches: 6642
               ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..0.52 rows=5 width=8) (actual time=0.005..0.007 rows=8 loops=6642)
                     Index Cond: (movie_id = ci.movie_id)
         ->  Index Only Scan using company_name_pkey on company_name cn  (cost=0.42..0.44 rows=1 width=4) (actual time=0.003..0.003 rows=1 loops=52306)
               Index Cond: (id = mc.company_id)
               Heap Fetches: 52306
 Planning Time: 5.106 ms
 Execution Time: 8684.468 ms
(31 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/17c.sql_explained.sql
SET
                                                                                   QUERY PLAN                                                                                    
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=4368.70..4368.71 rows=1 width=64) (actual time=8336.635..8336.635 rows=1 loops=1)
   ->  Nested Loop  (cost=9.02..4368.69 rows=1 width=15) (actual time=89.217..8336.219 rows=1918 loops=1)
         ->  Nested Loop  (cost=8.59..4368.24 rows=1 width=27) (actual time=89.195..8331.132 rows=1918 loops=1)
               ->  Nested Loop  (cost=8.17..4367.80 rows=1 width=31) (actual time=89.178..8320.630 rows=1918 loops=1)
                     ->  Nested Loop  (cost=7.74..4367.23 rows=1 width=23) (actual time=89.162..8317.122 rows=250 loops=1)
                           ->  Nested Loop  (cost=7.31..3797.31 rows=1246 width=12) (actual time=6.656..2920.826 rows=1038393 loops=1)
                                 ->  Nested Loop  (cost=6.75..3732.91 rows=34 width=4) (actual time=6.631..76.671 rows=41840 loops=1)
                                       ->  Seq Scan on keyword k  (cost=0.00..2626.12 rows=1 width=4) (actual time=0.654..11.636 rows=1 loops=1)
                                             Filter: ((keyword)::text = 'character-name-in-title'::text)
                                             Rows Removed by Filter: 134169
                                       ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1103.80 rows=299 width=8) (actual time=5.975..57.743 rows=41840 loops=1)
                                             Recheck Cond: (keyword_id = k.id)
                                             Heap Blocks: exact=11541
                                             ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=3.908..3.908 rows=41840 loops=1)
                                                   Index Cond: (keyword_id = k.id)
                                 ->  Index Scan using movie_id_cast_info on cast_info ci  (cost=0.56..1.52 rows=37 width=8) (actual time=0.006..0.064 rows=25 loops=41840)
                                       Index Cond: (movie_id = mk.movie_id)
                           ->  Index Scan using name_pkey on name n  (cost=0.43..0.46 rows=1 width=19) (actual time=0.005..0.005 rows=0 loops=1038393)
                                 Index Cond: (id = ci.person_id)
                                 Filter: ((name)::text ~~ 'X%'::text)
                                 Rows Removed by Filter: 1
                     ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..0.52 rows=5 width=8) (actual time=0.008..0.012 rows=8 loops=250)
                           Index Cond: (movie_id = ci.movie_id)
               ->  Index Only Scan using company_name_pkey on company_name cn  (cost=0.42..0.44 rows=1 width=4) (actual time=0.005..0.005 rows=1 loops=1918)
                     Index Cond: (id = mc.company_id)
                     Heap Fetches: 1918
         ->  Index Only Scan using title_pkey on title t  (cost=0.43..0.45 rows=1 width=4) (actual time=0.002..0.002 rows=1 loops=1918)
               Index Cond: (id = ci.movie_id)
               Heap Fetches: 1918
 Planning Time: 5.126 ms
 Execution Time: 8336.897 ms
(31 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/17d.sql_explained.sql
SET
                                                                                   QUERY PLAN                                                                                    
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=4368.69..4368.70 rows=1 width=32) (actual time=8510.668..8510.669 rows=1 loops=1)
   ->  Nested Loop  (cost=9.02..4368.69 rows=1 width=15) (actual time=55.925..8508.676 rows=11538 loops=1)
         ->  Nested Loop  (cost=8.59..4368.24 rows=1 width=27) (actual time=55.898..8478.735 rows=11538 loops=1)
               ->  Nested Loop  (cost=8.17..4367.80 rows=1 width=31) (actual time=55.877..8423.796 rows=11538 loops=1)
                     ->  Nested Loop  (cost=7.74..4367.23 rows=1 width=23) (actual time=55.858..8404.206 rows=1972 loops=1)
                           ->  Nested Loop  (cost=7.31..3797.31 rows=1246 width=12) (actual time=6.652..2931.270 rows=1038393 loops=1)
                                 ->  Nested Loop  (cost=6.75..3732.91 rows=34 width=4) (actual time=6.628..77.808 rows=41840 loops=1)
                                       ->  Seq Scan on keyword k  (cost=0.00..2626.12 rows=1 width=4) (actual time=0.641..11.577 rows=1 loops=1)
                                             Filter: ((keyword)::text = 'character-name-in-title'::text)
                                             Rows Removed by Filter: 134169
                                       ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1103.80 rows=299 width=8) (actual time=5.985..58.353 rows=41840 loops=1)
                                             Recheck Cond: (keyword_id = k.id)
                                             Heap Blocks: exact=11541
                                             ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=3.916..3.916 rows=41840 loops=1)
                                                   Index Cond: (keyword_id = k.id)
                                 ->  Index Scan using movie_id_cast_info on cast_info ci  (cost=0.56..1.52 rows=37 width=8) (actual time=0.006..0.065 rows=25 loops=41840)
                                       Index Cond: (movie_id = mk.movie_id)
                           ->  Index Scan using name_pkey on name n  (cost=0.43..0.46 rows=1 width=19) (actual time=0.005..0.005 rows=0 loops=1038393)
                                 Index Cond: (id = ci.person_id)
                                 Filter: ((name)::text ~~ '%Bert%'::text)
                                 Rows Removed by Filter: 1
                     ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..0.52 rows=5 width=8) (actual time=0.006..0.009 rows=6 loops=1972)
                           Index Cond: (movie_id = ci.movie_id)
               ->  Index Only Scan using company_name_pkey on company_name cn  (cost=0.42..0.44 rows=1 width=4) (actual time=0.004..0.004 rows=1 loops=11538)
                     Index Cond: (id = mc.company_id)
                     Heap Fetches: 11538
         ->  Index Only Scan using title_pkey on title t  (cost=0.43..0.45 rows=1 width=4) (actual time=0.002..0.002 rows=1 loops=11538)
               Index Cond: (id = ci.movie_id)
               Heap Fetches: 11538
 Planning Time: 5.128 ms
 Execution Time: 8510.893 ms
(31 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/17e.sql_explained.sql
SET
                                                                                   QUERY PLAN                                                                                    
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=4518.46..4518.47 rows=1 width=32) (actual time=12697.651..12697.652 rows=1 loops=1)
   ->  Nested Loop  (cost=9.02..4515.45 rows=1206 width=15) (actual time=7.081..12375.182 rows=2832555 loops=1)
         ->  Nested Loop  (cost=8.59..3966.84 rows=1206 width=4) (actual time=7.054..4357.245 rows=2832555 loops=1)
               Join Filter: (t.id = ci.movie_id)
               ->  Nested Loop  (cost=8.03..3845.67 rows=61 width=12) (actual time=6.678..1021.963 rows=68316 loops=1)
                     ->  Nested Loop  (cost=7.61..3769.92 rows=170 width=16) (actual time=6.612..485.682 rows=148552 loops=1)
                           Join Filter: (t.id = mc.movie_id)
                           ->  Nested Loop  (cost=7.18..3749.42 rows=34 width=8) (actual time=6.563..280.799 rows=41840 loops=1)
                                 ->  Nested Loop  (cost=6.75..3732.91 rows=34 width=4) (actual time=6.547..78.893 rows=41840 loops=1)
                                       ->  Seq Scan on keyword k  (cost=0.00..2626.12 rows=1 width=4) (actual time=0.645..11.676 rows=1 loops=1)
                                             Filter: ((keyword)::text = 'character-name-in-title'::text)
                                             Rows Removed by Filter: 134169
                                       ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1103.80 rows=299 width=8) (actual time=5.899..60.518 rows=41840 loops=1)
                                             Recheck Cond: (keyword_id = k.id)
                                             Heap Blocks: exact=11541
                                             ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=3.838..3.838 rows=41840 loops=1)
                                                   Index Cond: (keyword_id = k.id)
                                 ->  Index Only Scan using title_pkey on title t  (cost=0.43..0.49 rows=1 width=4) (actual time=0.004..0.004 rows=1 loops=41840)
                                       Index Cond: (id = mk.movie_id)
                                       Heap Fetches: 41840
                           ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..0.54 rows=5 width=8) (actual time=0.003..0.004 rows=4 loops=41840)
                                 Index Cond: (movie_id = mk.movie_id)
                     ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..0.45 rows=1 width=4) (actual time=0.003..0.003 rows=0 loops=148552)
                           Index Cond: (id = mc.company_id)
                           Filter: ((country_code)::text = '[us]'::text)
                           Rows Removed by Filter: 1
               ->  Index Scan using movie_id_cast_info on cast_info ci  (cost=0.56..1.52 rows=37 width=8) (actual time=0.004..0.042 rows=41 loops=68316)
                     Index Cond: (movie_id = mk.movie_id)
         ->  Index Scan using name_pkey on name n  (cost=0.43..0.45 rows=1 width=19) (actual time=0.003..0.003 rows=1 loops=2832555)
               Index Cond: (id = ci.person_id)
 Planning Time: 5.118 ms
 Execution Time: 12697.882 ms
(32 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/17f.sql_explained.sql
SET
                                                                                   QUERY PLAN                                                                                    
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=4629.56..4629.57 rows=1 width=32) (actual time=11555.399..11555.399 rows=1 loops=1)
   ->  Nested Loop  (cost=9.02..4628.64 rows=368 width=15) (actual time=8.454..11435.069 rows=1113120 loops=1)
         ->  Nested Loop  (cost=8.60..4465.59 rows=368 width=19) (actual time=8.435..9511.856 rows=1113120 loops=1)
               ->  Nested Loop  (cost=8.17..4386.88 rows=138 width=27) (actual time=6.855..8871.927 rows=149494 loops=1)
                     ->  Nested Loop  (cost=7.74..3816.96 rows=1246 width=16) (actual time=6.822..3260.133 rows=1038393 loops=1)
                           Join Filter: (t.id = ci.movie_id)
                           ->  Nested Loop  (cost=7.18..3749.42 rows=34 width=8) (actual time=6.797..283.787 rows=41840 loops=1)
                                 ->  Nested Loop  (cost=6.75..3732.91 rows=34 width=4) (actual time=6.776..80.208 rows=41840 loops=1)
                                       ->  Seq Scan on keyword k  (cost=0.00..2626.12 rows=1 width=4) (actual time=0.656..11.619 rows=1 loops=1)
                                             Filter: ((keyword)::text = 'character-name-in-title'::text)
                                             Rows Removed by Filter: 134169
                                       ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1103.80 rows=299 width=8) (actual time=6.118..60.762 rows=41840 loops=1)
                                             Recheck Cond: (keyword_id = k.id)
                                             Heap Blocks: exact=11541
                                             ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=4.064..4.064 rows=41840 loops=1)
                                                   Index Cond: (keyword_id = k.id)
                                 ->  Index Only Scan using title_pkey on title t  (cost=0.43..0.49 rows=1 width=4) (actual time=0.004..0.004 rows=1 loops=41840)
                                       Index Cond: (id = mk.movie_id)
                                       Heap Fetches: 41840
                           ->  Index Scan using movie_id_cast_info on cast_info ci  (cost=0.56..1.52 rows=37 width=8) (actual time=0.006..0.066 rows=25 loops=41840)
                                 Index Cond: (movie_id = mk.movie_id)
                     ->  Index Scan using name_pkey on name n  (cost=0.43..0.46 rows=1 width=19) (actual time=0.005..0.005 rows=0 loops=1038393)
                           Index Cond: (id = ci.person_id)
                           Filter: ((name)::text ~~ '%B%'::text)
                           Rows Removed by Filter: 1
               ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..0.52 rows=5 width=8) (actual time=0.002..0.003 rows=7 loops=149494)
                     Index Cond: (movie_id = ci.movie_id)
         ->  Index Only Scan using company_name_pkey on company_name cn  (cost=0.42..0.44 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=1113120)
               Index Cond: (id = mc.company_id)
               Heap Fetches: 1113120
 Planning Time: 5.168 ms
 Execution Time: 11555.620 ms
(32 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/18a.sql_explained.sql
SET
                                                                                       QUERY PLAN                                                                                       
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=111123.79..111123.80 rows=1 width=96) (actual time=4553.172..4553.173 rows=1 loops=1)
   ->  Nested Loop  (cost=1006.71..111123.78 rows=1 width=65) (actual time=213.248..4552.852 rows=410 loops=1)
         ->  Gather  (cost=1006.28..111123.32 rows=1 width=60) (actual time=213.217..4551.383 rows=410 loops=1)
               Workers Planned: 2
               Workers Launched: 2
               ->  Nested Loop  (cost=6.28..110123.22 rows=1 width=60) (actual time=127.553..4548.663 rows=137 loops=3)
                     ->  Nested Loop  (cost=5.85..108160.12 rows=3320 width=64) (actual time=0.384..4218.771 rows=35780 loops=3)
                           ->  Hash Join  (cost=5.29..74077.91 rows=1448 width=56) (actual time=0.319..1905.554 rows=15144 loops=3)
                                 Hash Cond: (mi.info_type_id = it1.id)
                                 ->  Nested Loop  (cost=2.86..73629.77 rows=163660 width=60) (actual time=0.091..1750.191 rows=2310111 loops=3)
                                       ->  Hash Join  (cost=2.43..15253.60 rows=5089 width=10) (actual time=0.048..114.377 rows=153308 loops=3)
                                             Hash Cond: (mi_idx.info_type_id = it2.id)
                                             ->  Parallel Seq Scan on movie_info_idx mi_idx  (cost=0.00..13685.15 rows=575015 width=14) (actual time=0.018..45.106 rows=460012 loops=3)
                                             ->  Hash  (cost=2.41..2.41 rows=1 width=4) (actual time=0.013..0.014 rows=1 loops=3)
                                                   Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                   ->  Seq Scan on info_type it2  (cost=0.00..2.41 rows=1 width=4) (actual time=0.009..0.010 rows=1 loops=3)
                                                         Filter: ((info)::text = 'votes'::text)
                                                         Rows Removed by Filter: 112
                                       ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..11.05 rows=42 width=50) (actual time=0.003..0.009 rows=15 loops=459925)
                                             Index Cond: (movie_id = mi_idx.movie_id)
                                 ->  Hash  (cost=2.41..2.41 rows=1 width=4) (actual time=0.022..0.022 rows=1 loops=3)
                                       Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                       ->  Seq Scan on info_type it1  (cost=0.00..2.41 rows=1 width=4) (actual time=0.017..0.018 rows=1 loops=3)
                                             Filter: ((info)::text = 'budget'::text)
                                             Rows Removed by Filter: 112
                           ->  Index Scan using movie_id_cast_info on cast_info ci  (cost=0.56..23.52 rows=2 width=8) (actual time=0.089..0.152 rows=2 loops=45431)
                                 Index Cond: (movie_id = mi.movie_id)
                                 Filter: ((note)::text = ANY ('{(producer),"(executive producer)"}'::text[]))
                                 Rows Removed by Filter: 38
                     ->  Index Scan using name_pkey on name n  (cost=0.43..0.59 rows=1 width=4) (actual time=0.009..0.009 rows=0 loops=107339)
                           Index Cond: (id = ci.person_id)
                           Filter: (((name)::text ~~ '%Tim%'::text) AND ((gender)::text = 'm'::text))
                           Rows Removed by Filter: 1
         ->  Index Scan using title_pkey on title t  (cost=0.43..0.46 rows=1 width=21) (actual time=0.010..0.010 rows=1 loops=410)
               Index Cond: (id = mi.movie_id)
 Planning Time: 4.855 ms
 Execution Time: 4556.192 ms
(37 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/18b.sql_explained.sql
SET
                                                                                      QUERY PLAN                                                                                      
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=17505.24..17505.25 rows=1 width=96) (actual time=187.781..187.781 rows=1 loops=1)
   ->  Nested Loop  (cost=1004.43..17505.23 rows=1 width=65) (actual time=100.492..187.760 rows=11 loops=1)
         ->  Nested Loop  (cost=1004.00..17504.55 rows=1 width=69) (actual time=33.727..184.956 rows=268 loops=1)
               ->  Gather  (cost=1003.43..17479.79 rows=1 width=77) (actual time=33.379..142.363 rows=358 loops=1)
                     Workers Planned: 2
                     Workers Launched: 2
                     ->  Nested Loop  (cost=3.43..16479.69 rows=1 width=77) (actual time=14.329..167.563 rows=119 loops=3)
                           ->  Nested Loop  (cost=3.29..16478.37 rows=8 width=81) (actual time=14.322..167.342 rows=119 loops=3)
                                 ->  Nested Loop  (cost=2.86..15808.49 rows=58 width=31) (actual time=0.767..104.886 rows=2051 loops=3)
                                       ->  Hash Join  (cost=2.43..15182.64 rows=187 width=10) (actual time=0.102..56.263 rows=5283 loops=3)
                                             Hash Cond: (mi_idx.info_type_id = it2.id)
                                             ->  Parallel Seq Scan on movie_info_idx mi_idx  (cost=0.00..15122.68 rows=21125 width=14) (actual time=0.023..54.180 rows=17543 loops=3)
                                                   Filter: ((info)::text > '8.0'::text)
                                                   Rows Removed by Filter: 442469
                                             ->  Hash  (cost=2.41..2.41 rows=1 width=4) (actual time=0.021..0.022 rows=1 loops=3)
                                                   Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                   ->  Seq Scan on info_type it2  (cost=0.00..2.41 rows=1 width=4) (actual time=0.015..0.017 rows=1 loops=3)
                                                         Filter: ((info)::text = 'rating'::text)
                                                         Rows Removed by Filter: 112
                                       ->  Index Scan using title_pkey on title t  (cost=0.43..3.35 rows=1 width=21) (actual time=0.009..0.009 rows=0 loops=15849)
                                             Index Cond: (id = mi_idx.movie_id)
                                             Filter: ((production_year >= 2008) AND (production_year <= 2014))
                                             Rows Removed by Filter: 1
                                 ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..11.54 rows=1 width=50) (actual time=0.030..0.030 rows=0 loops=6152)
                                       Index Cond: (movie_id = t.id)
                                       Filter: ((note IS NULL) AND ((info)::text = ANY ('{Horror,Thriller}'::text[])))
                                       Rows Removed by Filter: 18
                           ->  Index Scan using info_type_pkey on info_type it1  (cost=0.14..0.16 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=358)
                                 Index Cond: (id = mi.info_type_id)
                                 Filter: ((info)::text = 'genres'::text)
               ->  Index Scan using movie_id_cast_info on cast_info ci  (cost=0.56..24.75 rows=1 width=8) (actual time=0.108..0.140 rows=1 loops=358)
                     Index Cond: (movie_id = t.id)
                     Filter: ((note)::text = ANY ('{(writer),"(head writer)","(written by)",(story),"(story editor)"}'::text[]))
                     Rows Removed by Filter: 34
         ->  Index Scan using name_pkey on name n  (cost=0.43..0.68 rows=1 width=4) (actual time=0.010..0.010 rows=0 loops=268)
               Index Cond: (id = ci.person_id)
               Filter: ((gender IS NOT NULL) AND ((gender)::text = 'f'::text))
               Rows Removed by Filter: 1
 Planning Time: 4.792 ms
 Execution Time: 195.560 ms
(40 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/18c.sql_explained.sql
SET
                                                                                          QUERY PLAN                                                                                          
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=74638.17..74638.18 rows=1 width=96) (actual time=5819.883..5819.883 rows=1 loops=1)
   ->  Gather  (cost=74637.94..74638.15 rows=2 width=96) (actual time=5819.870..5822.521 rows=3 loops=1)
         Workers Planned: 2
         Workers Launched: 2
         ->  Partial Aggregate  (cost=73637.94..73637.95 rows=1 width=96) (actual time=5816.825..5816.825 rows=1 loops=3)
               ->  Nested Loop  (cost=6.71..73637.87 rows=10 width=65) (actual time=14.160..5812.771 rows=9358 loops=3)
                     ->  Nested Loop  (cost=6.28..73620.90 rows=25 width=69) (actual time=8.683..5666.535 rows=18052 loops=3)
                           ->  Nested Loop  (cost=5.72..73165.64 rows=19 width=77) (actual time=0.558..2013.069 rows=34172 loops=3)
                                 Join Filter: (mi.movie_id = t.id)
                                 ->  Hash Join  (cost=5.29..73154.54 rows=19 width=56) (actual time=0.521..1836.517 rows=34172 loops=3)
                                       Hash Cond: (mi.info_type_id = it1.id)
                                       ->  Nested Loop  (cost=2.86..73146.32 rows=2128 width=60) (actual time=0.450..1827.810 rows=34964 loops=3)
                                             ->  Hash Join  (cost=2.43..15253.60 rows=5089 width=10) (actual time=0.048..117.483 rows=153308 loops=3)
                                                   Hash Cond: (mi_idx.info_type_id = it2.id)
                                                   ->  Parallel Seq Scan on movie_info_idx mi_idx  (cost=0.00..13685.15 rows=575015 width=14) (actual time=0.016..45.573 rows=460012 loops=3)
                                                   ->  Hash  (cost=2.41..2.41 rows=1 width=4) (actual time=0.015..0.015 rows=1 loops=3)
                                                         Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                         ->  Seq Scan on info_type it2  (cost=0.00..2.41 rows=1 width=4) (actual time=0.010..0.012 rows=1 loops=3)
                                                               Filter: ((info)::text = 'votes'::text)
                                                               Rows Removed by Filter: 112
                                             ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..11.37 rows=1 width=50) (actual time=0.011..0.011 rows=0 loops=459925)
                                                   Index Cond: (movie_id = mi_idx.movie_id)
                                                   Filter: ((info)::text = ANY ('{Horror,Action,Sci-Fi,Thriller,Crime,War}'::text[]))
                                                   Rows Removed by Filter: 15
                                       ->  Hash  (cost=2.41..2.41 rows=1 width=4) (actual time=0.025..0.026 rows=1 loops=3)
                                             Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                             ->  Seq Scan on info_type it1  (cost=0.00..2.41 rows=1 width=4) (actual time=0.014..0.021 rows=1 loops=3)
                                                   Filter: ((info)::text = 'genres'::text)
                                                   Rows Removed by Filter: 112
                                 ->  Index Scan using title_pkey on title t  (cost=0.43..0.57 rows=1 width=21) (actual time=0.005..0.005 rows=1 loops=102516)
                                       Index Cond: (id = mi_idx.movie_id)
                           ->  Index Scan using movie_id_cast_info on cast_info ci  (cost=0.56..23.95 rows=1 width=8) (actual time=0.091..0.107 rows=1 loops=102516)
                                 Index Cond: (movie_id = t.id)
                                 Filter: ((note)::text = ANY ('{(writer),"(head writer)","(written by)",(story),"(story editor)"}'::text[]))
                                 Rows Removed by Filter: 39
                     ->  Index Scan using name_pkey on name n  (cost=0.43..0.68 rows=1 width=4) (actual time=0.008..0.008 rows=1 loops=54155)
                           Index Cond: (id = ci.person_id)
                           Filter: ((gender)::text = 'm'::text)
                           Rows Removed by Filter: 0
 Planning Time: 4.828 ms
 Execution Time: 5822.722 ms
(41 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/19a.sql_explained.sql
SET
                                                                                                QUERY PLAN                                                                                                 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=85372.10..85372.11 rows=1 width=64) (actual time=274.853..274.853 rows=1 loops=1)
   ->  Nested Loop  (cost=1004.44..85372.09 rows=1 width=32) (actual time=110.855..274.807 rows=184 loops=1)
         ->  Nested Loop  (cost=1004.30..85371.91 rows=1 width=36) (actual time=110.845..274.575 rows=184 loops=1)
               Join Filter: (t.id = mi.movie_id)
               ->  Nested Loop  (cost=1003.86..85344.51 rows=1 width=44) (actual time=110.800..268.690 rows=77 loops=1)
                     ->  Nested Loop  (cost=1003.44..85343.31 rows=1 width=48) (actual time=110.774..268.163 rows=79 loops=1)
                           Join Filter: (t.id = mc.movie_id)
                           ->  Nested Loop  (cost=1003.01..85340.60 rows=1 width=40) (actual time=110.517..266.912 rows=102 loops=1)
                                 ->  Gather  (cost=1002.58..85339.18 rows=1 width=44) (actual time=110.487..266.683 rows=115 loops=1)
                                       Workers Planned: 2
                                       Workers Launched: 2
                                       ->  Nested Loop  (cost=2.58..84339.08 rows=1 width=44) (actual time=107.929..268.734 rows=38 loops=3)
                                             ->  Hash Join  (cost=2.15..84336.29 rows=2 width=23) (actual time=107.034..267.360 rows=142 loops=3)
                                                   Hash Cond: (ci.role_id = rt.id)
                                                   ->  Nested Loop  (cost=0.99..84335.05 rows=21 width=27) (actual time=106.940..267.230 rows=142 loops=3)
                                                         Join Filter: (n.id = ci.person_id)
                                                         ->  Nested Loop  (cost=0.42..82155.29 rows=9 width=23) (actual time=103.898..256.465 rows=519 loops=3)
                                                               ->  Parallel Seq Scan on name n  (cost=0.00..81659.82 rows=40 width=19) (actual time=103.558..246.449 rows=2256 loops=3)
                                                                     Filter: (((name)::text ~~ '%Ang%'::text) AND ((gender)::text = 'f'::text))
                                                                     Rows Removed by Filter: 1386908
                                                               ->  Index Only Scan using person_id_aka_name on aka_name an  (cost=0.42..12.37 rows=2 width=4) (actual time=0.004..0.004 rows=0 loops=6768)
                                                                     Index Cond: (person_id = n.id)
                                                                     Heap Fetches: 1558
                                                         ->  Index Scan using person_id_cast_info on cast_info ci  (cost=0.56..242.03 rows=13 width=16) (actual time=0.019..0.020 rows=0 loops=1558)
                                                               Index Cond: (person_id = an.person_id)
                                                               Filter: ((note)::text = ANY ('{(voice),"(voice: Japanese version)","(voice) (uncredited)","(voice: English version)"}'::text[]))
                                                               Rows Removed by Filter: 44
                                                   ->  Hash  (cost=1.15..1.15 rows=1 width=4) (actual time=0.018..0.018 rows=1 loops=3)
                                                         Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                         ->  Seq Scan on role_type rt  (cost=0.00..1.15 rows=1 width=4) (actual time=0.010..0.011 rows=1 loops=3)
                                                               Filter: ((role)::text = 'actress'::text)
                                                               Rows Removed by Filter: 11
                                             ->  Index Scan using title_pkey on title t  (cost=0.43..1.40 rows=1 width=21) (actual time=0.009..0.009 rows=0 loops=425)
                                                   Index Cond: (id = ci.movie_id)
                                                   Filter: ((production_year >= 2005) AND (production_year <= 2009))
                                                   Rows Removed by Filter: 1
                                 ->  Index Only Scan using char_name_pkey on char_name chn  (cost=0.43..1.42 rows=1 width=4) (actual time=0.007..0.007 rows=1 loops=115)
                                       Index Cond: (id = ci.person_role_id)
                                       Heap Fetches: 102
                           ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..2.71 rows=1 width=8) (actual time=0.009..0.012 rows=1 loops=102)
                                 Index Cond: (movie_id = ci.movie_id)
                                 Filter: ((note IS NOT NULL) AND (((note)::text ~~ '%(USA)%'::text) OR ((note)::text ~~ '%(worldwide)%'::text)))
                                 Rows Removed by Filter: 6
                     ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..1.20 rows=1 width=4) (actual time=0.006..0.006 rows=1 loops=79)
                           Index Cond: (id = mc.company_id)
                           Filter: ((country_code)::text = '[us]'::text)
                           Rows Removed by Filter: 0
               ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..27.38 rows=1 width=8) (actual time=0.020..0.076 rows=2 loops=77)
                     Index Cond: (movie_id = ci.movie_id)
                     Filter: ((info IS NOT NULL) AND (((info)::text ~~ 'Japan:%200%'::text) OR ((info)::text ~~ 'USA:%200%'::text)))
                     Rows Removed by Filter: 166
         ->  Index Scan using info_type_pkey on info_type it  (cost=0.14..0.16 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=184)
               Index Cond: (id = mi.info_type_id)
               Filter: ((info)::text = 'release dates'::text)
 Planning Time: 24.423 ms
 Execution Time: 275.690 ms
(56 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/19b.sql_explained.sql
SET
                                                                                                   QUERY PLAN                                                                                                   
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=55721.55..55721.56 rows=1 width=64) (actual time=119.587..119.587 rows=1 loops=1)
   ->  Nested Loop  (cost=1003.41..55721.55 rows=1 width=32) (actual time=98.151..119.573 rows=15 loops=1)
         ->  Nested Loop  (cost=1003.28..55721.37 rows=1 width=36) (actual time=98.130..119.530 rows=15 loops=1)
               Join Filter: (ci.person_id = n.id)
               ->  Nested Loop  (cost=1002.85..55719.84 rows=1 width=29) (actual time=91.010..118.455 rows=275 loops=1)
                     ->  Nested Loop  (cost=1002.70..55719.64 rows=1 width=33) (actual time=90.998..118.092 rows=275 loops=1)
                           Join Filter: (t.id = mi.movie_id)
                           ->  Nested Loop  (cost=1002.27..55692.13 rows=1 width=41) (actual time=90.953..99.030 rows=275 loops=1)
                                 ->  Nested Loop  (cost=1001.85..55690.86 rows=1 width=45) (actual time=90.933..98.434 rows=275 loops=1)
                                       ->  Nested Loop  (cost=1001.42..55689.20 rows=1 width=41) (actual time=90.907..97.491 rows=99 loops=1)
                                             ->  Nested Loop  (cost=1001.00..55687.75 rows=1 width=45) (actual time=90.871..96.476 rows=100 loops=1)
                                                   Join Filter: (t.id = ci.movie_id)
                                                   ->  Gather  (cost=1000.43..55645.55 rows=1 width=29) (actual time=90.827..95.537 rows=4 loops=1)
                                                         Workers Planned: 2
                                                         Workers Launched: 2
                                                         ->  Nested Loop  (cost=0.43..54645.45 rows=1 width=29) (actual time=98.631..109.068 rows=1 loops=3)
                                                               ->  Parallel Seq Scan on title t  (cost=0.00..54433.61 rows=10 width=21) (actual time=14.792..108.971 rows=2 loops=3)
                                                                     Filter: ((production_year >= 2007) AND (production_year <= 2008) AND ((title)::text ~~ '%Kung%Fu%Panda%'::text))
                                                                     Rows Removed by Filter: 842768
                                                               ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..21.17 rows=1 width=8) (actual time=0.036..0.039 rows=1 loops=7)
                                                                     Index Cond: (movie_id = t.id)
                                                                     Filter: (((note)::text ~~ '%(200%)%'::text) AND (((note)::text ~~ '%(USA)%'::text) OR ((note)::text ~~ '%(worldwide)%'::text)))
                                                                     Rows Removed by Filter: 6
                                                   ->  Index Scan using movie_id_cast_info on cast_info ci  (cost=0.56..42.20 rows=1 width=16) (actual time=0.016..0.459 rows=25 loops=4)
                                                         Index Cond: (movie_id = mc.movie_id)
                                                         Filter: ((note)::text = '(voice)'::text)
                                                         Rows Removed by Filter: 127
                                             ->  Index Only Scan using char_name_pkey on char_name chn  (cost=0.43..1.45 rows=1 width=4) (actual time=0.010..0.010 rows=1 loops=100)
                                                   Index Cond: (id = ci.person_role_id)
                                                   Heap Fetches: 99
                                       ->  Index Only Scan using person_id_aka_name on aka_name an  (cost=0.42..1.64 rows=2 width=4) (actual time=0.007..0.009 rows=3 loops=99)
                                             Index Cond: (person_id = ci.person_id)
                                             Heap Fetches: 275
                                 ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..1.27 rows=1 width=4) (actual time=0.002..0.002 rows=1 loops=275)
                                       Index Cond: (id = mc.company_id)
                                       Filter: ((country_code)::text = '[us]'::text)
                           ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..27.50 rows=1 width=8) (actual time=0.011..0.069 rows=1 loops=275)
                                 Index Cond: (movie_id = ci.movie_id)
                                 Filter: ((info IS NOT NULL) AND (((info)::text ~~ 'Japan:%2007%'::text) OR ((info)::text ~~ 'USA:%2008%'::text)))
                                 Rows Removed by Filter: 295
                     ->  Index Scan using info_type_pkey on info_type it  (cost=0.14..0.17 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=275)
                           Index Cond: (id = mi.info_type_id)
                           Filter: ((info)::text = 'release dates'::text)
               ->  Index Scan using name_pkey on name n  (cost=0.43..1.53 rows=1 width=19) (actual time=0.004..0.004 rows=0 loops=275)
                     Index Cond: (id = an.person_id)
                     Filter: (((name)::text ~~ '%Angel%'::text) AND ((gender)::text = 'f'::text))
                     Rows Removed by Filter: 1
         ->  Index Scan using role_type_pkey on role_type rt  (cost=0.14..0.16 rows=1 width=4) (actual time=0.002..0.002 rows=1 loops=15)
               Index Cond: (id = ci.role_id)
               Filter: ((role)::text = 'actress'::text)
 Planning Time: 23.221 ms
 Execution Time: 120.733 ms
(52 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/19c.sql_explained.sql
SET
                                                                                                  QUERY PLAN                                                                                                  
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=222418.16..222418.17 rows=1 width=64) (actual time=1721.866..1721.866 rows=1 loops=1)
   ->  Nested Loop  (cost=84856.43..222418.15 rows=2 width=32) (actual time=280.090..1721.273 rows=3575 loops=1)
         Join Filter: (n.id = an.person_id)
         ->  Nested Loop  (cost=84856.00..222416.50 rows=1 width=40) (actual time=266.282..1714.942 rows=2632 loops=1)
               ->  Nested Loop  (cost=84855.58..222414.17 rows=2 width=44) (actual time=266.256..1691.434 rows=8585 loops=1)
                     ->  Hash Join  (cost=84855.15..222411.47 rows=1 width=52) (actual time=266.227..1679.917 rows=2129 loops=1)
                           Hash Cond: (mi.info_type_id = it.id)
                           ->  Nested Loop  (cost=84852.73..222408.95 rows=36 width=56) (actual time=266.181..1679.312 rows=2129 loops=1)
                                 ->  Nested Loop  (cost=84852.29..219906.63 rows=92 width=48) (actual time=266.108..1613.207 rows=3349 loops=1)
                                       ->  Nested Loop  (cost=84851.86..219669.76 rows=170 width=27) (actual time=266.057..1578.083 rows=5686 loops=1)
                                             ->  Hash Join  (cost=84851.43..219172.23 rows=351 width=31) (actual time=266.021..1553.799 rows=6552 loops=1)
                                                   Hash Cond: (ci.person_id = n.id)
                                                   ->  Nested Loop  (cost=0.56..134124.20 rows=75106 width=12) (actual time=0.206..1266.678 rows=276166 loops=1)
                                                         ->  Seq Scan on role_type rt  (cost=0.00..1.15 rows=1 width=4) (actual time=0.009..0.012 rows=1 loops=1)
                                                               Filter: ((role)::text = 'actress'::text)
                                                               Rows Removed by Filter: 11
                                                         ->  Index Scan using role_id_cast_info on cast_info ci  (cost=0.56..133303.71 rows=81934 width=16) (actual time=0.193..1243.472 rows=276166 loops=1)
                                                               Index Cond: (role_id = rt.id)
                                                               Filter: ((note)::text = ANY ('{(voice),"(voice: Japanese version)","(voice) (uncredited)","(voice: English version)"}'::text[]))
                                                               Rows Removed by Filter: 7175807
                                                   ->  Hash  (cost=84607.42..84607.42 rows=19476 width=19) (actual time=260.545..260.545 rows=50011 loops=1)
                                                         Buckets: 65536 (originally 32768)  Batches: 1 (originally 1)  Memory Usage: 3135kB
                                                         ->  Gather  (cost=1000.00..84607.42 rows=19476 width=19) (actual time=105.451..251.619 rows=50011 loops=1)
                                                               Workers Planned: 2
                                                               Workers Launched: 2
                                                               ->  Parallel Seq Scan on name n  (cost=0.00..81659.82 rows=8115 width=19) (actual time=103.494..246.256 rows=16670 loops=3)
                                                                     Filter: (((name)::text ~~ '%An%'::text) AND ((gender)::text = 'f'::text))
                                                                     Rows Removed by Filter: 1372493
                                             ->  Index Only Scan using char_name_pkey on char_name chn  (cost=0.43..1.42 rows=1 width=4) (actual time=0.003..0.003 rows=1 loops=6552)
                                                   Index Cond: (id = ci.person_role_id)
                                                   Heap Fetches: 5686
                                       ->  Index Scan using title_pkey on title t  (cost=0.43..1.39 rows=1 width=21) (actual time=0.006..0.006 rows=1 loops=5686)
                                             Index Cond: (id = ci.movie_id)
                                             Filter: (production_year > 2000)
                                             Rows Removed by Filter: 0
                                 ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..27.19 rows=1 width=8) (actual time=0.013..0.019 rows=1 loops=3349)
                                       Index Cond: (movie_id = t.id)
                                       Filter: ((info IS NOT NULL) AND (((info)::text ~~ 'Japan:%200%'::text) OR ((info)::text ~~ 'USA:%200%'::text)))
                                       Rows Removed by Filter: 15
                           ->  Hash  (cost=2.41..2.41 rows=1 width=4) (actual time=0.020..0.020 rows=1 loops=1)
                                 Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                 ->  Seq Scan on info_type it  (cost=0.00..2.41 rows=1 width=4) (actual time=0.009..0.015 rows=1 loops=1)
                                       Filter: ((info)::text = 'release dates'::text)
                                       Rows Removed by Filter: 112
                     ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..2.65 rows=5 width=8) (actual time=0.003..0.005 rows=4 loops=2129)
                           Index Cond: (movie_id = t.id)
               ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..1.16 rows=1 width=4) (actual time=0.002..0.002 rows=0 loops=8585)
                     Index Cond: (id = mc.company_id)
                     Filter: ((country_code)::text = '[us]'::text)
                     Rows Removed by Filter: 1
         ->  Index Only Scan using person_id_aka_name on aka_name an  (cost=0.42..1.63 rows=2 width=4) (actual time=0.002..0.002 rows=1 loops=2632)
               Index Cond: (person_id = ci.person_id)
               Heap Fetches: 3575
 Planning Time: 24.160 ms
 Execution Time: 1722.233 ms
(55 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/19d.sql_explained.sql
SET
                                                                                                           QUERY PLAN                                                                                                           
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=283172.99..283173.00 rows=1 width=64) (actual time=7253.840..7253.840 rows=1 loops=1)
   ->  Gather  (cost=283172.77..283172.98 rows=2 width=64) (actual time=7253.819..7253.922 rows=3 loops=1)
         Workers Planned: 2
         Workers Launched: 2
         ->  Partial Aggregate  (cost=282172.77..282172.78 rows=1 width=64) (actual time=6775.382..6775.383 rows=1 loops=3)
               ->  Nested Loop  (cost=135435.02..282167.07 rows=1140 width=32) (actual time=2055.473..6695.241 rows=586882 loops=3)
                     ->  Nested Loop  (cost=135434.60..281402.94 rows=465 width=40) (actual time=2055.447..6105.797 rows=262348 loops=3)
                           ->  Nested Loop  (cost=135434.18..279915.09 rows=1278 width=44) (actual time=2055.429..3885.747 rows=1076352 loops=3)
                                 Join Filter: (t.id = mc.movie_id)
                                 ->  Hash Join  (cost=135433.75..279235.89 rows=255 width=52) (actual time=2055.079..3323.962 rows=113945 loops=3)
                                       Hash Cond: (mi.info_type_id = it.id)
                                       ->  Nested Loop  (cost=135431.32..279154.95 rows=28832 width=56) (actual time=2054.994..3268.530 rows=540998 loops=3)
                                             ->  Nested Loop  (cost=135430.89..226932.18 rows=1906 width=48) (actual time=2054.968..2842.396 rows=53102 loops=3)
                                                   ->  Nested Loop  (cost=135430.46..221350.20 rows=3938 width=52) (actual time=2054.938..2601.120 rows=56088 loops=3)
                                                         ->  Hash Join  (cost=135430.03..195430.35 rows=17020 width=33) (actual time=2054.904..2380.167 rows=56136 loops=3)
                                                               Hash Cond: (t.id = ci.movie_id)
                                                               ->  Parallel Seq Scan on title t  (cost=0.00..49166.29 rows=572932 width=21) (actual time=0.019..121.593 rows=460484 loops=3)
                                                                     Filter: (production_year > 2000)
                                                                     Rows Removed by Filter: 382286
                                                               ->  Hash  (cost=134124.20..134124.20 rows=75106 width=12) (actual time=2054.124..2054.125 rows=276166 loops=3)
                                                                     Buckets: 131072 (originally 131072)  Batches: 4 (originally 2)  Memory Usage: 3984kB
                                                                     ->  Nested Loop  (cost=0.56..134124.20 rows=75106 width=12) (actual time=0.166..2000.403 rows=276166 loops=3)
                                                                           ->  Seq Scan on role_type rt  (cost=0.00..1.15 rows=1 width=4) (actual time=0.014..0.017 rows=1 loops=3)
                                                                                 Filter: ((role)::text = 'actress'::text)
                                                                                 Rows Removed by Filter: 11
                                                                           ->  Index Scan using role_id_cast_info on cast_info ci  (cost=0.56..133303.71 rows=81934 width=16) (actual time=0.150..1977.519 rows=276166 loops=3)
                                                                                 Index Cond: (role_id = rt.id)
                                                                                 Filter: ((note)::text = ANY ('{(voice),"(voice: Japanese version)","(voice) (uncredited)","(voice: English version)"}'::text[]))
                                                                                 Rows Removed by Filter: 7175807
                                                         ->  Index Scan using name_pkey on name n  (cost=0.43..1.52 rows=1 width=19) (actual time=0.004..0.004 rows=1 loops=168407)
                                                               Index Cond: (id = ci.person_id)
                                                               Filter: ((gender)::text = 'f'::text)
                                                               Rows Removed by Filter: 0
                                                   ->  Index Only Scan using char_name_pkey on char_name chn  (cost=0.43..1.42 rows=1 width=4) (actual time=0.004..0.004 rows=1 loops=168264)
                                                         Index Cond: (id = ci.person_role_id)
                                                         Heap Fetches: 159307
                                             ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..26.98 rows=42 width=8) (actual time=0.003..0.007 rows=10 loops=159307)
                                                   Index Cond: (movie_id = t.id)
                                       ->  Hash  (cost=2.41..2.41 rows=1 width=4) (actual time=0.024..0.024 rows=1 loops=3)
                                             Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                             ->  Seq Scan on info_type it  (cost=0.00..2.41 rows=1 width=4) (actual time=0.013..0.020 rows=1 loops=3)
                                                   Filter: ((info)::text = 'release dates'::text)
                                                   Rows Removed by Filter: 112
                                 ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..2.60 rows=5 width=8) (actual time=0.002..0.003 rows=9 loops=341836)
                                       Index Cond: (movie_id = mi.movie_id)
                           ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..1.16 rows=1 width=4) (actual time=0.002..0.002 rows=0 loops=3229056)
                                 Index Cond: (id = mc.company_id)
                                 Filter: ((country_code)::text = '[us]'::text)
                                 Rows Removed by Filter: 1
                     ->  Index Only Scan using person_id_aka_name on aka_name an  (cost=0.42..1.62 rows=2 width=4) (actual time=0.001..0.002 rows=2 loops=787043)
                           Index Cond: (person_id = n.id)
                           Heap Fetches: 1760645
 Planning Time: 25.295 ms
 Execution Time: 7254.291 ms
(54 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/1a.sql_explained.sql
SET
                                                                                                 QUERY PLAN                                                                                                 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=19539.97..19539.98 rows=1 width=68) (actual time=82.018..82.018 rows=1 loops=1)
   ->  Gather  (cost=19539.75..19539.96 rows=2 width=68) (actual time=77.398..82.985 rows=3 loops=1)
         Workers Planned: 2
         Workers Launched: 2
         ->  Partial Aggregate  (cost=18539.75..18539.76 rows=1 width=68) (actual time=74.844..74.844 rows=1 loops=3)
               ->  Nested Loop  (cost=4.35..18539.42 rows=44 width=45) (actual time=70.156..74.823 rows=47 loops=3)
                     Join Filter: (mc.movie_id = t.id)
                     ->  Hash Join  (cost=3.92..18513.70 rows=44 width=32) (actual time=70.125..74.101 rows=47 loops=3)
                           Hash Cond: (mc.company_type_id = ct.id)
                           ->  Nested Loop  (cost=2.86..18511.69 rows=177 width=36) (actual time=70.052..74.017 rows=49 loops=3)
                                 ->  Hash Join  (cost=2.43..15253.60 rows=5089 width=4) (actual time=69.990..70.020 rows=83 loops=3)
                                       Hash Cond: (mi_idx.info_type_id = it.id)
                                       ->  Parallel Seq Scan on movie_info_idx mi_idx  (cost=0.00..13685.15 rows=575015 width=8) (actual time=0.016..37.818 rows=460012 loops=3)
                                       ->  Hash  (cost=2.41..2.41 rows=1 width=4) (actual time=0.019..0.019 rows=1 loops=3)
                                             Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                             ->  Seq Scan on info_type it  (cost=0.00..2.41 rows=1 width=4) (actual time=0.016..0.017 rows=1 loops=3)
                                                   Filter: ((info)::text = 'top 250 rank'::text)
                                                   Rows Removed by Filter: 112
                                 ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..0.63 rows=1 width=32) (actual time=0.047..0.048 rows=1 loops=250)
                                       Index Cond: (movie_id = mi_idx.movie_id)
                                       Filter: (((note)::text !~~ '%(as Metro-Goldwyn-Mayer Pictures)%'::text) AND (((note)::text ~~ '%(co-production)%'::text) OR ((note)::text ~~ '%(presents)%'::text)))
                                       Rows Removed by Filter: 33
                           ->  Hash  (cost=1.05..1.05 rows=1 width=4) (actual time=0.021..0.021 rows=1 loops=3)
                                 Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                 ->  Seq Scan on company_type ct  (cost=0.00..1.05 rows=1 width=4) (actual time=0.015..0.016 rows=1 loops=3)
                                       Filter: ((kind)::text = 'production companies'::text)
                                       Rows Removed by Filter: 3
                     ->  Index Scan using title_pkey on title t  (cost=0.43..0.57 rows=1 width=25) (actual time=0.015..0.015 rows=1 loops=142)
                           Index Cond: (id = mi_idx.movie_id)
 Planning Time: 2.259 ms
 Execution Time: 83.136 ms
(31 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/1b.sql_explained.sql
SET
                                                                                   QUERY PLAN                                                                                    
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=20131.19..20131.20 rows=1 width=68) (actual time=72.861..72.861 rows=1 loops=1)
   ->  Gather  (cost=20130.96..20131.17 rows=2 width=68) (actual time=72.854..73.075 rows=3 loops=1)
         Workers Planned: 2
         Workers Launched: 2
         ->  Partial Aggregate  (cost=19130.96..19130.97 rows=1 width=68) (actual time=70.248..70.248 rows=1 loops=3)
               ->  Hash Join  (cost=4.35..19124.19 rows=903 width=45) (actual time=70.242..70.243 rows=1 loops=3)
                     Hash Cond: (mc.company_type_id = ct.id)
                     ->  Nested Loop  (cost=3.29..19103.60 rows=3612 width=49) (actual time=70.093..70.166 rows=22 loops=3)
                           Join Filter: (t.id = mc.movie_id)
                           ->  Nested Loop  (cost=2.86..18189.65 rows=1422 width=29) (actual time=70.082..70.108 rows=1 loops=3)
                                 ->  Hash Join  (cost=2.43..15253.60 rows=5089 width=4) (actual time=70.018..70.020 rows=3 loops=3)
                                       Hash Cond: (mi_idx.info_type_id = it.id)
                                       ->  Parallel Seq Scan on movie_info_idx mi_idx  (cost=0.00..13685.15 rows=575015 width=8) (actual time=0.023..37.835 rows=460012 loops=3)
                                       ->  Hash  (cost=2.41..2.41 rows=1 width=4) (actual time=0.017..0.017 rows=1 loops=3)
                                             Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                             ->  Seq Scan on info_type it  (cost=0.00..2.41 rows=1 width=4) (actual time=0.015..0.015 rows=1 loops=3)
                                                   Filter: ((info)::text = 'bottom 10 rank'::text)
                                                   Rows Removed by Filter: 112
                                 ->  Index Scan using title_pkey on title t  (cost=0.43..0.58 rows=1 width=25) (actual time=0.026..0.026 rows=0 loops=10)
                                       Index Cond: (id = mi_idx.movie_id)
                                       Filter: ((production_year >= 2005) AND (production_year <= 2010))
                                       Rows Removed by Filter: 1
                           ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..0.61 rows=3 width=32) (actual time=0.027..0.041 rows=16 loops=4)
                                 Index Cond: (movie_id = mi_idx.movie_id)
                                 Filter: ((note)::text !~~ '%(as Metro-Goldwyn-Mayer Pictures)%'::text)
                                 Rows Removed by Filter: 2
                     ->  Hash  (cost=1.05..1.05 rows=1 width=4) (actual time=0.018..0.018 rows=1 loops=3)
                           Buckets: 1024  Batches: 1  Memory Usage: 9kB
                           ->  Seq Scan on company_type ct  (cost=0.00..1.05 rows=1 width=4) (actual time=0.013..0.014 rows=1 loops=3)
                                 Filter: ((kind)::text = 'production companies'::text)
                                 Rows Removed by Filter: 3
 Planning Time: 1.810 ms
 Execution Time: 73.217 ms
(33 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/1c.sql_explained.sql
SET
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=19461.56..19461.57 rows=1 width=68) (actual time=76.986..76.986 rows=1 loops=1)
   ->  Gather  (cost=19461.33..19461.54 rows=2 width=68) (actual time=76.978..77.044 rows=3 loops=1)
         Workers Planned: 2
         Workers Launched: 2
         ->  Partial Aggregate  (cost=18461.33..18461.34 rows=1 width=68) (actual time=72.303..72.303 rows=1 loops=3)
               ->  Nested Loop  (cost=4.35..18461.31 rows=3 width=45) (actual time=71.419..72.298 rows=1 loops=3)
                     Join Filter: (mc.movie_id = t.id)
                     ->  Hash Join  (cost=3.92..18449.57 rows=20 width=32) (actual time=70.505..72.249 rows=8 loops=3)
                           Hash Cond: (mc.company_type_id = ct.id)
                           ->  Nested Loop  (cost=2.86..18448.07 rows=81 width=36) (actual time=70.431..72.174 rows=8 loops=3)
                                 ->  Hash Join  (cost=2.43..15253.60 rows=5089 width=4) (actual time=69.777..69.804 rows=83 loops=3)
                                       Hash Cond: (mi_idx.info_type_id = it.id)
                                       ->  Parallel Seq Scan on movie_info_idx mi_idx  (cost=0.00..13685.15 rows=575015 width=8) (actual time=0.022..37.642 rows=460012 loops=3)
                                       ->  Hash  (cost=2.41..2.41 rows=1 width=4) (actual time=0.017..0.017 rows=1 loops=3)
                                             Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                             ->  Seq Scan on info_type it  (cost=0.00..2.41 rows=1 width=4) (actual time=0.014..0.014 rows=1 loops=3)
                                                   Filter: ((info)::text = 'top 250 rank'::text)
                                                   Rows Removed by Filter: 112
                                 ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..0.62 rows=1 width=32) (actual time=0.028..0.028 rows=0 loops=250)
                                       Index Cond: (movie_id = mi_idx.movie_id)
                                       Filter: (((note)::text !~~ '%(as Metro-Goldwyn-Mayer Pictures)%'::text) AND ((note)::text ~~ '%(co-production)%'::text))
                                       Rows Removed by Filter: 33
                           ->  Hash  (cost=1.05..1.05 rows=1 width=4) (actual time=0.017..0.017 rows=1 loops=3)
                                 Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                 ->  Seq Scan on company_type ct  (cost=0.00..1.05 rows=1 width=4) (actual time=0.013..0.014 rows=1 loops=3)
                                       Filter: ((kind)::text = 'production companies'::text)
                                       Rows Removed by Filter: 3
                     ->  Index Scan using title_pkey on title t  (cost=0.43..0.57 rows=1 width=25) (actual time=0.006..0.006 rows=0 loops=23)
                           Index Cond: (id = mi_idx.movie_id)
                           Filter: (production_year > 2010)
                           Rows Removed by Filter: 1
 Planning Time: 1.834 ms
 Execution Time: 77.195 ms
(33 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/1d.sql_explained.sql
SET
                                                                                   QUERY PLAN                                                                                    
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=20988.46..20988.47 rows=1 width=68) (actual time=72.666..72.667 rows=1 loops=1)
   ->  Gather  (cost=20988.24..20988.45 rows=2 width=68) (actual time=72.190..73.395 rows=3 loops=1)
         Workers Planned: 2
         Workers Launched: 2
         ->  Partial Aggregate  (cost=19988.24..19988.25 rows=1 width=68) (actual time=70.063..70.063 rows=1 loops=3)
               ->  Hash Join  (cost=4.35..19975.05 rows=1758 width=45) (actual time=70.040..70.056 rows=1 loops=3)
                     Hash Cond: (mc.company_type_id = ct.id)
                     ->  Nested Loop  (cost=3.29..19935.98 rows=7030 width=49) (actual time=69.891..69.984 rows=26 loops=3)
                           ->  Nested Loop  (cost=2.86..18176.93 rows=2768 width=29) (actual time=69.872..69.907 rows=2 loops=3)
                                 ->  Hash Join  (cost=2.43..15253.60 rows=5089 width=4) (actual time=69.849..69.851 rows=3 loops=3)
                                       Hash Cond: (mi_idx.info_type_id = it.id)
                                       ->  Parallel Seq Scan on movie_info_idx mi_idx  (cost=0.00..13685.15 rows=575015 width=8) (actual time=0.024..37.674 rows=460012 loops=3)
                                       ->  Hash  (cost=2.41..2.41 rows=1 width=4) (actual time=0.019..0.019 rows=1 loops=3)
                                             Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                             ->  Seq Scan on info_type it  (cost=0.00..2.41 rows=1 width=4) (actual time=0.015..0.016 rows=1 loops=3)
                                                   Filter: ((info)::text = 'bottom 10 rank'::text)
                                                   Rows Removed by Filter: 112
                                 ->  Index Scan using title_pkey on title t  (cost=0.43..0.57 rows=1 width=25) (actual time=0.016..0.016 rows=1 loops=10)
                                       Index Cond: (id = mi_idx.movie_id)
                                       Filter: (production_year > 2000)
                                       Rows Removed by Filter: 0
                           ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..0.61 rows=3 width=32) (actual time=0.025..0.036 rows=13 loops=6)
                                 Index Cond: (movie_id = t.id)
                                 Filter: ((note)::text !~~ '%(as Metro-Goldwyn-Mayer Pictures)%'::text)
                                 Rows Removed by Filter: 2
                     ->  Hash  (cost=1.05..1.05 rows=1 width=4) (actual time=0.017..0.017 rows=1 loops=3)
                           Buckets: 1024  Batches: 1  Memory Usage: 9kB
                           ->  Seq Scan on company_type ct  (cost=0.00..1.05 rows=1 width=4) (actual time=0.013..0.014 rows=1 loops=3)
                                 Filter: ((kind)::text = 'production companies'::text)
                                 Rows Removed by Filter: 3
 Planning Time: 1.764 ms
 Execution Time: 73.541 ms
(32 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/20a.sql_explained.sql
SET
                                                                                             QUERY PLAN                                                                                             
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=12310.45..12310.46 rows=1 width=32) (actual time=3284.227..3284.227 rows=1 loops=1)
   ->  Nested Loop  (cost=9.02..12310.44 rows=1 width=17) (actual time=45.664..3284.192 rows=33 loops=1)
         ->  Nested Loop  (cost=8.59..12309.99 rows=1 width=21) (actual time=45.637..3283.845 rows=33 loops=1)
               ->  Nested Loop  (cost=8.16..12304.93 rows=11 width=25) (actual time=4.796..1943.869 rows=532809 loops=1)
                     Join Filter: (t.id = ci.movie_id)
                     ->  Nested Loop  (cost=7.60..12298.97 rows=3 width=29) (actual time=4.756..468.022 rows=6016 loops=1)
                           Join Filter: (t.kind_id = kt.id)
                           Rows Removed by Join Filter: 1347
                           ->  Seq Scan on kind_type kt  (cost=0.00..1.09 rows=1 width=4) (actual time=0.014..0.015 rows=1 loops=1)
                                 Filter: ((kind)::text = 'movie'::text)
                                 Rows Removed by Filter: 6
                           ->  Nested Loop  (cost=7.60..12297.62 rows=21 width=33) (actual time=1.014..466.331 rows=7363 loops=1)
                                 ->  Nested Loop  (cost=7.17..12286.40 rows=23 width=8) (actual time=0.989..405.713 rows=8765 loops=1)
                                       Join Filter: (cc.status_id = cct2.id)
                                       Rows Removed by Join Filter: 8765
                                       ->  Seq Scan on comp_cast_type cct2  (cost=0.00..1.05 rows=1 width=4) (actual time=0.009..0.011 rows=2 loops=1)
                                             Filter: ((kind)::text ~~ '%complete%'::text)
                                             Rows Removed by Filter: 2
                                       ->  Nested Loop  (cost=7.17..12284.17 rows=94 width=12) (actual time=0.825..201.410 rows=8765 loops=2)
                                             Join Filter: (cc.subject_id = cct1.id)
                                             Rows Removed by Join Filter: 4045
                                             ->  Seq Scan on comp_cast_type cct1  (cost=0.00..1.05 rows=1 width=4) (actual time=0.001..0.003 rows=1 loops=2)
                                                   Filter: ((kind)::text = 'cast'::text)
                                                   Rows Removed by Filter: 3
                                             ->  Nested Loop  (cost=7.17..12278.42 rows=376 width=16) (actual time=0.823..199.465 rows=12810 loops=2)
                                                   ->  Nested Loop  (cost=6.75..12149.91 rows=270 width=4) (actual time=0.612..128.046 rows=35548 loops=2)
                                                         ->  Seq Scan on keyword k  (cost=0.00..3632.40 rows=8 width=4) (actual time=0.109..30.107 rows=8 loops=2)
                                                               Filter: ((keyword)::text = ANY ('{superhero,sequel,second-part,marvel-comics,based-on-comic,tv-special,fight,violence}'::text[]))
                                                               Rows Removed by Filter: 134162
                                                         ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1061.70 rows=299 width=8) (actual time=1.078..11.754 rows=4444 loops=16)
                                                               Recheck Cond: (keyword_id = k.id)
                                                               Heap Blocks: exact=46976
                                                               ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=0.593..0.593 rows=4444 loops=16)
                                                                     Index Cond: (keyword_id = k.id)
                                                   ->  Index Scan using movie_id_complete_cast on complete_cast cc  (cost=0.42..0.46 rows=2 width=12) (actual time=0.002..0.002 rows=0 loops=71096)
                                                         Index Cond: (movie_id = mk.movie_id)
                                 ->  Index Scan using title_pkey on title t  (cost=0.43..0.49 rows=1 width=25) (actual time=0.006..0.006 rows=1 loops=8765)
                                       Index Cond: (id = mk.movie_id)
                                       Filter: (production_year > 1950)
                                       Rows Removed by Filter: 0
                     ->  Index Scan using movie_id_cast_info on cast_info ci  (cost=0.56..1.52 rows=37 width=12) (actual time=0.009..0.230 rows=89 loops=6016)
                           Index Cond: (movie_id = mk.movie_id)
               ->  Index Scan using char_name_pkey on char_name chn  (cost=0.43..0.46 rows=1 width=4) (actual time=0.002..0.002 rows=0 loops=532809)
                     Index Cond: (id = ci.person_role_id)
                     Filter: (((name)::text !~~ '%Sherlock%'::text) AND (((name)::text ~~ '%Tony%Stark%'::text) OR ((name)::text ~~ '%Iron%Man%'::text)))
                     Rows Removed by Filter: 0
         ->  Index Only Scan using name_pkey on name n  (cost=0.43..0.45 rows=1 width=4) (actual time=0.010..0.010 rows=1 loops=33)
               Index Cond: (id = ci.person_id)
               Heap Fetches: 33
 Planning Time: 15.772 ms
 Execution Time: 3284.405 ms
(51 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/20b.sql_explained.sql
SET
                                                                                            QUERY PLAN                                                                                             
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=12304.81..12304.82 rows=1 width=32) (actual time=2523.799..2523.800 rows=1 loops=1)
   ->  Nested Loop  (cost=9.02..12304.81 rows=1 width=17) (actual time=56.037..2523.766 rows=17 loops=1)
         ->  Nested Loop  (cost=8.59..12304.35 rows=1 width=21) (actual time=56.022..2523.471 rows=27 loops=1)
               ->  Nested Loop  (cost=8.16..12301.15 rows=7 width=25) (actual time=7.435..1257.245 rows=222518 loops=1)
                     Join Filter: (t.id = ci.movie_id)
                     ->  Nested Loop  (cost=7.60..12297.17 rows=2 width=29) (actual time=7.403..627.029 rows=1472 loops=1)
                           Join Filter: (cc.status_id = cct2.id)
                           Rows Removed by Join Filter: 1472
                           ->  Seq Scan on comp_cast_type cct2  (cost=0.00..1.05 rows=1 width=4) (actual time=0.010..0.011 rows=2 loops=1)
                                 Filter: ((kind)::text ~~ '%complete%'::text)
                                 Rows Removed by Filter: 2
                           ->  Nested Loop  (cost=7.60..12296.04 rows=7 width=33) (actual time=5.501..313.152 rows=1472 loops=2)
                                 Join Filter: (cc.subject_id = cct1.id)
                                 Rows Removed by Join Filter: 243
                                 ->  Seq Scan on comp_cast_type cct1  (cost=0.00..1.05 rows=1 width=4) (actual time=0.002..0.003 rows=1 loops=2)
                                       Filter: ((kind)::text = 'cast'::text)
                                       Rows Removed by Filter: 3
                                 ->  Nested Loop  (cost=7.60..12294.62 rows=29 width=37) (actual time=5.497..312.728 rows=1715 loops=2)
                                       ->  Nested Loop  (cost=7.18..12284.58 rows=21 width=25) (actual time=5.417..296.456 rows=6043 loops=2)
                                             Join Filter: (t.kind_id = kt.id)
                                             Rows Removed by Join Filter: 8122
                                             ->  Seq Scan on kind_type kt  (cost=0.00..1.09 rows=1 width=4) (actual time=0.002..0.003 rows=1 loops=2)
                                                   Filter: ((kind)::text = 'movie'::text)
                                                   Rows Removed by Filter: 6
                                             ->  Nested Loop  (cost=7.18..12281.66 rows=147 width=29) (actual time=0.626..294.694 rows=14165 loops=2)
                                                   ->  Nested Loop  (cost=6.75..12149.91 rows=270 width=4) (actual time=0.612..127.023 rows=35548 loops=2)
                                                         ->  Seq Scan on keyword k  (cost=0.00..3632.40 rows=8 width=4) (actual time=0.110..30.075 rows=8 loops=2)
                                                               Filter: ((keyword)::text = ANY ('{superhero,sequel,second-part,marvel-comics,based-on-comic,tv-special,fight,violence}'::text[]))
                                                               Rows Removed by Filter: 134162
                                                         ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1061.70 rows=299 width=8) (actual time=1.086..11.560 rows=4444 loops=16)
                                                               Recheck Cond: (keyword_id = k.id)
                                                               Heap Blocks: exact=46976
                                                               ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=0.600..0.600 rows=4444 loops=16)
                                                                     Index Cond: (keyword_id = k.id)
                                                   ->  Index Scan using title_pkey on title t  (cost=0.43..0.49 rows=1 width=25) (actual time=0.004..0.004 rows=0 loops=71096)
                                                         Index Cond: (id = mk.movie_id)
                                                         Filter: (production_year > 2000)
                                                         Rows Removed by Filter: 1
                                       ->  Index Scan using movie_id_complete_cast on complete_cast cc  (cost=0.42..0.46 rows=2 width=12) (actual time=0.002..0.002 rows=0 loops=12086)
                                             Index Cond: (movie_id = t.id)
                     ->  Index Scan using movie_id_cast_info on cast_info ci  (cost=0.56..1.52 rows=37 width=12) (actual time=0.011..0.398 rows=151 loops=1472)
                           Index Cond: (movie_id = mk.movie_id)
               ->  Index Scan using name_pkey on name n  (cost=0.43..0.46 rows=1 width=4) (actual time=0.005..0.005 rows=0 loops=222518)
                     Index Cond: (id = ci.person_id)
                     Filter: ((name)::text ~~ '%Downey%Robert%'::text)
                     Rows Removed by Filter: 1
         ->  Index Scan using char_name_pkey on char_name chn  (cost=0.43..0.46 rows=1 width=4) (actual time=0.010..0.010 rows=1 loops=27)
               Index Cond: (id = ci.person_role_id)
               Filter: (((name)::text !~~ '%Sherlock%'::text) AND (((name)::text ~~ '%Tony%Stark%'::text) OR ((name)::text ~~ '%Iron%Man%'::text)))
               Rows Removed by Filter: 0
 Planning Time: 15.795 ms
 Execution Time: 2524.000 ms
(52 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/20c.sql_explained.sql
SET
                                                                                             QUERY PLAN                                                                                             
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=14665.13..14665.14 rows=1 width=64) (actual time=1437.688..1437.689 rows=1 loops=1)
   ->  Nested Loop  (cost=9.02..14665.12 rows=1 width=32) (actual time=7.336..1436.311 rows=5406 loops=1)
         ->  Nested Loop  (cost=8.59..14664.67 rows=1 width=21) (actual time=7.310..1395.856 rows=5406 loops=1)
               ->  Nested Loop  (cost=8.16..14661.01 rows=8 width=25) (actual time=7.026..984.973 rows=189844 loops=1)
                     Join Filter: (t.id = ci.movie_id)
                     ->  Nested Loop  (cost=7.60..14657.03 rows=2 width=29) (actual time=6.992..480.312 rows=1267 loops=1)
                           Join Filter: (cc.status_id = cct2.id)
                           Rows Removed by Join Filter: 1267
                           ->  Seq Scan on comp_cast_type cct2  (cost=0.00..1.05 rows=1 width=4) (actual time=0.010..0.011 rows=2 loops=1)
                                 Filter: ((kind)::text ~~ '%complete%'::text)
                                 Rows Removed by Filter: 2
                           ->  Nested Loop  (cost=7.60..14655.87 rows=9 width=33) (actual time=5.275..239.885 rows=1267 loops=2)
                                 Join Filter: (cc.subject_id = cct1.id)
                                 Rows Removed by Join Filter: 218
                                 ->  Seq Scan on comp_cast_type cct1  (cost=0.00..1.05 rows=1 width=4) (actual time=0.002..0.003 rows=1 loops=2)
                                       Filter: ((kind)::text = 'cast'::text)
                                       Rows Removed by Filter: 3
                                 ->  Nested Loop  (cost=7.60..14654.36 rows=37 width=37) (actual time=5.271..239.560 rows=1485 loops=2)
                                       ->  Nested Loop  (cost=7.18..14641.93 rows=26 width=25) (actual time=5.196..226.392 rows=5032 loops=2)
                                             Join Filter: (t.kind_id = kt.id)
                                             Rows Removed by Join Filter: 5581
                                             ->  Seq Scan on kind_type kt  (cost=0.00..1.09 rows=1 width=4) (actual time=0.001..0.003 rows=1 loops=2)
                                                   Filter: ((kind)::text = 'movie'::text)
                                                   Rows Removed by Filter: 6
                                             ->  Nested Loop  (cost=7.18..14638.55 rows=183 width=29) (actual time=0.655..225.039 rows=10613 loops=2)
                                                   ->  Nested Loop  (cost=6.75..14474.11 rows=337 width=4) (actual time=0.639..106.687 rows=24091 loops=2)
                                                         ->  Seq Scan on keyword k  (cost=0.00..3967.82 rows=10 width=4) (actual time=0.133..36.202 rows=10 loops=2)
                                                               Filter: ((keyword)::text = ANY ('{superhero,marvel-comics,based-on-comic,tv-special,fight,violence,magnet,web,claw,laser}'::text[]))
                                                               Rows Removed by Filter: 134160
                                                         ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1047.64 rows=299 width=8) (actual time=0.643..6.749 rows=2409 loops=20)
                                                               Recheck Cond: (keyword_id = k.id)
                                                               Heap Blocks: exact=34254
                                                               ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=0.358..0.358 rows=2409 loops=20)
                                                                     Index Cond: (keyword_id = k.id)
                                                   ->  Index Scan using title_pkey on title t  (cost=0.43..0.49 rows=1 width=25) (actual time=0.005..0.005 rows=0 loops=48182)
                                                         Index Cond: (id = mk.movie_id)
                                                         Filter: (production_year > 2000)
                                                         Rows Removed by Filter: 1
                                       ->  Index Scan using movie_id_complete_cast on complete_cast cc  (cost=0.42..0.46 rows=2 width=12) (actual time=0.002..0.002 rows=0 loops=10064)
                                             Index Cond: (movie_id = t.id)
                     ->  Index Scan using movie_id_cast_info on cast_info ci  (cost=0.56..1.52 rows=37 width=12) (actual time=0.011..0.374 rows=150 loops=1267)
                           Index Cond: (movie_id = mk.movie_id)
               ->  Index Scan using char_name_pkey on char_name chn  (cost=0.43..0.46 rows=1 width=4) (actual time=0.002..0.002 rows=0 loops=189844)
                     Index Cond: (id = ci.person_role_id)
                     Filter: ((name IS NOT NULL) AND (((name)::text ~~ '%man%'::text) OR ((name)::text ~~ '%Man%'::text)))
                     Rows Removed by Filter: 0
         ->  Index Scan using name_pkey on name n  (cost=0.43..0.45 rows=1 width=19) (actual time=0.007..0.007 rows=1 loops=5406)
               Index Cond: (id = ci.person_id)
 Planning Time: 16.163 ms
 Execution Time: 1437.870 ms
(50 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/21a.sql_explained.sql
SET
                                                                                         QUERY PLAN                                                                                          
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=3753.11..3753.12 rows=1 width=96) (actual time=101.380..101.380 rows=1 loops=1)
   ->  Nested Loop  (cost=8.75..3753.10 rows=1 width=118) (actual time=3.693..101.068 rows=1410 loops=1)
         Join Filter: (ml.movie_id = t.id)
         ->  Nested Loop  (cost=8.32..3752.60 rows=1 width=117) (actual time=3.672..98.033 rows=1816 loops=1)
               Join Filter: (ml.movie_id = mi.movie_id)
               ->  Nested Loop  (cost=7.89..3750.82 rows=1 width=113) (actual time=3.626..93.118 rows=402 loops=1)
                     Join Filter: (mc.company_type_id = ct.id)
                     Rows Removed by Join Filter: 20
                     ->  Nested Loop  (cost=7.89..3749.75 rows=1 width=117) (actual time=3.616..92.663 rows=422 loops=1)
                           ->  Nested Loop  (cost=7.47..3749.30 rows=1 width=102) (actual time=3.252..90.266 rows=1021 loops=1)
                                 Join Filter: (ml.movie_id = mc.movie_id)
                                 ->  Nested Loop  (cost=7.04..3748.73 rows=1 width=90) (actual time=3.223..89.110 rows=199 loops=1)
                                       Join Filter: (ml.link_type_id = lt.id)
                                       Rows Removed by Join Filter: 303
                                       ->  Seq Scan on link_type lt  (cost=0.00..1.23 rows=1 width=86) (actual time=0.015..0.019 rows=2 loops=1)
                                             Filter: ((link)::text ~~ '%follow%'::text)
                                             Rows Removed by Filter: 16
                                       ->  Nested Loop  (cost=7.04..3747.37 rows=11 width=12) (actual time=2.933..44.517 rows=251 loops=2)
                                             ->  Nested Loop  (cost=6.75..3732.91 rows=34 width=4) (actual time=2.927..34.900 rows=10544 loops=2)
                                                   ->  Seq Scan on keyword k  (cost=0.00..2626.12 rows=1 width=4) (actual time=0.677..10.318 rows=1 loops=2)
                                                         Filter: ((keyword)::text = 'sequel'::text)
                                                         Rows Removed by Filter: 134169
                                                   ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1103.80 rows=299 width=8) (actual time=2.234..23.557 rows=10544 loops=2)
                                                         Recheck Cond: (keyword_id = k.id)
                                                         Heap Blocks: exact=11140
                                                         ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=1.315..1.315 rows=10544 loops=2)
                                                               Index Cond: (keyword_id = k.id)
                                             ->  Index Scan using movie_id_movie_link on movie_link ml  (cost=0.29..0.38 rows=5 width=8) (actual time=0.001..0.001 rows=0 loops=21088)
                                                   Index Cond: (movie_id = mk.movie_id)
                                 ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..0.54 rows=2 width=12) (actual time=0.004..0.005 rows=5 loops=199)
                                       Index Cond: (movie_id = mk.movie_id)
                                       Filter: (note IS NULL)
                                       Rows Removed by Filter: 2
                           ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..0.46 rows=1 width=23) (actual time=0.002..0.002 rows=0 loops=1021)
                                 Index Cond: (id = mc.company_id)
                                 Filter: (((country_code)::text <> '[pl]'::text) AND (((name)::text ~~ '%Film%'::text) OR ((name)::text ~~ '%Warner%'::text)))
                                 Rows Removed by Filter: 1
                     ->  Seq Scan on company_type ct  (cost=0.00..1.05 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=422)
                           Filter: ((kind)::text = 'production companies'::text)
                           Rows Removed by Filter: 1
               ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..1.77 rows=1 width=4) (actual time=0.009..0.011 rows=5 loops=402)
                     Index Cond: (movie_id = mk.movie_id)
                     Filter: ((info)::text = ANY ('{Sweden,Norway,Germany,Denmark,Swedish,Denish,Norwegian,German}'::text[]))
                     Rows Removed by Filter: 16
         ->  Index Scan using title_pkey on title t  (cost=0.43..0.49 rows=1 width=21) (actual time=0.001..0.001 rows=1 loops=1816)
               Index Cond: (id = mk.movie_id)
               Filter: ((production_year >= 1950) AND (production_year <= 2000))
               Rows Removed by Filter: 0
 Planning Time: 15.169 ms
 Execution Time: 101.562 ms
(50 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/21b.sql_explained.sql
SET
                                                                                         QUERY PLAN                                                                                          
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=3752.79..3752.80 rows=1 width=96) (actual time=67.279..67.279 rows=1 loops=1)
   ->  Nested Loop  (cost=8.75..3752.79 rows=1 width=118) (actual time=3.379..67.258 rows=38 loops=1)
         Join Filter: (ml.movie_id = t.id)
         ->  Nested Loop  (cost=8.32..3752.28 rows=1 width=117) (actual time=3.033..66.704 rows=308 loops=1)
               Join Filter: (ml.movie_id = mi.movie_id)
               ->  Nested Loop  (cost=7.89..3750.82 rows=1 width=113) (actual time=3.018..63.378 rows=402 loops=1)
                     Join Filter: (mc.company_type_id = ct.id)
                     Rows Removed by Join Filter: 20
                     ->  Nested Loop  (cost=7.89..3749.75 rows=1 width=117) (actual time=3.015..62.938 rows=422 loops=1)
                           ->  Nested Loop  (cost=7.47..3749.30 rows=1 width=102) (actual time=2.849..60.937 rows=1021 loops=1)
                                 Join Filter: (ml.movie_id = mc.movie_id)
                                 ->  Nested Loop  (cost=7.04..3748.73 rows=1 width=90) (actual time=2.834..60.060 rows=199 loops=1)
                                       Join Filter: (ml.link_type_id = lt.id)
                                       Rows Removed by Join Filter: 303
                                       ->  Seq Scan on link_type lt  (cost=0.00..1.23 rows=1 width=86) (actual time=0.004..0.009 rows=2 loops=1)
                                             Filter: ((link)::text ~~ '%follow%'::text)
                                             Rows Removed by Filter: 16
                                       ->  Nested Loop  (cost=7.04..3747.37 rows=11 width=12) (actual time=2.732..29.998 rows=251 loops=2)
                                             ->  Nested Loop  (cost=6.75..3732.91 rows=34 width=4) (actual time=2.725..20.912 rows=10544 loops=2)
                                                   ->  Seq Scan on keyword k  (cost=0.00..2626.12 rows=1 width=4) (actual time=0.574..9.901 rows=1 loops=2)
                                                         Filter: ((keyword)::text = 'sequel'::text)
                                                         Rows Removed by Filter: 134169
                                                   ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1103.80 rows=299 width=8) (actual time=2.137..10.044 rows=10544 loops=2)
                                                         Recheck Cond: (keyword_id = k.id)
                                                         Heap Blocks: exact=11140
                                                         ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=1.229..1.229 rows=10544 loops=2)
                                                               Index Cond: (keyword_id = k.id)
                                             ->  Index Scan using movie_id_movie_link on movie_link ml  (cost=0.29..0.38 rows=5 width=8) (actual time=0.001..0.001 rows=0 loops=21088)
                                                   Index Cond: (movie_id = mk.movie_id)
                                 ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..0.54 rows=2 width=12) (actual time=0.002..0.003 rows=5 loops=199)
                                       Index Cond: (movie_id = mk.movie_id)
                                       Filter: (note IS NULL)
                                       Rows Removed by Filter: 2
                           ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..0.46 rows=1 width=23) (actual time=0.002..0.002 rows=0 loops=1021)
                                 Index Cond: (id = mc.company_id)
                                 Filter: (((country_code)::text <> '[pl]'::text) AND (((name)::text ~~ '%Film%'::text) OR ((name)::text ~~ '%Warner%'::text)))
                                 Rows Removed by Filter: 1
                     ->  Seq Scan on company_type ct  (cost=0.00..1.05 rows=1 width=4) (actual time=0.000..0.000 rows=1 loops=422)
                           Filter: ((kind)::text = 'production companies'::text)
                           Rows Removed by Filter: 1
               ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..1.45 rows=1 width=4) (actual time=0.007..0.008 rows=1 loops=402)
                     Index Cond: (movie_id = mk.movie_id)
                     Filter: ((info)::text = ANY ('{Germany,German}'::text[]))
                     Rows Removed by Filter: 20
         ->  Index Scan using title_pkey on title t  (cost=0.43..0.49 rows=1 width=21) (actual time=0.002..0.002 rows=0 loops=308)
               Index Cond: (id = mk.movie_id)
               Filter: ((production_year >= 2000) AND (production_year <= 2010))
               Rows Removed by Filter: 1
 Planning Time: 14.345 ms
 Execution Time: 67.457 ms
(50 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/21c.sql_explained.sql
SET
                                                                                         QUERY PLAN                                                                                          
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=3753.19..3753.20 rows=1 width=96) (actual time=70.553..70.553 rows=1 loops=1)
   ->  Nested Loop  (cost=8.75..3753.18 rows=1 width=118) (actual time=3.011..70.152 rows=1874 loops=1)
         Join Filter: (ml.movie_id = t.id)
         ->  Nested Loop  (cost=8.32..3752.68 rows=1 width=117) (actual time=3.002..67.023 rows=1874 loops=1)
               Join Filter: (ml.movie_id = mi.movie_id)
               ->  Nested Loop  (cost=7.89..3750.82 rows=1 width=113) (actual time=2.988..62.339 rows=402 loops=1)
                     Join Filter: (mc.company_type_id = ct.id)
                     Rows Removed by Join Filter: 20
                     ->  Nested Loop  (cost=7.89..3749.75 rows=1 width=117) (actual time=2.985..61.890 rows=422 loops=1)
                           ->  Nested Loop  (cost=7.47..3749.30 rows=1 width=102) (actual time=2.825..59.912 rows=1021 loops=1)
                                 Join Filter: (ml.movie_id = mc.movie_id)
                                 ->  Nested Loop  (cost=7.04..3748.73 rows=1 width=90) (actual time=2.812..59.049 rows=199 loops=1)
                                       Join Filter: (ml.link_type_id = lt.id)
                                       Rows Removed by Join Filter: 303
                                       ->  Seq Scan on link_type lt  (cost=0.00..1.23 rows=1 width=86) (actual time=0.004..0.008 rows=2 loops=1)
                                             Filter: ((link)::text ~~ '%follow%'::text)
                                             Rows Removed by Filter: 16
                                       ->  Nested Loop  (cost=7.04..3747.37 rows=11 width=12) (actual time=2.710..29.493 rows=251 loops=2)
                                             ->  Nested Loop  (cost=6.75..3732.91 rows=34 width=4) (actual time=2.705..20.453 rows=10544 loops=2)
                                                   ->  Seq Scan on keyword k  (cost=0.00..2626.12 rows=1 width=4) (actual time=0.565..9.934 rows=1 loops=2)
                                                         Filter: ((keyword)::text = 'sequel'::text)
                                                         Rows Removed by Filter: 134169
                                                   ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1103.80 rows=299 width=8) (actual time=2.127..9.539 rows=10544 loops=2)
                                                         Recheck Cond: (keyword_id = k.id)
                                                         Heap Blocks: exact=11140
                                                         ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=1.203..1.203 rows=10544 loops=2)
                                                               Index Cond: (keyword_id = k.id)
                                             ->  Index Scan using movie_id_movie_link on movie_link ml  (cost=0.29..0.38 rows=5 width=8) (actual time=0.001..0.001 rows=0 loops=21088)
                                                   Index Cond: (movie_id = mk.movie_id)
                                 ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..0.54 rows=2 width=12) (actual time=0.002..0.003 rows=5 loops=199)
                                       Index Cond: (movie_id = mk.movie_id)
                                       Filter: (note IS NULL)
                                       Rows Removed by Filter: 2
                           ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..0.46 rows=1 width=23) (actual time=0.002..0.002 rows=0 loops=1021)
                                 Index Cond: (id = mc.company_id)
                                 Filter: (((country_code)::text <> '[pl]'::text) AND (((name)::text ~~ '%Film%'::text) OR ((name)::text ~~ '%Warner%'::text)))
                                 Rows Removed by Filter: 1
                     ->  Seq Scan on company_type ct  (cost=0.00..1.05 rows=1 width=4) (actual time=0.000..0.001 rows=1 loops=422)
                           Filter: ((kind)::text = 'production companies'::text)
                           Rows Removed by Filter: 1
               ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..1.82 rows=3 width=4) (actual time=0.008..0.011 rows=5 loops=402)
                     Index Cond: (movie_id = mk.movie_id)
                     Filter: ((info)::text = ANY ('{Sweden,Norway,Germany,Denmark,Swedish,Denish,Norwegian,German,English}'::text[]))
                     Rows Removed by Filter: 16
         ->  Index Scan using title_pkey on title t  (cost=0.43..0.49 rows=1 width=21) (actual time=0.001..0.001 rows=1 loops=1874)
               Index Cond: (id = mk.movie_id)
               Filter: ((production_year >= 1950) AND (production_year <= 2010))
 Planning Time: 14.414 ms
 Execution Time: 70.729 ms
(49 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/22a.sql_explained.sql
SET
                                                                                               QUERY PLAN                                                                                                
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=7386.84..7386.85 rows=1 width=96) (actual time=535.192..535.192 rows=1 loops=1)
   ->  Nested Loop  (cost=8.89..7386.83 rows=1 width=42) (actual time=14.234..534.416 rows=2851 loops=1)
         Join Filter: (mi.info_type_id = it1.id)
         Rows Removed by Join Filter: 191
         ->  Nested Loop  (cost=8.89..7384.41 rows=1 width=46) (actual time=14.228..524.923 rows=3042 loops=1)
               Join Filter: (t.id = mi.movie_id)
               ->  Nested Loop  (cost=8.46..7382.82 rows=1 width=58) (actual time=6.435..384.767 rows=2958 loops=1)
                     Join Filter: (mc.company_type_id = ct.id)
                     ->  Nested Loop  (cost=8.46..7381.73 rows=1 width=62) (actual time=6.430..381.967 rows=2958 loops=1)
                           ->  Nested Loop  (cost=8.04..7381.19 rows=1 width=47) (actual time=6.416..368.700 rows=3374 loops=1)
                                 Join Filter: (t.id = mc.movie_id)
                                 ->  Nested Loop  (cost=7.61..7380.61 rows=1 width=35) (actual time=6.388..333.195 rows=2378 loops=1)
                                       Join Filter: (mi_idx.info_type_id = it2.id)
                                       Rows Removed by Join Filter: 6322
                                       ->  Seq Scan on info_type it2  (cost=0.00..2.41 rows=1 width=4) (actual time=0.012..0.013 rows=1 loops=1)
                                             Filter: ((info)::text = 'rating'::text)
                                             Rows Removed by Filter: 112
                                       ->  Nested Loop  (cost=7.61..7377.88 rows=25 width=39) (actual time=4.433..332.309 rows=8700 loops=1)
                                             Join Filter: (t.id = mi_idx.movie_id)
                                             ->  Nested Loop  (cost=7.18..7372.53 rows=10 width=25) (actual time=4.412..302.943 rows=4832 loops=1)
                                                   Join Filter: (t.kind_id = kt.id)
                                                   Rows Removed by Join Filter: 2286
                                                   ->  Nested Loop  (cost=7.18..7370.44 rows=35 width=29) (actual time=4.393..301.020 rows=5606 loops=1)
                                                         ->  Nested Loop  (cost=6.75..7304.56 rows=135 width=4) (actual time=4.324..131.984 rows=37091 loops=1)
                                                               ->  Seq Scan on keyword k  (cost=0.00..2961.55 rows=4 width=4) (actual time=0.905..20.608 rows=3 loops=1)
                                                                     Filter: ((keyword)::text = ANY ('{murder,murder-in-title,blood,violence}'::text[]))
                                                                     Rows Removed by Filter: 134167
                                                               ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1082.76 rows=299 width=8) (actual time=3.398..35.644 rows=12364 loops=3)
                                                                     Recheck Cond: (keyword_id = k.id)
                                                                     Heap Blocks: exact=26312
                                                                     ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=1.859..1.859 rows=12364 loops=3)
                                                                           Index Cond: (keyword_id = k.id)
                                                         ->  Index Scan using title_pkey on title t  (cost=0.43..0.49 rows=1 width=25) (actual time=0.004..0.004 rows=0 loops=37091)
                                                               Index Cond: (id = mk.movie_id)
                                                               Filter: (production_year > 2008)
                                                               Rows Removed by Filter: 1
                                                   ->  Materialize  (cost=0.00..1.10 rows=2 width=4) (actual time=0.000..0.000 rows=1 loops=5606)
                                                         ->  Seq Scan on kind_type kt  (cost=0.00..1.09 rows=2 width=4) (actual time=0.011..0.013 rows=2 loops=1)
                                                               Filter: ((kind)::text = ANY ('{movie,episode}'::text[]))
                                                               Rows Removed by Filter: 5
                                             ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx  (cost=0.43..0.50 rows=3 width=14) (actual time=0.005..0.006 rows=2 loops=4832)
                                                   Index Cond: (movie_id = mk.movie_id)
                                                   Filter: ((info)::text < '7.0'::text)
                                                   Rows Removed by Filter: 0
                                 ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..0.57 rows=1 width=12) (actual time=0.012..0.014 rows=1 loops=2378)
                                       Index Cond: (movie_id = mk.movie_id)
                                       Filter: (((note)::text !~~ '%(USA)%'::text) AND ((note)::text ~~ '%(200%)%'::text))
                                       Rows Removed by Filter: 10
                           ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..0.55 rows=1 width=23) (actual time=0.004..0.004 rows=1 loops=3374)
                                 Index Cond: (id = mc.company_id)
                                 Filter: ((country_code)::text <> '[us]'::text)
                                 Rows Removed by Filter: 0
                     ->  Seq Scan on company_type ct  (cost=0.00..1.04 rows=4 width=4) (actual time=0.000..0.000 rows=1 loops=2958)
               ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..1.56 rows=2 width=8) (actual time=0.043..0.047 rows=1 loops=2958)
                     Index Cond: (movie_id = mk.movie_id)
                     Filter: ((info)::text = ANY ('{Germany,German,USA,American}'::text[]))
                     Rows Removed by Filter: 155
         ->  Seq Scan on info_type it1  (cost=0.00..2.41 rows=1 width=4) (actual time=0.002..0.003 rows=1 loops=3042)
               Filter: ((info)::text = 'countries'::text)
               Rows Removed by Filter: 14
 Planning Time: 37.159 ms
 Execution Time: 535.398 ms
(62 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/22b.sql_explained.sql
SET
                                                                                               QUERY PLAN                                                                                                
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=7385.52..7385.53 rows=1 width=96) (actual time=356.396..356.397 rows=1 loops=1)
   ->  Nested Loop  (cost=8.89..7385.51 rows=1 width=42) (actual time=17.511..356.369 rows=31 loops=1)
         Join Filter: (mi.info_type_id = it1.id)
         Rows Removed by Join Filter: 3
         ->  Nested Loop  (cost=8.89..7383.09 rows=1 width=46) (actual time=17.506..356.224 rows=34 loops=1)
               Join Filter: (t.id = mi.movie_id)
               ->  Nested Loop  (cost=8.46..7381.50 rows=1 width=58) (actual time=17.417..353.150 rows=50 loops=1)
                     Join Filter: (mc.company_type_id = ct.id)
                     ->  Nested Loop  (cost=8.46..7380.41 rows=1 width=62) (actual time=17.412..353.066 rows=50 loops=1)
                           ->  Nested Loop  (cost=8.04..7379.87 rows=1 width=47) (actual time=17.400..352.481 rows=78 loops=1)
                                 Join Filter: (t.id = mc.movie_id)
                                 ->  Nested Loop  (cost=7.61..7379.29 rows=1 width=35) (actual time=7.885..328.935 rows=1615 loops=1)
                                       Join Filter: (mi_idx.info_type_id = it2.id)
                                       Rows Removed by Join Filter: 4362
                                       ->  Seq Scan on info_type it2  (cost=0.00..2.41 rows=1 width=4) (actual time=0.012..0.013 rows=1 loops=1)
                                             Filter: ((info)::text = 'rating'::text)
                                             Rows Removed by Filter: 112
                                       ->  Nested Loop  (cost=7.61..7376.61 rows=21 width=39) (actual time=4.560..328.310 rows=5977 loops=1)
                                             Join Filter: (t.id = mi_idx.movie_id)
                                             ->  Nested Loop  (cost=7.18..7372.33 rows=8 width=25) (actual time=4.538..306.915 rows=3517 loops=1)
                                                   Join Filter: (t.kind_id = kt.id)
                                                   Rows Removed by Join Filter: 1618
                                                   ->  Nested Loop  (cost=7.18..7370.44 rows=28 width=29) (actual time=4.522..305.537 rows=4040 loops=1)
                                                         ->  Nested Loop  (cost=6.75..7304.56 rows=135 width=4) (actual time=4.454..140.156 rows=37091 loops=1)
                                                               ->  Seq Scan on keyword k  (cost=0.00..2961.55 rows=4 width=4) (actual time=1.118..20.694 rows=3 loops=1)
                                                                     Filter: ((keyword)::text = ANY ('{murder,murder-in-title,blood,violence}'::text[]))
                                                                     Rows Removed by Filter: 134167
                                                               ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1082.76 rows=299 width=8) (actual time=3.367..38.345 rows=12364 loops=3)
                                                                     Recheck Cond: (keyword_id = k.id)
                                                                     Heap Blocks: exact=26312
                                                                     ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=1.834..1.834 rows=12364 loops=3)
                                                                           Index Cond: (keyword_id = k.id)
                                                         ->  Index Scan using title_pkey on title t  (cost=0.43..0.49 rows=1 width=25) (actual time=0.004..0.004 rows=0 loops=37091)
                                                               Index Cond: (id = mk.movie_id)
                                                               Filter: (production_year > 2009)
                                                               Rows Removed by Filter: 1
                                                   ->  Materialize  (cost=0.00..1.10 rows=2 width=4) (actual time=0.000..0.000 rows=1 loops=4040)
                                                         ->  Seq Scan on kind_type kt  (cost=0.00..1.09 rows=2 width=4) (actual time=0.010..0.011 rows=2 loops=1)
                                                               Filter: ((kind)::text = ANY ('{movie,episode}'::text[]))
                                                               Rows Removed by Filter: 5
                                             ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx  (cost=0.43..0.50 rows=3 width=14) (actual time=0.005..0.006 rows=2 loops=3517)
                                                   Index Cond: (movie_id = mk.movie_id)
                                                   Filter: ((info)::text < '7.0'::text)
                                                   Rows Removed by Filter: 0
                                 ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..0.57 rows=1 width=12) (actual time=0.014..0.014 rows=0 loops=1615)
                                       Index Cond: (movie_id = mk.movie_id)
                                       Filter: (((note)::text !~~ '%(USA)%'::text) AND ((note)::text ~~ '%(200%)%'::text))
                                       Rows Removed by Filter: 12
                           ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..0.55 rows=1 width=23) (actual time=0.007..0.007 rows=1 loops=78)
                                 Index Cond: (id = mc.company_id)
                                 Filter: ((country_code)::text <> '[us]'::text)
                                 Rows Removed by Filter: 0
                     ->  Seq Scan on company_type ct  (cost=0.00..1.04 rows=4 width=4) (actual time=0.001..0.001 rows=1 loops=50)
               ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..1.56 rows=2 width=8) (actual time=0.056..0.061 rows=1 loops=50)
                     Index Cond: (movie_id = mk.movie_id)
                     Filter: ((info)::text = ANY ('{Germany,German,USA,American}'::text[]))
                     Rows Removed by Filter: 53
         ->  Seq Scan on info_type it1  (cost=0.00..2.41 rows=1 width=4) (actual time=0.003..0.003 rows=1 loops=34)
               Filter: ((info)::text = 'countries'::text)
               Rows Removed by Filter: 16
 Planning Time: 38.092 ms
 Execution Time: 356.602 ms
(62 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/22c.sql_explained.sql
SET
                                                                                               QUERY PLAN                                                                                                
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=7390.61..7390.62 rows=1 width=96) (actual time=2339.031..2339.032 rows=1 loops=1)
   ->  Nested Loop  (cost=8.89..7390.60 rows=1 width=42) (actual time=6.012..2333.371 rows=21489 loops=1)
         Join Filter: (mi.info_type_id = it1.id)
         Rows Removed by Join Filter: 3123
         ->  Nested Loop  (cost=8.89..7388.18 rows=1 width=46) (actual time=6.007..2247.629 rows=24612 loops=1)
               Join Filter: (t.id = mi.movie_id)
               ->  Nested Loop  (cost=8.46..7386.28 rows=1 width=58) (actual time=5.950..538.099 rows=23425 loops=1)
                     Join Filter: (mc.company_type_id = ct.id)
                     ->  Nested Loop  (cost=8.46..7385.19 rows=1 width=62) (actual time=5.940..516.599 rows=23425 loops=1)
                           ->  Nested Loop  (cost=8.04..7384.64 rows=1 width=47) (actual time=5.928..446.416 rows=25316 loops=1)
                                 Join Filter: (t.id = mc.movie_id)
                                 ->  Nested Loop  (cost=7.61..7384.06 rows=1 width=35) (actual time=4.579..360.799 rows=5949 loops=1)
                                       Join Filter: (mi_idx.info_type_id = it2.id)
                                       Rows Removed by Join Filter: 11839
                                       ->  Seq Scan on info_type it2  (cost=0.00..2.41 rows=1 width=4) (actual time=0.012..0.014 rows=1 loops=1)
                                             Filter: ((info)::text = 'rating'::text)
                                             Rows Removed by Filter: 112
                                       ->  Nested Loop  (cost=7.61..7381.10 rows=44 width=39) (actual time=4.563..358.928 rows=17788 loops=1)
                                             Join Filter: (t.id = mi_idx.movie_id)
                                             ->  Nested Loop  (cost=7.18..7373.07 rows=15 width=25) (actual time=4.543..311.739 rows=8073 loops=1)
                                                   Join Filter: (t.kind_id = kt.id)
                                                   Rows Removed by Join Filter: 4332
                                                   ->  Nested Loop  (cost=7.18..7370.44 rows=54 width=29) (actual time=4.478..308.373 rows=9739 loops=1)
                                                         ->  Nested Loop  (cost=6.75..7304.56 rows=135 width=4) (actual time=4.452..137.029 rows=37091 loops=1)
                                                               ->  Seq Scan on keyword k  (cost=0.00..2961.55 rows=4 width=4) (actual time=1.123..20.847 rows=3 loops=1)
                                                                     Filter: ((keyword)::text = ANY ('{murder,murder-in-title,blood,violence}'::text[]))
                                                                     Rows Removed by Filter: 134167
                                                               ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1082.76 rows=299 width=8) (actual time=3.367..37.289 rows=12364 loops=3)
                                                                     Recheck Cond: (keyword_id = k.id)
                                                                     Heap Blocks: exact=26312
                                                                     ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=1.845..1.845 rows=12364 loops=3)
                                                                           Index Cond: (keyword_id = k.id)
                                                         ->  Index Scan using title_pkey on title t  (cost=0.43..0.49 rows=1 width=25) (actual time=0.004..0.004 rows=0 loops=37091)
                                                               Index Cond: (id = mk.movie_id)
                                                               Filter: (production_year > 2005)
                                                               Rows Removed by Filter: 1
                                                   ->  Materialize  (cost=0.00..1.10 rows=2 width=4) (actual time=0.000..0.000 rows=1 loops=9739)
                                                         ->  Seq Scan on kind_type kt  (cost=0.00..1.09 rows=2 width=4) (actual time=0.011..0.012 rows=2 loops=1)
                                                               Filter: ((kind)::text = ANY ('{movie,episode}'::text[]))
                                                               Rows Removed by Filter: 5
                                             ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx  (cost=0.43..0.50 rows=3 width=14) (actual time=0.005..0.005 rows=2 loops=8073)
                                                   Index Cond: (movie_id = mk.movie_id)
                                                   Filter: ((info)::text < '8.5'::text)
                                                   Rows Removed by Filter: 0
                                 ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..0.57 rows=1 width=12) (actual time=0.009..0.013 rows=4 loops=5949)
                                       Index Cond: (movie_id = mk.movie_id)
                                       Filter: (((note)::text !~~ '%(USA)%'::text) AND ((note)::text ~~ '%(200%)%'::text))
                                       Rows Removed by Filter: 8
                           ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..0.55 rows=1 width=23) (actual time=0.002..0.002 rows=1 loops=25316)
                                 Index Cond: (id = mc.company_id)
                                 Filter: ((country_code)::text <> '[us]'::text)
                                 Rows Removed by Filter: 0
                     ->  Seq Scan on company_type ct  (cost=0.00..1.04 rows=4 width=4) (actual time=0.000..0.000 rows=1 loops=23425)
               ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..1.87 rows=2 width=8) (actual time=0.061..0.073 rows=1 loops=23425)
                     Index Cond: (movie_id = mk.movie_id)
                     Filter: ((info)::text = ANY ('{Sweden,Norway,Germany,Denmark,Swedish,Danish,Norwegian,German,USA,American}'::text[]))
                     Rows Removed by Filter: 180
         ->  Seq Scan on info_type it1  (cost=0.00..2.41 rows=1 width=4) (actual time=0.002..0.003 rows=1 loops=24612)
               Filter: ((info)::text = 'countries'::text)
               Rows Removed by Filter: 20
 Planning Time: 38.245 ms
 Execution Time: 2339.238 ms
(62 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/22d.sql_explained.sql
SET
                                                                                               QUERY PLAN                                                                                                
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=7390.53..7390.54 rows=1 width=96) (actual time=1015.788..1015.788 rows=1 loops=1)
   ->  Nested Loop  (cost=8.89..7390.53 rows=1 width=42) (actual time=6.152..1005.686 rows=46281 loops=1)
         Join Filter: (mc.company_type_id = ct.id)
         Rows Removed by Join Filter: 4783
         ->  Nested Loop  (cost=8.89..7389.44 rows=1 width=46) (actual time=6.144..968.279 rows=46281 loops=1)
               ->  Nested Loop  (cost=8.47..7388.99 rows=1 width=31) (actual time=4.618..807.957 rows=64848 loops=1)
                     Join Filter: (t.id = mc.movie_id)
                     ->  Nested Loop  (cost=8.04..7388.39 rows=1 width=39) (actual time=4.604..751.704 rows=4115 loops=1)
                           Join Filter: (mi.info_type_id = it1.id)
                           Rows Removed by Join Filter: 594
                           ->  Nested Loop  (cost=8.04..7385.96 rows=1 width=43) (actual time=4.600..734.408 rows=4709 loops=1)
                                 Join Filter: (t.id = mi.movie_id)
                                 ->  Nested Loop  (cost=7.61..7384.06 rows=1 width=35) (actual time=4.557..354.938 rows=5949 loops=1)
                                       Join Filter: (mi_idx.info_type_id = it2.id)
                                       Rows Removed by Join Filter: 11839
                                       ->  Seq Scan on info_type it2  (cost=0.00..2.41 rows=1 width=4) (actual time=0.012..0.013 rows=1 loops=1)
                                             Filter: ((info)::text = 'rating'::text)
                                             Rows Removed by Filter: 112
                                       ->  Nested Loop  (cost=7.61..7381.10 rows=44 width=39) (actual time=4.541..353.070 rows=17788 loops=1)
                                             Join Filter: (t.id = mi_idx.movie_id)
                                             ->  Nested Loop  (cost=7.18..7373.07 rows=15 width=25) (actual time=4.526..306.942 rows=8073 loops=1)
                                                   Join Filter: (t.kind_id = kt.id)
                                                   Rows Removed by Join Filter: 4332
                                                   ->  Nested Loop  (cost=7.18..7370.44 rows=54 width=29) (actual time=4.475..303.599 rows=9739 loops=1)
                                                         ->  Nested Loop  (cost=6.75..7304.56 rows=135 width=4) (actual time=4.457..134.721 rows=37091 loops=1)
                                                               ->  Seq Scan on keyword k  (cost=0.00..2961.55 rows=4 width=4) (actual time=1.132..21.191 rows=3 loops=1)
                                                                     Filter: ((keyword)::text = ANY ('{murder,murder-in-title,blood,violence}'::text[]))
                                                                     Rows Removed by Filter: 134167
                                                               ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1082.76 rows=299 width=8) (actual time=3.367..36.477 rows=12364 loops=3)
                                                                     Recheck Cond: (keyword_id = k.id)
                                                                     Heap Blocks: exact=26312
                                                                     ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=1.839..1.839 rows=12364 loops=3)
                                                                           Index Cond: (keyword_id = k.id)
                                                         ->  Index Scan using title_pkey on title t  (cost=0.43..0.49 rows=1 width=25) (actual time=0.004..0.004 rows=0 loops=37091)
                                                               Index Cond: (id = mk.movie_id)
                                                               Filter: (production_year > 2005)
                                                               Rows Removed by Filter: 1
                                                   ->  Materialize  (cost=0.00..1.10 rows=2 width=4) (actual time=0.000..0.000 rows=1 loops=9739)
                                                         ->  Seq Scan on kind_type kt  (cost=0.00..1.09 rows=2 width=4) (actual time=0.007..0.008 rows=2 loops=1)
                                                               Filter: ((kind)::text = ANY ('{movie,episode}'::text[]))
                                                               Rows Removed by Filter: 5
                                             ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx  (cost=0.43..0.50 rows=3 width=14) (actual time=0.005..0.005 rows=2 loops=8073)
                                                   Index Cond: (movie_id = mk.movie_id)
                                                   Filter: ((info)::text < '8.5'::text)
                                                   Rows Removed by Filter: 0
                                 ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..1.87 rows=2 width=8) (actual time=0.055..0.063 rows=1 loops=5949)
                                       Index Cond: (movie_id = mk.movie_id)
                                       Filter: ((info)::text = ANY ('{Sweden,Norway,Germany,Denmark,Swedish,Danish,Norwegian,German,USA,American}'::text[]))
                                       Rows Removed by Filter: 71
                           ->  Seq Scan on info_type it1  (cost=0.00..2.41 rows=1 width=4) (actual time=0.002..0.003 rows=1 loops=4709)
                                 Filter: ((info)::text = 'countries'::text)
                                 Rows Removed by Filter: 20
                     ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..0.54 rows=5 width=12) (actual time=0.006..0.011 rows=16 loops=4115)
                           Index Cond: (movie_id = mk.movie_id)
               ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..0.45 rows=1 width=23) (actual time=0.002..0.002 rows=1 loops=64848)
                     Index Cond: (id = mc.company_id)
                     Filter: ((country_code)::text <> '[us]'::text)
                     Rows Removed by Filter: 0
         ->  Seq Scan on company_type ct  (cost=0.00..1.04 rows=4 width=4) (actual time=0.000..0.000 rows=1 loops=46281)
 Planning Time: 39.839 ms
 Execution Time: 1015.993 ms
(61 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/23a.sql_explained.sql
SET
                                                                                                    QUERY PLAN                                                                                                    
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=57942.47..57942.48 rows=1 width=64) (actual time=256.202..256.202 rows=1 loops=1)
   ->  Nested Loop  (cost=4238.90..57942.46 rows=1 width=65) (actual time=251.221..256.082 rows=618 loops=1)
         ->  Nested Loop  (cost=4238.48..57942.02 rows=1 width=69) (actual time=251.198..254.003 rows=618 loops=1)
               ->  Nested Loop  (cost=4238.35..57941.87 rows=1 width=73) (actual time=251.164..253.394 rows=618 loops=1)
                     ->  Nested Loop  (cost=4237.93..57941.42 rows=1 width=77) (actual time=251.145..252.429 rows=618 loops=1)
                           Join Filter: (t.id = mc.movie_id)
                           ->  Nested Loop  (cost=4237.50..57940.82 rows=1 width=85) (actual time=251.119..251.338 rows=615 loops=1)
                                 ->  Gather  (cost=4237.06..57938.99 rows=1 width=77) (actual time=251.081..251.162 rows=5 loops=1)
                                       Workers Planned: 2
                                       Workers Launched: 2
                                       ->  Nested Loop  (cost=3237.06..56938.89 rows=1 width=77) (actual time=231.914..248.471 rows=2 loops=3)
                                             ->  Nested Loop  (cost=3236.92..56938.62 rows=1 width=81) (actual time=231.896..248.450 rows=2 loops=3)
                                                   ->  Hash Join  (cost=3236.49..54660.05 rows=1093 width=73) (actual time=131.373..187.219 rows=344 loops=3)
                                                         Hash Cond: (t.kind_id = kt.id)
                                                         ->  Hash Join  (cost=3235.39..54626.70 rows=7653 width=29) (actual time=28.369..187.005 rows=694 loops=3)
                                                               Hash Cond: (t.id = cc.movie_id)
                                                               ->  Parallel Seq Scan on title t  (cost=0.00..49166.29 rows=572932 width=25) (actual time=0.016..112.068 rows=460484 loops=3)
                                                                     Filter: (production_year > 2000)
                                                                     Rows Removed by Filter: 382286
                                                               ->  Hash  (cost=2813.24..2813.24 rows=33772 width=4) (actual time=27.824..27.824 rows=24592 loops=3)
                                                                     Buckets: 65536  Batches: 1  Memory Usage: 1377kB
                                                                     ->  Hash Join  (cost=1.06..2813.24 rows=33772 width=4) (actual time=0.039..24.557 rows=24592 loops=3)
                                                                           Hash Cond: (cc.status_id = cct1.id)
                                                                           ->  Seq Scan on complete_cast cc  (cost=0.00..2081.86 rows=135086 width=8) (actual time=0.011..11.997 rows=135086 loops=3)
                                                                           ->  Hash  (cost=1.05..1.05 rows=1 width=4) (actual time=0.013..0.013 rows=1 loops=3)
                                                                                 Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                                                 ->  Seq Scan on comp_cast_type cct1  (cost=0.00..1.05 rows=1 width=4) (actual time=0.006..0.006 rows=1 loops=3)
                                                                                       Filter: ((kind)::text = 'complete+verified'::text)
                                                                                       Rows Removed by Filter: 3
                                                         ->  Hash  (cost=1.09..1.09 rows=1 width=52) (actual time=0.022..0.022 rows=1 loops=3)
                                                               Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                               ->  Seq Scan on kind_type kt  (cost=0.00..1.09 rows=1 width=52) (actual time=0.015..0.016 rows=1 loops=3)
                                                                     Filter: ((kind)::text = 'movie'::text)
                                                                     Rows Removed by Filter: 6
                                                   ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..2.07 rows=1 width=8) (actual time=0.177..0.178 rows=0 loops=1033)
                                                         Index Cond: (movie_id = t.id)
                                                         Filter: ((info IS NOT NULL) AND ((note)::text ~~ '%internet%'::text) AND (((info)::text ~~ 'USA:% 199%'::text) OR ((info)::text ~~ 'USA:% 200%'::text)))
                                                         Rows Removed by Filter: 211
                                             ->  Index Scan using info_type_pkey on info_type it1  (cost=0.14..0.20 rows=1 width=4) (actual time=0.011..0.011 rows=1 loops=5)
                                                   Index Cond: (id = mi.info_type_id)
                                                   Filter: ((info)::text = 'release dates'::text)
                                 ->  Index Scan using movie_id_movie_keyword on movie_keyword mk  (cost=0.43..1.36 rows=47 width=8) (actual time=0.012..0.032 rows=123 loops=5)
                                       Index Cond: (movie_id = t.id)
                           ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..0.54 rows=5 width=12) (actual time=0.001..0.001 rows=1 loops=615)
                                 Index Cond: (movie_id = mk.movie_id)
                     ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..0.45 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=618)
                           Index Cond: (id = mc.company_id)
                           Filter: ((country_code)::text = '[us]'::text)
               ->  Index Only Scan using company_type_pkey on company_type ct  (cost=0.13..0.15 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=618)
                     Index Cond: (id = mc.company_type_id)
                     Heap Fetches: 618
         ->  Index Only Scan using keyword_pkey on keyword k  (cost=0.42..0.44 rows=1 width=4) (actual time=0.003..0.003 rows=1 loops=618)
               Index Cond: (id = mk.keyword_id)
               Heap Fetches: 618
 Planning Time: 37.179 ms
 Execution Time: 256.554 ms
(56 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/23b.sql_explained.sql
SET
                                                                                              QUERY PLAN                                                                                               
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=7387.30..7387.31 rows=1 width=64) (actual time=73.559..73.559 rows=1 loops=1)
   ->  Nested Loop  (cost=8.88..7387.29 rows=1 width=65) (actual time=19.844..73.545 rows=16 loops=1)
         Join Filter: (mi.info_type_id = it1.id)
         ->  Nested Loop  (cost=8.88..7384.87 rows=1 width=69) (actual time=19.838..73.484 rows=16 loops=1)
               Join Filter: (t.id = mi.movie_id)
               ->  Nested Loop  (cost=8.45..7383.30 rows=1 width=81) (actual time=3.927..54.699 rows=315 loops=1)
                     Join Filter: (mc.company_type_id = ct.id)
                     Rows Removed by Join Filter: 140
                     ->  Nested Loop  (cost=8.45..7382.21 rows=1 width=85) (actual time=3.917..54.358 rows=315 loops=1)
                           ->  Nested Loop  (cost=8.03..7380.87 rows=3 width=89) (actual time=3.860..48.833 rows=1218 loops=1)
                                 Join Filter: (t.id = mc.movie_id)
                                 ->  Nested Loop  (cost=7.60..7378.46 rows=4 width=77) (actual time=3.834..47.306 rows=60 loops=1)
                                       Join Filter: (cc.status_id = cct1.id)
                                       Rows Removed by Join Filter: 81
                                       ->  Seq Scan on comp_cast_type cct1  (cost=0.00..1.05 rows=1 width=4) (actual time=0.010..0.010 rows=1 loops=1)
                                             Filter: ((kind)::text = 'complete+verified'::text)
                                             Rows Removed by Filter: 3
                                       ->  Nested Loop  (cost=7.60..7377.22 rows=15 width=81) (actual time=3.812..47.271 rows=141 loops=1)
                                             ->  Nested Loop  (cost=7.18..7372.44 rows=10 width=73) (actual time=3.615..45.073 rows=401 loops=1)
                                                   Join Filter: (t.kind_id = kt.id)
                                                   Rows Removed by Join Filter: 156
                                                   ->  Seq Scan on kind_type kt  (cost=0.00..1.09 rows=1 width=52) (actual time=0.006..0.007 rows=1 loops=1)
                                                         Filter: ((kind)::text = 'movie'::text)
                                                         Rows Removed by Filter: 6
                                                   ->  Nested Loop  (cost=7.18..7370.44 rows=73 width=29) (actual time=0.885..44.971 rows=557 loops=1)
                                                         ->  Nested Loop  (cost=6.75..7304.56 rows=135 width=4) (actual time=0.865..30.970 rows=1133 loops=1)
                                                               ->  Seq Scan on keyword k  (cost=0.00..2961.55 rows=4 width=4) (actual time=0.654..23.095 rows=4 loops=1)
                                                                     Filter: ((keyword)::text = ANY ('{nerd,loner,alienation,dignity}'::text[]))
                                                                     Rows Removed by Filter: 134166
                                                               ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1082.76 rows=299 width=8) (actual time=0.099..1.930 rows=283 loops=4)
                                                                     Recheck Cond: (keyword_id = k.id)
                                                                     Heap Blocks: exact=1083
                                                                     ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=0.055..0.055 rows=283 loops=4)
                                                                           Index Cond: (keyword_id = k.id)
                                                         ->  Index Scan using title_pkey on title t  (cost=0.43..0.49 rows=1 width=25) (actual time=0.012..0.012 rows=0 loops=1133)
                                                               Index Cond: (id = mk.movie_id)
                                                               Filter: (production_year > 2000)
                                                               Rows Removed by Filter: 1
                                             ->  Index Scan using movie_id_complete_cast on complete_cast cc  (cost=0.42..0.46 rows=2 width=8) (actual time=0.005..0.005 rows=0 loops=401)
                                                   Index Cond: (movie_id = t.id)
                                 ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..0.54 rows=5 width=12) (actual time=0.013..0.021 rows=20 loops=60)
                                       Index Cond: (movie_id = mk.movie_id)
                           ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..0.45 rows=1 width=4) (actual time=0.004..0.004 rows=0 loops=1218)
                                 Index Cond: (id = mc.company_id)
                                 Filter: ((country_code)::text = '[us]'::text)
                                 Rows Removed by Filter: 1
                     ->  Seq Scan on company_type ct  (cost=0.00..1.04 rows=4 width=4) (actual time=0.000..0.000 rows=1 loops=315)
               ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..1.56 rows=1 width=8) (actual time=0.059..0.059 rows=0 loops=315)
                     Index Cond: (movie_id = mk.movie_id)
                     Filter: (((note)::text ~~ '%internet%'::text) AND ((info)::text ~~ 'USA:% 200%'::text))
                     Rows Removed by Filter: 268
         ->  Seq Scan on info_type it1  (cost=0.00..2.41 rows=1 width=4) (actual time=0.003..0.003 rows=1 loops=16)
               Filter: ((info)::text = 'release dates'::text)
               Rows Removed by Filter: 15
 Planning Time: 37.182 ms
 Execution Time: 73.756 ms
(56 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/23c.sql_explained.sql
SET
                                                                                                       QUERY PLAN                                                                                                       
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=67112.66..67112.67 rows=1 width=64) (actual time=354.146..354.146 rows=1 loops=1)
   ->  Gather  (cost=67112.44..67112.65 rows=2 width=64) (actual time=353.967..363.377 rows=3 loops=1)
         Workers Planned: 2
         Workers Launched: 2
         ->  Partial Aggregate  (cost=66112.44..66112.45 rows=1 width=64) (actual time=351.214..351.214 rows=1 loops=3)
               ->  Nested Loop  (cost=3238.95..66112.43 rows=2 width=65) (actual time=273.887..351.166 rows=209 loops=3)
                     ->  Nested Loop  (cost=3238.53..66111.55 rows=2 width=69) (actual time=273.857..350.423 rows=209 loops=3)
                           ->  Nested Loop  (cost=3238.10..66109.74 rows=1 width=81) (actual time=273.819..350.321 rows=2 loops=3)
                                 ->  Nested Loop  (cost=3237.97..66109.58 rows=1 width=85) (actual time=273.789..350.287 rows=2 loops=3)
                                       ->  Nested Loop  (cost=3237.55..66109.14 rows=1 width=89) (actual time=273.750..350.239 rows=2 loops=3)
                                             ->  Nested Loop  (cost=3237.12..66108.51 rows=1 width=77) (actual time=273.717..350.198 rows=2 loops=3)
                                                   ->  Nested Loop  (cost=3236.98..66107.43 rows=5 width=81) (actual time=273.690..350.169 rows=2 loops=3)
                                                         ->  Hash Join  (cost=3236.54..55258.37 rows=5532 width=73) (actual time=134.158..202.468 rows=1684 loops=3)
                                                               Hash Cond: (t.kind_id = kt.id)
                                                               ->  Hash Join  (cost=3235.39..55216.42 rows=9681 width=29) (actual time=28.331..201.923 rows=2141 loops=3)
                                                                     Hash Cond: (t.id = cc.movie_id)
                                                                     ->  Parallel Seq Scan on title t  (cost=0.00..49166.29 rows=724782 width=25) (actual time=0.023..114.462 rows=583011 loops=3)
                                                                           Filter: (production_year > 1990)
                                                                           Rows Removed by Filter: 259760
                                                                     ->  Hash  (cost=2813.24..2813.24 rows=33772 width=4) (actual time=27.815..27.815 rows=24592 loops=3)
                                                                           Buckets: 65536  Batches: 1  Memory Usage: 1377kB
                                                                           ->  Hash Join  (cost=1.06..2813.24 rows=33772 width=4) (actual time=0.032..24.568 rows=24592 loops=3)
                                                                                 Hash Cond: (cc.status_id = cct1.id)
                                                                                 ->  Seq Scan on complete_cast cc  (cost=0.00..2081.86 rows=135086 width=8) (actual time=0.011..12.051 rows=135086 loops=3)
                                                                                 ->  Hash  (cost=1.05..1.05 rows=1 width=4) (actual time=0.007..0.007 rows=1 loops=3)
                                                                                       Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                                                       ->  Seq Scan on comp_cast_type cct1  (cost=0.00..1.05 rows=1 width=4) (actual time=0.004..0.004 rows=1 loops=3)
                                                                                             Filter: ((kind)::text = 'complete+verified'::text)
                                                                                             Rows Removed by Filter: 3
                                                               ->  Hash  (cost=1.10..1.10 rows=4 width=52) (actual time=0.020..0.020 rows=4 loops=3)
                                                                     Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                                     ->  Seq Scan on kind_type kt  (cost=0.00..1.10 rows=4 width=52) (actual time=0.011..0.014 rows=4 loops=3)
                                                                           Filter: ((kind)::text = ANY ('{movie,"tv movie","video movie","video game"}'::text[]))
                                                                           Rows Removed by Filter: 3
                                                         ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..1.95 rows=1 width=8) (actual time=0.087..0.087 rows=0 loops=5053)
                                                               Index Cond: (movie_id = t.id)
                                                               Filter: ((info IS NOT NULL) AND ((note)::text ~~ '%internet%'::text) AND (((info)::text ~~ 'USA:% 199%'::text) OR ((info)::text ~~ 'USA:% 200%'::text)))
                                                               Rows Removed by Filter: 123
                                                   ->  Index Scan using info_type_pkey on info_type it1  (cost=0.14..0.20 rows=1 width=4) (actual time=0.013..0.013 rows=1 loops=6)
                                                         Index Cond: (id = mi.info_type_id)
                                                         Filter: ((info)::text = 'release dates'::text)
                                             ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..0.58 rows=5 width=12) (actual time=0.017..0.019 rows=1 loops=6)
                                                   Index Cond: (movie_id = t.id)
                                       ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..0.45 rows=1 width=4) (actual time=0.019..0.019 rows=1 loops=7)
                                             Index Cond: (id = mc.company_id)
                                             Filter: ((country_code)::text = '[us]'::text)
                                 ->  Index Only Scan using company_type_pkey on company_type ct  (cost=0.13..0.15 rows=1 width=4) (actual time=0.013..0.013 rows=1 loops=7)
                                       Index Cond: (id = mc.company_type_id)
                                       Heap Fetches: 7
                           ->  Index Scan using movie_id_movie_keyword on movie_keyword mk  (cost=0.43..1.34 rows=47 width=8) (actual time=0.017..0.032 rows=90 loops=7)
                                 Index Cond: (movie_id = t.id)
                     ->  Index Only Scan using keyword_pkey on keyword k  (cost=0.42..0.44 rows=1 width=4) (actual time=0.003..0.003 rows=1 loops=628)
                           Index Cond: (id = mk.keyword_id)
                           Heap Fetches: 628
 Planning Time: 36.054 ms
 Execution Time: 363.677 ms
(56 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/24a.sql_explained.sql
SET
                                                                                                  QUERY PLAN                                                                                                  
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=6625.30..6625.31 rows=1 width=96) (actual time=429.736..429.736 rows=1 loops=1)
   ->  Nested Loop  (cost=10.31..6625.29 rows=1 width=48) (actual time=78.602..429.652 rows=275 loops=1)
         ->  Nested Loop  (cost=9.88..6623.49 rows=1 width=41) (actual time=2.221..416.356 rows=6518 loops=1)
               Join Filter: (it.id = mi.info_type_id)
               ->  Seq Scan on info_type it  (cost=0.00..2.41 rows=1 width=4) (actual time=0.008..0.015 rows=1 loops=1)
                     Filter: ((info)::text = 'release dates'::text)
                     Rows Removed by Filter: 112
               ->  Nested Loop  (cost=9.88..6621.07 rows=1 width=45) (actual time=2.212..415.402 rows=6518 loops=1)
                     Join Filter: (t.id = mi.movie_id)
                     ->  Nested Loop  (cost=9.45..6555.77 rows=2 width=57) (actual time=2.165..342.656 rows=4044 loops=1)
                           ->  Nested Loop  (cost=9.02..6553.68 rows=1 width=53) (actual time=2.133..336.269 rows=1578 loops=1)
                                 ->  Nested Loop  (cost=8.59..6551.98 rows=1 width=41) (actual time=2.100..330.066 rows=1608 loops=1)
                                       Join Filter: (rt.id = ci.role_id)
                                       Rows Removed by Join Filter: 5708
                                       ->  Seq Scan on role_type rt  (cost=0.00..1.15 rows=1 width=4) (actual time=0.012..0.013 rows=1 loops=1)
                                             Filter: ((role)::text = 'actress'::text)
                                             Rows Removed by Filter: 11
                                       ->  Nested Loop  (cost=8.59..6550.80 rows=2 width=45) (actual time=2.067..329.429 rows=7316 loops=1)
                                             Join Filter: (t.id = ci.movie_id)
                                             ->  Nested Loop  (cost=8.03..6311.77 rows=6 width=29) (actual time=1.214..151.105 rows=1576 loops=1)
                                                   ->  Nested Loop  (cost=7.61..6286.76 rows=17 width=33) (actual time=1.192..129.630 rows=5566 loops=1)
                                                         Join Filter: (t.id = mc.movie_id)
                                                         ->  Nested Loop  (cost=7.18..6231.61 rows=16 width=25) (actual time=1.168..121.683 rows=495 loops=1)
                                                               ->  Nested Loop  (cost=6.75..6072.14 rows=101 width=4) (actual time=1.006..56.958 rows=9696 loops=1)
                                                                     ->  Seq Scan on keyword k  (cost=0.00..2793.84 rows=3 width=4) (actual time=0.017..18.508 rows=3 loops=1)
                                                                           Filter: ((keyword)::text = ANY ('{hero,martial-arts,hand-to-hand-combat}'::text[]))
                                                                           Rows Removed by Filter: 134167
                                                                     ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1089.78 rows=299 width=8) (actual time=0.933..12.378 rows=3232 loops=3)
                                                                           Recheck Cond: (keyword_id = k.id)
                                                                           Heap Blocks: exact=7446
                                                                           ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=0.546..0.546 rows=3232 loops=3)
                                                                                 Index Cond: (keyword_id = k.id)
                                                               ->  Index Scan using title_pkey on title t  (cost=0.43..1.58 rows=1 width=21) (actual time=0.006..0.006 rows=0 loops=9696)
                                                                     Index Cond: (id = mk.movie_id)
                                                                     Filter: (production_year > 2010)
                                                                     Rows Removed by Filter: 1
                                                         ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..3.38 rows=5 width=8) (actual time=0.009..0.014 rows=11 loops=495)
                                                               Index Cond: (movie_id = mk.movie_id)
                                                   ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..1.47 rows=1 width=4) (actual time=0.004..0.004 rows=0 loops=5566)
                                                         Index Cond: (id = mc.company_id)
                                                         Filter: ((country_code)::text = '[us]'::text)
                                                         Rows Removed by Filter: 1
                                             ->  Index Scan using movie_id_cast_info on cast_info ci  (cost=0.56..39.83 rows=1 width=16) (actual time=0.075..0.112 rows=5 loops=1576)
                                                   Index Cond: (movie_id = mk.movie_id)
                                                   Filter: ((note)::text = ANY ('{(voice),"(voice: Japanese version)","(voice) (uncredited)","(voice: English version)"}'::text[]))
                                                   Rows Removed by Filter: 136
                                 ->  Index Scan using char_name_pkey on char_name chn  (cost=0.43..1.70 rows=1 width=20) (actual time=0.003..0.003 rows=1 loops=1608)
                                       Index Cond: (id = ci.person_role_id)
                           ->  Index Only Scan using person_id_aka_name on aka_name an  (cost=0.42..2.08 rows=2 width=4) (actual time=0.003..0.003 rows=3 loops=1578)
                                 Index Cond: (person_id = ci.person_id)
                                 Heap Fetches: 4044
                     ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..32.63 rows=1 width=8) (actual time=0.004..0.018 rows=2 loops=4044)
                           Index Cond: (movie_id = mk.movie_id)
                           Filter: ((info IS NOT NULL) AND (((info)::text ~~ 'Japan:%201%'::text) OR ((info)::text ~~ 'USA:%201%'::text)))
                           Rows Removed by Filter: 57
         ->  Index Scan using name_pkey on name n  (cost=0.43..1.80 rows=1 width=19) (actual time=0.002..0.002 rows=0 loops=6518)
               Index Cond: (id = ci.person_id)
               Filter: (((name)::text ~~ '%An%'::text) AND ((gender)::text = 'f'::text))
               Rows Removed by Filter: 1
 Planning Time: 81.691 ms
 Execution Time: 429.992 ms
(61 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/24b.sql_explained.sql
SET
                                                                                                            QUERY PLAN                                                                                                            
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=6509.33..6509.34 rows=1 width=96) (actual time=27.655..27.655 rows=1 loops=1)
   ->  Nested Loop  (cost=1004.27..6509.32 rows=1 width=48) (actual time=25.852..27.635 rows=45 loops=1)
         ->  Nested Loop  (cost=1003.84..6507.62 rows=1 width=36) (actual time=25.840..27.558 rows=45 loops=1)
               Join Filter: (n.id = an.person_id)
               ->  Nested Loop  (cost=1003.42..6505.51 rows=1 width=44) (actual time=25.824..27.506 rows=9 loops=1)
                     ->  Nested Loop  (cost=1003.28..6505.34 rows=1 width=48) (actual time=25.807..27.479 rows=9 loops=1)
                           ->  Nested Loop  (cost=1002.86..6503.54 rows=1 width=29) (actual time=25.302..26.466 rows=244 loops=1)
                                 Join Filter: (t.id = ci.movie_id)
                                 ->  Nested Loop  (cost=1002.29..6463.70 rows=1 width=33) (actual time=25.272..25.451 rows=9 loops=1)
                                       ->  Nested Loop  (cost=1002.15..6463.52 rows=1 width=37) (actual time=25.262..25.430 rows=9 loops=1)
                                             Join Filter: (t.id = mi.movie_id)
                                             ->  Gather  (cost=1001.71..6430.87 rows=1 width=29) (actual time=25.119..25.179 rows=6 loops=1)
                                                   Workers Planned: 1
                                                   Workers Launched: 1
                                                   ->  Nested Loop  (cost=1.71..5430.77 rows=1 width=29) (actual time=14.929..23.375 rows=3 loops=2)
                                                         ->  Nested Loop  (cost=1.29..5428.89 rows=1 width=33) (actual time=14.873..23.040 rows=42 loops=2)
                                                               Join Filter: (t.id = mk.movie_id)
                                                               ->  Nested Loop  (cost=0.86..5425.84 rows=1 width=25) (actual time=14.849..22.984 rows=2 loops=2)
                                                                     ->  Nested Loop  (cost=0.43..5416.18 rows=6 width=4) (actual time=14.663..22.310 rows=50 loops=2)
                                                                           ->  Parallel Seq Scan on company_name cn  (cost=0.00..5068.50 rows=1 width=4) (actual time=14.634..22.018 rows=0 loops=2)
                                                                                 Filter: (((country_code)::text = '[us]'::text) AND ((name)::text = 'DreamWorks Animation'::text))
                                                                                 Rows Removed by Filter: 117498
                                                                           ->  Index Scan using company_id_movie_companies on movie_companies mc  (cost=0.43..346.37 rows=130 width=8) (actual time=0.054..0.567 rows=99 loops=1)
                                                                                 Index Cond: (company_id = cn.id)
                                                                     ->  Index Scan using title_pkey on title t  (cost=0.43..1.60 rows=1 width=21) (actual time=0.013..0.013 rows=0 loops=99)
                                                                           Index Cond: (id = mc.movie_id)
                                                                           Filter: ((production_year > 2010) AND ((title)::text ~~ 'Kung Fu Panda%'::text))
                                                                           Rows Removed by Filter: 1
                                                               ->  Index Scan using movie_id_movie_keyword on movie_keyword mk  (cost=0.43..2.47 rows=47 width=8) (actual time=0.018..0.023 rows=21 loops=4)
                                                                     Index Cond: (movie_id = mc.movie_id)
                                                         ->  Index Scan using keyword_pkey on keyword k  (cost=0.42..1.46 rows=1 width=4) (actual time=0.008..0.008 rows=0 loops=83)
                                                               Index Cond: (id = mk.keyword_id)
                                                               Filter: ((keyword)::text = ANY ('{hero,martial-arts,hand-to-hand-combat,computer-animated-movie}'::text[]))
                                                               Rows Removed by Filter: 1
                                             ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..32.63 rows=1 width=8) (actual time=0.026..0.049 rows=2 loops=6)
                                                   Index Cond: (movie_id = mk.movie_id)
                                                   Filter: ((info IS NOT NULL) AND (((info)::text ~~ 'Japan:%201%'::text) OR ((info)::text ~~ 'USA:%201%'::text)))
                                                   Rows Removed by Filter: 89
                                       ->  Index Scan using info_type_pkey on info_type it  (cost=0.14..0.16 rows=1 width=4) (actual time=0.002..0.002 rows=1 loops=9)
                                             Index Cond: (id = mi.info_type_id)
                                             Filter: ((info)::text = 'release dates'::text)
                                 ->  Index Scan using movie_id_cast_info on cast_info ci  (cost=0.56..39.83 rows=1 width=16) (actual time=0.008..0.108 rows=27 loops=9)
                                       Index Cond: (movie_id = mk.movie_id)
                                       Filter: ((note)::text = ANY ('{(voice),"(voice: Japanese version)","(voice) (uncredited)","(voice: English version)"}'::text[]))
                                       Rows Removed by Filter: 91
                           ->  Index Scan using name_pkey on name n  (cost=0.43..1.80 rows=1 width=19) (actual time=0.004..0.004 rows=0 loops=244)
                                 Index Cond: (id = ci.person_id)
                                 Filter: (((name)::text ~~ '%An%'::text) AND ((gender)::text = 'f'::text))
                                 Rows Removed by Filter: 1
                     ->  Index Scan using role_type_pkey on role_type rt  (cost=0.14..0.16 rows=1 width=4) (actual time=0.002..0.002 rows=1 loops=9)
                           Index Cond: (id = ci.role_id)
                           Filter: ((role)::text = 'actress'::text)
               ->  Index Only Scan using person_id_aka_name on aka_name an  (cost=0.42..2.08 rows=2 width=4) (actual time=0.003..0.005 rows=5 loops=9)
                     Index Cond: (person_id = ci.person_id)
                     Heap Fetches: 45
         ->  Index Scan using char_name_pkey on char_name chn  (cost=0.43..1.70 rows=1 width=20) (actual time=0.001..0.001 rows=1 loops=45)
               Index Cond: (id = ci.person_role_id)
 Planning Time: 79.852 ms
 Execution Time: 27.935 ms
(59 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/25a.sql_explained.sql
SET
                                                                                                QUERY PLAN                                                                                                
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=7497.91..7497.92 rows=1 width=128) (actual time=2542.458..2542.459 rows=1 loops=1)
   ->  Nested Loop  (cost=1012.02..7497.90 rows=1 width=80) (actual time=23.587..2540.248 rows=4407 loops=1)
         Join Filter: (mi.movie_id = t.id)
         ->  Nested Loop  (cost=1011.59..7497.08 rows=1 width=79) (actual time=23.551..2508.030 rows=4407 loops=1)
               ->  Nested Loop  (cost=1011.16..7496.06 rows=1 width=68) (actual time=12.241..2441.751 rows=7112 loops=1)
                     ->  Nested Loop  (cost=1011.02..7495.88 rows=1 width=72) (actual time=12.237..2429.554 rows=7740 loops=1)
                           Join Filter: (mi.movie_id = ci.movie_id)
                           ->  Gather  (cost=1010.46..7466.93 rows=1 width=64) (actual time=6.220..618.527 rows=12260 loops=1)
                                 Workers Planned: 2
                                 Workers Launched: 2
                                 ->  Nested Loop  (cost=10.46..6466.83 rows=1 width=64) (actual time=5.935..858.353 rows=4087 loops=3)
                                       Join Filter: (mi_idx.movie_id = mi.movie_id)
                                       ->  Hash Join  (cost=10.02..6431.17 rows=2 width=14) (actual time=4.600..197.699 rows=16920 loops=3)
                                             Hash Cond: (mi_idx.info_type_id = it2.id)
                                             ->  Nested Loop  (cost=7.60..6428.17 rows=211 width=18) (actual time=4.520..189.854 rows=50907 loops=3)
                                                   ->  Nested Loop  (cost=7.17..6372.12 rows=70 width=4) (actual time=4.481..95.733 rows=20699 loops=3)
                                                         ->  Parallel Index Scan using keyword_pkey on keyword k  (cost=0.42..4207.64 rows=2 width=4) (actual time=0.200..20.436 rows=2 loops=3)
                                                               Filter: ((keyword)::text = ANY ('{murder,blood,gore,death,female-nudity}'::text[]))
                                                               Rows Removed by Filter: 44722
                                                         ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1079.25 rows=299 width=8) (actual time=3.459..43.689 rows=12419 loops=5)
                                                               Recheck Cond: (keyword_id = k.id)
                                                               Heap Blocks: exact=12389
                                                               ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=1.995..1.995 rows=12419 loops=5)
                                                                     Index Cond: (keyword_id = k.id)
                                                   ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx  (cost=0.43..0.77 rows=3 width=14) (actual time=0.004..0.004 rows=2 loops=62096)
                                                         Index Cond: (movie_id = mk.movie_id)
                                             ->  Hash  (cost=2.41..2.41 rows=1 width=4) (actual time=0.026..0.026 rows=1 loops=3)
                                                   Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                   ->  Seq Scan on info_type it2  (cost=0.00..2.41 rows=1 width=4) (actual time=0.020..0.022 rows=1 loops=3)
                                                         Filter: ((info)::text = 'votes'::text)
                                                         Rows Removed by Filter: 112
                                       ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..17.82 rows=1 width=50) (actual time=0.038..0.039 rows=0 loops=50760)
                                             Index Cond: (movie_id = mk.movie_id)
                                             Filter: ((info)::text = 'Horror'::text)
                                             Rows Removed by Filter: 56
                           ->  Index Scan using movie_id_cast_info on cast_info ci  (cost=0.56..28.93 rows=1 width=8) (actual time=0.120..0.147 rows=1 loops=12260)
                                 Index Cond: (movie_id = mk.movie_id)
                                 Filter: ((note)::text = ANY ('{(writer),"(head writer)","(written by)",(story),"(story editor)"}'::text[]))
                                 Rows Removed by Filter: 47
                     ->  Index Scan using info_type_pkey on info_type it1  (cost=0.14..0.16 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=7740)
                           Index Cond: (id = mi.info_type_id)
                           Filter: ((info)::text = 'genres'::text)
                           Rows Removed by Filter: 0
               ->  Index Scan using name_pkey on name n  (cost=0.43..1.02 rows=1 width=19) (actual time=0.009..0.009 rows=1 loops=7112)
                     Index Cond: (id = ci.person_id)
                     Filter: ((gender)::text = 'm'::text)
                     Rows Removed by Filter: 0
         ->  Index Scan using title_pkey on title t  (cost=0.43..0.81 rows=1 width=21) (actual time=0.007..0.007 rows=1 loops=4407)
               Index Cond: (id = mk.movie_id)
 Planning Time: 12.810 ms
 Execution Time: 2542.830 ms
(51 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/25b.sql_explained.sql
SET
                                                                                            QUERY PLAN                                                                                             
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=7478.04..7478.05 rows=1 width=128) (actual time=247.923..247.923 rows=1 loops=1)
   ->  Nested Loop  (cost=1009.74..7478.03 rows=1 width=80) (actual time=139.704..247.905 rows=6 loops=1)
         ->  Nested Loop  (cost=1009.31..7477.01 rows=1 width=69) (actual time=139.673..247.820 rows=6 loops=1)
               ->  Nested Loop  (cost=1009.17..7476.82 rows=1 width=73) (actual time=139.663..247.786 rows=18 loops=1)
                     Join Filter: (t.id = mi_idx.movie_id)
                     ->  Nested Loop  (cost=1008.74..7476.02 rows=1 width=79) (actual time=139.627..247.714 rows=6 loops=1)
                           ->  Nested Loop  (cost=1008.60..7475.83 rows=1 width=83) (actual time=139.605..247.680 rows=6 loops=1)
                                 Join Filter: (t.id = mi.movie_id)
                                 ->  Nested Loop  (cost=1008.16..7458.00 rows=1 width=33) (actual time=139.506..247.381 rows=6 loops=1)
                                       Join Filter: (t.id = ci.movie_id)
                                       ->  Gather  (cost=1007.60..7429.06 rows=1 width=25) (actual time=139.267..249.343 rows=9 loops=1)
                                             Workers Planned: 2
                                             Workers Launched: 2
                                             ->  Nested Loop  (cost=7.60..6428.96 rows=1 width=25) (actual time=146.844..198.635 rows=3 loops=3)
                                                   ->  Nested Loop  (cost=7.17..6372.12 rows=70 width=4) (actual time=4.357..95.848 rows=20699 loops=3)
                                                         ->  Parallel Index Scan using keyword_pkey on keyword k  (cost=0.42..4207.64 rows=2 width=4) (actual time=0.145..22.982 rows=2 loops=3)
                                                               Filter: ((keyword)::text = ANY ('{murder,blood,gore,death,female-nudity}'::text[]))
                                                               Rows Removed by Filter: 44722
                                                         ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1079.25 rows=299 width=8) (actual time=3.415..42.408 rows=12419 loops=5)
                                                               Recheck Cond: (keyword_id = k.id)
                                                               Heap Blocks: exact=12389
                                                               ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=1.962..1.962 rows=12419 loops=5)
                                                                     Index Cond: (keyword_id = k.id)
                                                   ->  Index Scan using title_pkey on title t  (cost=0.43..0.81 rows=1 width=21) (actual time=0.005..0.005 rows=0 loops=62096)
                                                         Index Cond: (id = mk.movie_id)
                                                         Filter: ((production_year > 2010) AND ((title)::text ~~ 'Vampire%'::text))
                                                         Rows Removed by Filter: 1
                                       ->  Index Scan using movie_id_cast_info on cast_info ci  (cost=0.56..28.93 rows=1 width=8) (actual time=0.064..0.076 rows=1 loops=9)
                                             Index Cond: (movie_id = mk.movie_id)
                                             Filter: ((note)::text = ANY ('{(writer),"(head writer)","(written by)",(story),"(story editor)"}'::text[]))
                                             Rows Removed by Filter: 21
                                 ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..17.82 rows=1 width=50) (actual time=0.048..0.049 rows=1 loops=6)
                                       Index Cond: (movie_id = mk.movie_id)
                                       Filter: ((info)::text = 'Horror'::text)
                                       Rows Removed by Filter: 20
                           ->  Index Scan using info_type_pkey on info_type it1  (cost=0.14..0.16 rows=1 width=4) (actual time=0.004..0.004 rows=1 loops=6)
                                 Index Cond: (id = mi.info_type_id)
                                 Filter: ((info)::text = 'genres'::text)
                     ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx  (cost=0.43..0.77 rows=3 width=14) (actual time=0.010..0.010 rows=3 loops=6)
                           Index Cond: (movie_id = mk.movie_id)
               ->  Index Scan using info_type_pkey on info_type it2  (cost=0.14..0.16 rows=1 width=4) (actual time=0.001..0.001 rows=0 loops=18)
                     Index Cond: (id = mi_idx.info_type_id)
                     Filter: ((info)::text = 'votes'::text)
                     Rows Removed by Filter: 1
         ->  Index Scan using name_pkey on name n  (cost=0.43..1.02 rows=1 width=19) (actual time=0.013..0.013 rows=1 loops=6)
               Index Cond: (id = ci.person_id)
               Filter: ((gender)::text = 'm'::text)
 Planning Time: 13.630 ms
 Execution Time: 250.852 ms
(49 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/25c.sql_explained.sql
SET
                                                                                                QUERY PLAN                                                                                                
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=8700.85..8700.86 rows=1 width=128) (actual time=8738.804..8738.804 rows=1 loops=1)
   ->  Nested Loop  (cost=1012.02..8700.84 rows=1 width=80) (actual time=7.596..8727.093 rows=26153 loops=1)
         Join Filter: (mi.movie_id = t.id)
         ->  Nested Loop  (cost=1011.59..8700.02 rows=1 width=79) (actual time=7.571..8609.627 rows=26153 loops=1)
               ->  Nested Loop  (cost=1011.16..8699.00 rows=1 width=68) (actual time=7.535..8353.019 rows=42900 loops=1)
                     Join Filter: (mi.movie_id = ci.movie_id)
                     ->  Gather  (cost=1010.60..8670.06 rows=1 width=60) (actual time=6.045..767.659 rows=63386 loops=1)
                           Workers Planned: 2
                           Workers Launched: 2
                           ->  Nested Loop  (cost=10.60..7669.96 rows=1 width=60) (actual time=4.728..1274.496 rows=21129 loops=3)
                                 ->  Nested Loop  (cost=10.46..7669.77 rows=1 width=64) (actual time=4.720..1246.952 rows=22577 loops=3)
                                       Join Filter: (mi_idx.movie_id = mi.movie_id)
                                       ->  Hash Join  (cost=10.02..7633.70 rows=2 width=14) (actual time=4.617..245.582 rows=21234 loops=3)
                                             Hash Cond: (mi_idx.info_type_id = it2.id)
                                             ->  Nested Loop  (cost=7.60..7630.47 rows=294 width=18) (actual time=4.530..235.387 rows=63896 loops=3)
                                                   ->  Nested Loop  (cost=7.17..7552.00 rows=98 width=4) (actual time=4.494..116.752 rows=25571 loops=3)
                                                         ->  Parallel Index Scan using keyword_pkey on keyword k  (cost=0.42..4347.40 rows=3 width=4) (actual time=0.252..22.540 rows=2 loops=3)
                                                               Filter: ((keyword)::text = ANY ('{murder,violence,blood,gore,death,female-nudity,hospital}'::text[]))
                                                               Rows Removed by Filter: 44721
                                                         ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1065.21 rows=299 width=8) (actual time=3.161..39.012 rows=10959 loops=7)
                                                               Recheck Cond: (keyword_id = k.id)
                                                               Heap Blocks: exact=12389
                                                               ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=1.823..1.823 rows=10959 loops=7)
                                                                     Index Cond: (keyword_id = k.id)
                                                   ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx  (cost=0.43..0.77 rows=3 width=14) (actual time=0.004..0.004 rows=2 loops=76714)
                                                         Index Cond: (movie_id = mk.movie_id)
                                             ->  Hash  (cost=2.41..2.41 rows=1 width=4) (actual time=0.029..0.029 rows=1 loops=3)
                                                   Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                   ->  Seq Scan on info_type it2  (cost=0.00..2.41 rows=1 width=4) (actual time=0.022..0.024 rows=1 loops=3)
                                                         Filter: ((info)::text = 'votes'::text)
                                                         Rows Removed by Filter: 112
                                       ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..18.03 rows=1 width=50) (actual time=0.045..0.047 rows=1 loops=63701)
                                             Index Cond: (movie_id = mk.movie_id)
                                             Filter: ((info)::text = ANY ('{Horror,Action,Sci-Fi,Thriller,Crime,War}'::text[]))
                                             Rows Removed by Filter: 58
                                 ->  Index Scan using info_type_pkey on info_type it1  (cost=0.14..0.16 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=67732)
                                       Index Cond: (id = mi.info_type_id)
                                       Filter: ((info)::text = 'genres'::text)
                                       Rows Removed by Filter: 0
                     ->  Index Scan using movie_id_cast_info on cast_info ci  (cost=0.56..28.93 rows=1 width=8) (actual time=0.095..0.119 rows=1 loops=63386)
                           Index Cond: (movie_id = mk.movie_id)
                           Filter: ((note)::text = ANY ('{(writer),"(head writer)","(written by)",(story),"(story editor)"}'::text[]))
                           Rows Removed by Filter: 63
               ->  Index Scan using name_pkey on name n  (cost=0.43..1.02 rows=1 width=19) (actual time=0.006..0.006 rows=1 loops=42900)
                     Index Cond: (id = ci.person_id)
                     Filter: ((gender)::text = 'm'::text)
                     Rows Removed by Filter: 0
         ->  Index Scan using title_pkey on title t  (cost=0.43..0.81 rows=1 width=21) (actual time=0.004..0.004 rows=1 loops=26153)
               Index Cond: (id = mk.movie_id)
 Planning Time: 13.790 ms
 Execution Time: 8739.216 ms
(51 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/26a.sql_explained.sql
SET
                                                                                                   QUERY PLAN                                                                                                   
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=10239.97..10239.98 rows=1 width=128) (actual time=1105.543..1105.543 rows=1 loops=1)
   ->  Nested Loop  (cost=5.26..10239.96 rows=1 width=54) (actual time=11.830..1104.795 rows=1728 loops=1)
         ->  Nested Loop  (cost=4.83..10233.55 rows=14 width=42) (actual time=1.442..984.595 rows=58947 loops=1)
               ->  Nested Loop  (cost=4.40..10227.18 rows=14 width=31) (actual time=1.413..695.354 rows=58947 loops=1)
                     Join Filter: (t.id = ci.movie_id)
                     ->  Nested Loop  (cost=3.84..10225.20 rows=1 width=39) (actual time=1.372..560.365 rows=326 loops=1)
                           ->  Nested Loop  (cost=3.42..10223.39 rows=4 width=43) (actual time=0.521..373.298 rows=79039 loops=1)
                                 ->  Nested Loop  (cost=2.98..10219.72 rows=2 width=35) (actual time=0.493..345.422 rows=647 loops=1)
                                       Join Filter: (kt.id = t.kind_id)
                                       Rows Removed by Join Filter: 5355
                                       ->  Seq Scan on kind_type kt  (cost=0.00..1.09 rows=1 width=4) (actual time=0.015..0.016 rows=1 loops=1)
                                             Filter: ((kind)::text = 'movie'::text)
                                             Rows Removed by Filter: 6
                                       ->  Nested Loop  (cost=2.98..10218.42 rows=17 width=39) (actual time=0.374..344.764 rows=6002 loops=1)
                                             Join Filter: (cc.movie_id = t.id)
                                             ->  Nested Loop  (cost=2.55..10175.60 rows=32 width=14) (actual time=0.264..259.460 rows=17898 loops=1)
                                                   Join Filter: (it2.id = mi_idx.info_type_id)
                                                   Rows Removed by Join Filter: 8960
                                                   ->  Seq Scan on info_type it2  (cost=0.00..2.41 rows=1 width=4) (actual time=0.013..0.016 rows=1 loops=1)
                                                         Filter: ((info)::text = 'rating'::text)
                                                         Rows Removed by Filter: 112
                                                   ->  Nested Loop  (cost=2.55..10128.32 rows=3590 width=18) (actual time=0.143..256.051 rows=26858 loops=1)
                                                         ->  Hash Join  (cost=2.12..2996.88 rows=8443 width=4) (actual time=0.077..48.894 rows=85941 loops=1)
                                                               Hash Cond: (cc.status_id = cct2.id)
                                                               ->  Hash Join  (cost=1.06..2813.24 rows=33772 width=8) (actual time=0.030..34.199 rows=85941 loops=1)
                                                                     Hash Cond: (cc.subject_id = cct1.id)
                                                                     ->  Seq Scan on complete_cast cc  (cost=0.00..2081.86 rows=135086 width=12) (actual time=0.011..12.109 rows=135086 loops=1)
                                                                     ->  Hash  (cost=1.05..1.05 rows=1 width=4) (actual time=0.004..0.005 rows=1 loops=1)
                                                                           Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                                           ->  Seq Scan on comp_cast_type cct1  (cost=0.00..1.05 rows=1 width=4) (actual time=0.001..0.002 rows=1 loops=1)
                                                                                 Filter: ((kind)::text = 'cast'::text)
                                                                                 Rows Removed by Filter: 3
                                                               ->  Hash  (cost=1.05..1.05 rows=1 width=4) (actual time=0.020..0.021 rows=2 loops=1)
                                                                     Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                                     ->  Seq Scan on comp_cast_type cct2  (cost=0.00..1.05 rows=1 width=4) (actual time=0.014..0.015 rows=2 loops=1)
                                                                           Filter: ((kind)::text ~~ '%complete%'::text)
                                                                           Rows Removed by Filter: 2
                                                         ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx  (cost=0.43..0.83 rows=1 width=14) (actual time=0.002..0.002 rows=0 loops=85941)
                                                               Index Cond: (movie_id = cc.movie_id)
                                                               Filter: ((info)::text > '7.0'::text)
                                                               Rows Removed by Filter: 2
                                             ->  Index Scan using title_pkey on title t  (cost=0.43..1.33 rows=1 width=25) (actual time=0.004..0.004 rows=0 loops=17898)
                                                   Index Cond: (id = mi_idx.movie_id)
                                                   Filter: (production_year > 2000)
                                                   Rows Removed by Filter: 1
                                 ->  Index Scan using movie_id_movie_keyword on movie_keyword mk  (cost=0.43..1.36 rows=47 width=8) (actual time=0.009..0.029 rows=122 loops=647)
                                       Index Cond: (movie_id = t.id)
                           ->  Index Scan using keyword_pkey on keyword k  (cost=0.42..0.45 rows=1 width=4) (actual time=0.002..0.002 rows=0 loops=79039)
                                 Index Cond: (id = mk.keyword_id)
                                 Filter: ((keyword)::text = ANY ('{superhero,marvel-comics,based-on-comic,tv-special,fight,violence,magnet,web,claw,laser}'::text[]))
                                 Rows Removed by Filter: 1
                     ->  Index Scan using movie_id_cast_info on cast_info ci  (cost=0.56..1.52 rows=37 width=12) (actual time=0.011..0.380 rows=181 loops=326)
                           Index Cond: (movie_id = mk.movie_id)
               ->  Index Scan using name_pkey on name n  (cost=0.43..0.45 rows=1 width=19) (actual time=0.005..0.005 rows=1 loops=58947)
                     Index Cond: (id = ci.person_id)
         ->  Index Scan using char_name_pkey on char_name chn  (cost=0.43..0.46 rows=1 width=20) (actual time=0.002..0.002 rows=0 loops=58947)
               Index Cond: (id = ci.person_role_id)
               Filter: ((name IS NOT NULL) AND (((name)::text ~~ '%man%'::text) OR ((name)::text ~~ '%Man%'::text)))
               Rows Removed by Filter: 0
 Planning Time: 68.976 ms
 Execution Time: 1105.806 ms
(61 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/26b.sql_explained.sql
SET
                                                                                                      QUERY PLAN                                                                                                      
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=7388.77..7388.78 rows=1 width=96) (actual time=271.464..271.464 rows=1 loops=1)
   ->  Nested Loop  (cost=9.45..7388.76 rows=1 width=39) (actual time=29.325..271.417 rows=93 loops=1)
         Join Filter: (cct1.id = cc.subject_id)
         Rows Removed by Join Filter: 87
         ->  Seq Scan on comp_cast_type cct1  (cost=0.00..1.05 rows=1 width=4) (actual time=0.014..0.015 rows=1 loops=1)
               Filter: ((kind)::text = 'cast'::text)
               Rows Removed by Filter: 3
         ->  Nested Loop  (cost=9.45..7387.70 rows=1 width=43) (actual time=29.309..271.376 rows=180 loops=1)
               Join Filter: (cct2.id = cc.status_id)
               Rows Removed by Join Filter: 180
               ->  Seq Scan on comp_cast_type cct2  (cost=0.00..1.05 rows=1 width=4) (actual time=0.002..0.004 rows=2 loops=1)
                     Filter: ((kind)::text ~~ '%complete%'::text)
                     Rows Removed by Filter: 2
               ->  Nested Loop  (cost=9.45..7386.64 rows=1 width=47) (actual time=21.059..135.663 rows=180 loops=2)
                     ->  Nested Loop  (cost=9.03..7386.16 rows=1 width=55) (actual time=18.587..135.224 rows=191 loops=2)
                           ->  Nested Loop  (cost=8.60..7385.70 rows=1 width=59) (actual time=18.572..134.007 rows=191 loops=2)
                                 ->  Nested Loop  (cost=8.17..7379.30 rows=14 width=47) (actual time=18.511..120.455 rows=7981 loops=2)
                                       Join Filter: (t.id = ci.movie_id)
                                       ->  Nested Loop  (cost=7.61..7377.31 rows=1 width=35) (actual time=18.491..104.133 rows=31 loops=2)
                                             Join Filter: (kt.id = t.kind_id)
                                             Rows Removed by Join Filter: 167
                                             ->  Seq Scan on kind_type kt  (cost=0.00..1.09 rows=1 width=4) (actual time=0.005..0.006 rows=1 loops=2)
                                                   Filter: ((kind)::text = 'movie'::text)
                                                   Rows Removed by Filter: 6
                                             ->  Nested Loop  (cost=7.61..7376.21 rows=1 width=39) (actual time=0.811..104.096 rows=198 loops=2)
                                                   ->  Nested Loop  (cost=7.18..7375.73 rows=1 width=14) (actual time=0.796..101.428 rows=313 loops=2)
                                                         Join Filter: (mi_idx.info_type_id = it2.id)
                                                         Rows Removed by Join Filter: 612
                                                         ->  Seq Scan on info_type it2  (cost=0.00..2.41 rows=1 width=4) (actual time=0.012..0.013 rows=1 loops=2)
                                                               Filter: ((info)::text = 'rating'::text)
                                                               Rows Removed by Filter: 112
                                                         ->  Nested Loop  (cost=7.18..7373.13 rows=15 width=18) (actual time=0.681..101.301 rows=925 loops=2)
                                                               ->  Nested Loop  (cost=6.75..7304.56 rows=135 width=4) (actual time=0.584..55.831 rows=9984 loops=2)
                                                                     ->  Seq Scan on keyword k  (cost=0.00..2961.55 rows=4 width=4) (actual time=0.071..20.839 rows=4 loops=2)
                                                                           Filter: ((keyword)::text = ANY ('{superhero,marvel-comics,based-on-comic,fight}'::text[]))
                                                                           Rows Removed by Filter: 134166
                                                                     ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1082.76 rows=299 width=8) (actual time=0.685..8.459 rows=2496 loops=8)
                                                                           Recheck Cond: (keyword_id = k.id)
                                                                           Heap Blocks: exact=15372
                                                                           ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=0.380..0.380 rows=2496 loops=8)
                                                                                 Index Cond: (keyword_id = k.id)
                                                               ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx  (cost=0.43..0.50 rows=1 width=14) (actual time=0.004..0.004 rows=0 loops=19968)
                                                                     Index Cond: (movie_id = mk.movie_id)
                                                                     Filter: ((info)::text > '8.0'::text)
                                                                     Rows Removed by Filter: 2
                                                   ->  Index Scan using title_pkey on title t  (cost=0.43..0.49 rows=1 width=25) (actual time=0.008..0.008 rows=1 loops=626)
                                                         Index Cond: (id = mk.movie_id)
                                                         Filter: (production_year > 2005)
                                                         Rows Removed by Filter: 0
                                       ->  Index Scan using movie_id_cast_info on cast_info ci  (cost=0.56..1.52 rows=37 width=12) (actual time=0.013..0.483 rows=257 loops=62)
                                             Index Cond: (movie_id = mk.movie_id)
                                 ->  Index Scan using char_name_pkey on char_name chn  (cost=0.43..0.46 rows=1 width=20) (actual time=0.002..0.002 rows=0 loops=15962)
                                       Index Cond: (id = ci.person_role_id)
                                       Filter: ((name IS NOT NULL) AND (((name)::text ~~ '%man%'::text) OR ((name)::text ~~ '%Man%'::text)))
                                       Rows Removed by Filter: 0
                           ->  Index Only Scan using name_pkey on name n  (cost=0.43..0.45 rows=1 width=4) (actual time=0.006..0.006 rows=1 loops=382)
                                 Index Cond: (id = ci.person_id)
                                 Heap Fetches: 382
                     ->  Index Scan using movie_id_complete_cast on complete_cast cc  (cost=0.42..0.46 rows=2 width=12) (actual time=0.002..0.002 rows=1 loops=382)
                           Index Cond: (movie_id = t.id)
 Planning Time: 70.800 ms
 Execution Time: 271.675 ms
(62 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/26c.sql_explained.sql
SET
                                                                                                   QUERY PLAN                                                                                                   
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=14668.28..14668.29 rows=1 width=96) (actual time=1482.822..1482.822 rows=1 loops=1)
   ->  Nested Loop  (cost=9.45..14668.27 rows=1 width=39) (actual time=7.934..1481.049 rows=5400 loops=1)
         ->  Nested Loop  (cost=9.02..14667.82 rows=1 width=43) (actual time=7.907..1439.935 rows=5400 loops=1)
               Join Filter: (it2.id = mi_idx.info_type_id)
               Rows Removed by Join Filter: 11196
               ->  Seq Scan on info_type it2  (cost=0.00..2.41 rows=1 width=4) (actual time=0.019..0.020 rows=1 loops=1)
                     Filter: ((info)::text = 'rating'::text)
                     Rows Removed by Filter: 112
               ->  Nested Loop  (cost=9.02..14665.39 rows=1 width=47) (actual time=7.885..1437.990 rows=16596 loops=1)
                     Join Filter: (t.id = mi_idx.movie_id)
                     ->  Nested Loop  (cost=8.59..14664.88 rows=1 width=53) (actual time=7.866..1416.103 rows=5406 loops=1)
                           ->  Nested Loop  (cost=8.16..14658.47 rows=14 width=41) (actual time=7.591..1001.458 rows=189844 loops=1)
                                 Join Filter: (t.id = ci.movie_id)
                                 ->  Nested Loop  (cost=7.60..14656.48 rows=1 width=29) (actual time=7.560..487.391 rows=1267 loops=1)
                                       Join Filter: (cct2.id = cc.status_id)
                                       Rows Removed by Join Filter: 1267
                                       ->  Seq Scan on comp_cast_type cct2  (cost=0.00..1.05 rows=1 width=4) (actual time=0.006..0.007 rows=2 loops=1)
                                             Filter: ((kind)::text ~~ '%complete%'::text)
                                             Rows Removed by Filter: 2
                                       ->  Nested Loop  (cost=7.60..14655.42 rows=1 width=33) (actual time=5.570..243.412 rows=1267 loops=2)
                                             Join Filter: (cct1.id = cc.subject_id)
                                             Rows Removed by Join Filter: 218
                                             ->  Seq Scan on comp_cast_type cct1  (cost=0.00..1.05 rows=1 width=4) (actual time=0.001..0.002 rows=1 loops=2)
                                                   Filter: ((kind)::text = 'cast'::text)
                                                   Rows Removed by Filter: 3
                                             ->  Nested Loop  (cost=7.60..14654.36 rows=1 width=37) (actual time=5.568..243.091 rows=1485 loops=2)
                                                   ->  Nested Loop  (cost=7.18..14641.93 rows=26 width=25) (actual time=5.486..229.694 rows=5032 loops=2)
                                                         Join Filter: (kt.id = t.kind_id)
                                                         Rows Removed by Join Filter: 5581
                                                         ->  Seq Scan on kind_type kt  (cost=0.00..1.09 rows=1 width=4) (actual time=0.005..0.006 rows=1 loops=2)
                                                               Filter: ((kind)::text = 'movie'::text)
                                                               Rows Removed by Filter: 6
                                                         ->  Nested Loop  (cost=7.18..14638.55 rows=183 width=29) (actual time=0.678..228.295 rows=10613 loops=2)
                                                               ->  Nested Loop  (cost=6.75..14474.11 rows=337 width=4) (actual time=0.663..107.622 rows=24091 loops=2)
                                                                     ->  Seq Scan on keyword k  (cost=0.00..3967.82 rows=10 width=4) (actual time=0.138..36.255 rows=10 loops=2)
                                                                           Filter: ((keyword)::text = ANY ('{superhero,marvel-comics,based-on-comic,tv-special,fight,violence,magnet,web,claw,laser}'::text[]))
                                                                           Rows Removed by Filter: 134160
                                                                     ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1047.64 rows=299 width=8) (actual time=0.647..6.826 rows=2409 loops=20)
                                                                           Recheck Cond: (keyword_id = k.id)
                                                                           Heap Blocks: exact=34254
                                                                           ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=0.362..0.362 rows=2409 loops=20)
                                                                                 Index Cond: (keyword_id = k.id)
                                                               ->  Index Scan using title_pkey on title t  (cost=0.43..0.49 rows=1 width=25) (actual time=0.005..0.005 rows=0 loops=48182)
                                                                     Index Cond: (id = mk.movie_id)
                                                                     Filter: (production_year > 2000)
                                                                     Rows Removed by Filter: 1
                                                   ->  Index Scan using movie_id_complete_cast on complete_cast cc  (cost=0.42..0.46 rows=2 width=12) (actual time=0.002..0.002 rows=0 loops=10064)
                                                         Index Cond: (movie_id = t.id)
                                 ->  Index Scan using movie_id_cast_info on cast_info ci  (cost=0.56..1.52 rows=37 width=12) (actual time=0.011..0.379 rows=150 loops=1267)
                                       Index Cond: (movie_id = mk.movie_id)
                           ->  Index Scan using char_name_pkey on char_name chn  (cost=0.43..0.46 rows=1 width=20) (actual time=0.002..0.002 rows=0 loops=189844)
                                 Index Cond: (id = ci.person_role_id)
                                 Filter: ((name IS NOT NULL) AND (((name)::text ~~ '%man%'::text) OR ((name)::text ~~ '%Man%'::text)))
                                 Rows Removed by Filter: 0
                     ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx  (cost=0.43..0.48 rows=3 width=14) (actual time=0.003..0.003 rows=3 loops=5406)
                           Index Cond: (movie_id = ci.movie_id)
         ->  Index Only Scan using name_pkey on name n  (cost=0.43..0.45 rows=1 width=4) (actual time=0.007..0.007 rows=1 loops=5400)
               Index Cond: (id = ci.person_id)
               Heap Fetches: 5400
 Planning Time: 69.095 ms
 Execution Time: 1483.047 ms
(61 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/27a.sql_explained.sql
SET
                                                                                                         QUERY PLAN                                                                                                          
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=3308.26..3308.27 rows=1 width=96) (actual time=25.934..25.934 rows=1 loops=1)
   ->  Nested Loop  (cost=6.00..3308.26 rows=1 width=118) (actual time=3.413..25.811 rows=477 loops=1)
         ->  Nested Loop  (cost=5.58..3307.80 rows=1 width=103) (actual time=3.389..23.766 rows=1106 loops=1)
               Join Filter: (ct.id = mc.company_type_id)
               Rows Removed by Join Filter: 57
               ->  Seq Scan on company_type ct  (cost=0.00..1.05 rows=1 width=4) (actual time=0.013..0.014 rows=1 loops=1)
                     Filter: ((kind)::text = 'production companies'::text)
                     Rows Removed by Filter: 3
               ->  Nested Loop  (cost=5.58..3306.72 rows=2 width=107) (actual time=3.374..23.628 rows=1163 loops=1)
                     Join Filter: (ml.movie_id = mc.movie_id)
                     ->  Nested Loop  (cost=5.15..3306.16 rows=1 width=119) (actual time=3.352..22.946 rows=154 loops=1)
                           ->  Nested Loop  (cost=4.73..2463.07 rows=1911 width=123) (actual time=3.315..19.854 rows=1853 loops=1)
                                 Join Filter: (ml.movie_id = mk.movie_id)
                                 ->  Nested Loop  (cost=4.29..2380.91 rows=41 width=115) (actual time=3.294..18.928 rows=213 loops=1)
                                       Join Filter: (ml.movie_id = mi.movie_id)
                                       ->  Nested Loop  (cost=3.86..2105.18 rows=121 width=111) (actual time=0.963..13.990 rows=179 loops=1)
                                             Join Filter: (ml.movie_id = t.id)
                                             ->  Hash Join  (cost=3.43..1527.00 rows=333 width=90) (actual time=0.942..13.061 rows=189 loops=1)
                                                   Hash Cond: (ml.link_type_id = lt.id)
                                                   ->  Merge Join  (cost=2.19..1506.31 rows=6002 width=12) (actual time=0.062..12.774 rows=3346 loops=1)
                                                         Merge Cond: (cc.movie_id = ml.movie_id)
                                                         ->  Nested Loop  (cost=0.42..9294.58 rows=16886 width=4) (actual time=0.027..5.012 rows=5561 loops=1)
                                                               Join Filter: (cc.subject_id = cct1.id)
                                                               Rows Removed by Join Filter: 2227
                                                               ->  Nested Loop  (cost=0.42..8364.79 rows=33772 width=8) (actual time=0.020..3.632 rows=5561 loops=1)
                                                                     Join Filter: (cct2.id = cc.status_id)
                                                                     Rows Removed by Join Filter: 432
                                                                     ->  Index Scan using movie_id_complete_cast on complete_cast cc  (cost=0.42..6337.45 rows=135086 width=12) (actual time=0.008..2.253 rows=5993 loops=1)
                                                                     ->  Materialize  (cost=0.00..1.05 rows=1 width=4) (actual time=0.000..0.000 rows=1 loops=5993)
                                                                           ->  Seq Scan on comp_cast_type cct2  (cost=0.00..1.05 rows=1 width=4) (actual time=0.006..0.006 rows=1 loops=1)
                                                                                 Filter: ((kind)::text = 'complete'::text)
                                                                                 Rows Removed by Filter: 3
                                                               ->  Materialize  (cost=0.00..1.06 rows=2 width=4) (actual time=0.000..0.000 rows=1 loops=5561)
                                                                     ->  Seq Scan on comp_cast_type cct1  (cost=0.00..1.05 rows=2 width=4) (actual time=0.002..0.002 rows=2 loops=1)
                                                                           Filter: ((kind)::text = ANY ('{cast,crew}'::text[]))
                                                         ->  Index Scan using movie_id_movie_link on movie_link ml  (cost=0.29..959.51 rows=29997 width=8) (actual time=0.007..5.167 rows=30638 loops=1)
                                                   ->  Hash  (cost=1.23..1.23 rows=1 width=86) (actual time=0.017..0.017 rows=2 loops=1)
                                                         Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                         ->  Seq Scan on link_type lt  (cost=0.00..1.23 rows=1 width=86) (actual time=0.008..0.012 rows=2 loops=1)
                                                               Filter: ((link)::text ~~ '%follow%'::text)
                                                               Rows Removed by Filter: 16
                                             ->  Index Scan using title_pkey on title t  (cost=0.43..1.72 rows=1 width=21) (actual time=0.004..0.004 rows=1 loops=189)
                                                   Index Cond: (id = cc.movie_id)
                                                   Filter: ((production_year >= 1950) AND (production_year <= 2000))
                                                   Rows Removed by Filter: 0
                                       ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..2.27 rows=1 width=4) (actual time=0.026..0.027 rows=1 loops=179)
                                             Index Cond: (movie_id = t.id)
                                             Filter: ((info)::text = ANY ('{Sweden,Germany,Swedish,German}'::text[]))
                                             Rows Removed by Filter: 27
                                 ->  Index Scan using movie_id_movie_keyword on movie_keyword mk  (cost=0.43..1.42 rows=47 width=8) (actual time=0.002..0.003 rows=9 loops=213)
                                       Index Cond: (movie_id = t.id)
                           ->  Index Scan using keyword_pkey on keyword k  (cost=0.42..0.44 rows=1 width=4) (actual time=0.001..0.001 rows=0 loops=1853)
                                 Index Cond: (id = mk.keyword_id)
                                 Filter: ((keyword)::text = 'sequel'::text)
                                 Rows Removed by Filter: 1
                     ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..0.54 rows=2 width=12) (actual time=0.002..0.003 rows=8 loops=154)
                           Index Cond: (movie_id = mk.movie_id)
                           Filter: (note IS NULL)
                           Rows Removed by Filter: 1
         ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..0.46 rows=1 width=23) (actual time=0.002..0.002 rows=0 loops=1106)
               Index Cond: (id = mc.company_id)
               Filter: (((country_code)::text <> '[pl]'::text) AND (((name)::text ~~ '%Film%'::text) OR ((name)::text ~~ '%Warner%'::text)))
               Rows Removed by Filter: 1
 Planning Time: 70.033 ms
 Execution Time: 26.208 ms
(65 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/27b.sql_explained.sql
SET
                                                                                                         QUERY PLAN                                                                                                          
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=2420.10..2420.11 rows=1 width=96) (actual time=35.140..35.140 rows=1 loops=1)
   ->  Nested Loop  (cost=3.52..2420.10 rows=1 width=118) (actual time=25.134..35.078 rows=247 loops=1)
         Join Filter: (ml.movie_id = mi.movie_id)
         ->  Nested Loop  (cost=3.08..2418.52 rows=1 width=138) (actual time=25.105..34.416 rows=95 loops=1)
               ->  Nested Loop  (cost=2.66..2397.77 rows=47 width=142) (actual time=25.059..33.243 rows=703 loops=1)
                     Join Filter: (ml.movie_id = mk.movie_id)
                     ->  Nested Loop  (cost=2.23..2395.81 rows=1 width=134) (actual time=25.041..32.873 rows=95 loops=1)
                           ->  Nested Loop  (cost=1.81..2395.35 rows=1 width=119) (actual time=25.030..32.513 rows=190 loops=1)
                                 Join Filter: (ml.movie_id = t.id)
                                 ->  Nested Loop  (cost=1.38..2375.69 rows=33 width=98) (actual time=1.883..31.217 rows=705 loops=1)
                                       Join Filter: (lt.id = ml.link_type_id)
                                       Rows Removed by Join Filter: 10769
                                       ->  Merge Join  (cost=1.38..2365.44 rows=601 width=20) (actual time=0.424..29.278 rows=5794 loops=1)
                                             Merge Cond: (mc.movie_id = ml.movie_id)
                                             ->  Nested Loop  (cost=0.85..33746.92 rows=10432 width=12) (actual time=0.387..21.838 rows=4702 loops=1)
                                                   Join Filter: (ct.id = mc.company_type_id)
                                                   Rows Removed by Join Filter: 109
                                                   ->  Nested Loop  (cost=0.85..33119.98 rows=41726 width=16) (actual time=0.382..20.750 rows=4811 loops=1)
                                                         ->  Nested Loop  (cost=0.42..11067.56 rows=16886 width=4) (actual time=0.021..4.936 rows=5561 loops=1)
                                                               Join Filter: (cc.status_id = cct2.id)
                                                               Rows Removed by Join Filter: 432
                                                               ->  Nested Loop  (cost=0.42..10053.37 rows=67543 width=8) (actual time=0.016..3.674 rows=5993 loops=1)
                                                                     Join Filter: (cct1.id = cc.subject_id)
                                                                     Rows Removed by Join Filter: 2305
                                                                     ->  Index Scan using movie_id_complete_cast on complete_cast cc  (cost=0.42..6337.45 rows=135086 width=12) (actual time=0.005..1.863 rows=5993 loops=1)
                                                                     ->  Materialize  (cost=0.00..1.06 rows=2 width=4) (actual time=0.000..0.000 rows=1 loops=5993)
                                                                           ->  Seq Scan on comp_cast_type cct1  (cost=0.00..1.05 rows=2 width=4) (actual time=0.005..0.006 rows=2 loops=1)
                                                                                 Filter: ((kind)::text = ANY ('{cast,crew}'::text[]))
                                                               ->  Materialize  (cost=0.00..1.05 rows=1 width=4) (actual time=0.000..0.000 rows=1 loops=5993)
                                                                     ->  Seq Scan on comp_cast_type cct2  (cost=0.00..1.05 rows=1 width=4) (actual time=0.002..0.002 rows=1 loops=1)
                                                                           Filter: ((kind)::text = 'complete'::text)
                                                                           Rows Removed by Filter: 3
                                                         ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..1.29 rows=2 width=12) (actual time=0.002..0.003 rows=1 loops=5561)
                                                               Index Cond: (movie_id = cc.movie_id)
                                                               Filter: (note IS NULL)
                                                               Rows Removed by Filter: 2
                                                   ->  Materialize  (cost=0.00..1.05 rows=1 width=4) (actual time=0.000..0.000 rows=1 loops=4811)
                                                         ->  Seq Scan on company_type ct  (cost=0.00..1.05 rows=1 width=4) (actual time=0.002..0.002 rows=1 loops=1)
                                                               Filter: ((kind)::text = 'production companies'::text)
                                                               Rows Removed by Filter: 3
                                             ->  Index Scan using movie_id_movie_link on movie_link ml  (cost=0.29..959.51 rows=29997 width=8) (actual time=0.011..4.468 rows=33634 loops=1)
                                       ->  Materialize  (cost=0.00..1.23 rows=1 width=86) (actual time=0.000..0.000 rows=2 loops=5794)
                                             ->  Seq Scan on link_type lt  (cost=0.00..1.23 rows=1 width=86) (actual time=0.002..0.006 rows=2 loops=1)
                                                   Filter: ((link)::text ~~ '%follow%'::text)
                                                   Rows Removed by Filter: 16
                                 ->  Index Scan using title_pkey on title t  (cost=0.43..0.58 rows=1 width=21) (actual time=0.002..0.002 rows=0 loops=705)
                                       Index Cond: (id = mc.movie_id)
                                       Filter: (production_year = 1998)
                                       Rows Removed by Filter: 1
                           ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..0.46 rows=1 width=23) (actual time=0.002..0.002 rows=0 loops=190)
                                 Index Cond: (id = mc.company_id)
                                 Filter: (((country_code)::text <> '[pl]'::text) AND (((name)::text ~~ '%Film%'::text) OR ((name)::text ~~ '%Warner%'::text)))
                                 Rows Removed by Filter: 0
                     ->  Index Scan using movie_id_movie_keyword on movie_keyword mk  (cost=0.43..1.37 rows=47 width=8) (actual time=0.002..0.003 rows=7 loops=95)
                           Index Cond: (movie_id = mc.movie_id)
               ->  Index Scan using keyword_pkey on keyword k  (cost=0.42..0.44 rows=1 width=4) (actual time=0.001..0.001 rows=0 loops=703)
                     Index Cond: (id = mk.keyword_id)
                     Filter: ((keyword)::text = 'sequel'::text)
                     Rows Removed by Filter: 1
         ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..1.56 rows=1 width=4) (actual time=0.005..0.006 rows=3 loops=95)
               Index Cond: (movie_id = mk.movie_id)
               Filter: ((info)::text = ANY ('{Sweden,Germany,Swedish,German}'::text[]))
               Rows Removed by Filter: 10
 Planning Time: 69.192 ms
 Execution Time: 35.375 ms
(65 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/27c.sql_explained.sql
SET
                                                                                                         QUERY PLAN                                                                                                          
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=3422.73..3422.74 rows=1 width=96) (actual time=40.647..40.648 rows=1 loops=1)
   ->  Nested Loop  (cost=3.38..3422.71 rows=3 width=118) (actual time=5.969..40.488 rows=743 loops=1)
         Join Filter: (ml.movie_id = mi.movie_id)
         ->  Nested Loop  (cost=2.94..3420.85 rows=1 width=138) (actual time=5.951..38.573 rows=172 loops=1)
               Join Filter: (mc.company_type_id = ct.id)
               Rows Removed by Join Filter: 19
               ->  Nested Loop  (cost=2.94..3419.79 rows=1 width=142) (actual time=5.947..38.363 rows=191 loops=1)
                     ->  Nested Loop  (cost=2.52..3378.74 rows=93 width=146) (actual time=3.315..32.651 rows=3396 loops=1)
                           Join Filter: (ml.movie_id = mk.movie_id)
                           ->  Nested Loop  (cost=2.09..3374.90 rows=2 width=138) (actual time=3.293..31.071 rows=298 loops=1)
                                 Join Filter: (lt.id = ml.link_type_id)
                                 Rows Removed by Join Filter: 1113
                                 ->  Merge Join  (cost=2.09..3373.07 rows=40 width=60) (actual time=2.411..30.794 rows=720 loops=1)
                                       Merge Cond: (t.id = ml.movie_id)
                                       ->  Nested Loop  (cost=1.70..32069.95 rows=3391 width=52) (actual time=1.300..24.928 rows=161 loops=1)
                                             ->  Nested Loop  (cost=1.27..29418.97 rows=4524 width=31) (actual time=1.281..23.421 rows=174 loops=1)
                                                   ->  Nested Loop  (cost=0.85..19898.64 rows=20863 width=16) (actual time=0.255..14.041 rows=3375 loops=1)
                                                         ->  Nested Loop  (cost=0.42..8872.43 rows=8443 width=4) (actual time=0.026..4.547 rows=3834 loops=1)
                                                               Join Filter: (cct2.id = cc.status_id)
                                                               Rows Removed by Join Filter: 372
                                                               ->  Nested Loop  (cost=0.42..8364.79 rows=33772 width=8) (actual time=0.015..3.635 rows=3834 loops=1)
                                                                     Join Filter: (cct1.id = cc.subject_id)
                                                                     Rows Removed by Join Filter: 2385
                                                                     ->  Index Scan using movie_id_complete_cast on complete_cast cc  (cost=0.42..6337.45 rows=135086 width=12) (actual time=0.005..1.983 rows=6219 loops=1)
                                                                     ->  Materialize  (cost=0.00..1.05 rows=1 width=4) (actual time=0.000..0.000 rows=1 loops=6219)
                                                                           ->  Seq Scan on comp_cast_type cct1  (cost=0.00..1.05 rows=1 width=4) (actual time=0.005..0.006 rows=1 loops=1)
                                                                                 Filter: ((kind)::text = 'cast'::text)
                                                                                 Rows Removed by Filter: 3
                                                               ->  Materialize  (cost=0.00..1.05 rows=1 width=4) (actual time=0.000..0.000 rows=1 loops=3834)
                                                                     ->  Seq Scan on comp_cast_type cct2  (cost=0.00..1.05 rows=1 width=4) (actual time=0.008..0.008 rows=2 loops=1)
                                                                           Filter: ((kind)::text ~~ 'complete%'::text)
                                                                           Rows Removed by Filter: 2
                                                         ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..1.29 rows=2 width=12) (actual time=0.002..0.002 rows=1 loops=3834)
                                                               Index Cond: (movie_id = cc.movie_id)
                                                               Filter: (note IS NULL)
                                                               Rows Removed by Filter: 2
                                                   ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..0.46 rows=1 width=23) (actual time=0.003..0.003 rows=0 loops=3375)
                                                         Index Cond: (id = mc.company_id)
                                                         Filter: (((country_code)::text <> '[pl]'::text) AND (((name)::text ~~ '%Film%'::text) OR ((name)::text ~~ '%Warner%'::text)))
                                                         Rows Removed by Filter: 1
                                             ->  Index Scan using title_pkey on title t  (cost=0.43..0.59 rows=1 width=21) (actual time=0.008..0.008 rows=1 loops=174)
                                                   Index Cond: (id = mc.movie_id)
                                                   Filter: ((production_year >= 1950) AND (production_year <= 2010))
                                                   Rows Removed by Filter: 0
                                       ->  Index Scan using movie_id_movie_link on movie_link ml  (cost=0.29..959.51 rows=29997 width=8) (actual time=0.007..3.863 rows=30313 loops=1)
                                 ->  Materialize  (cost=0.00..1.23 rows=1 width=86) (actual time=0.000..0.000 rows=2 loops=720)
                                       ->  Seq Scan on link_type lt  (cost=0.00..1.23 rows=1 width=86) (actual time=0.003..0.006 rows=2 loops=1)
                                             Filter: ((link)::text ~~ '%follow%'::text)
                                             Rows Removed by Filter: 16
                           ->  Index Scan using movie_id_movie_keyword on movie_keyword mk  (cost=0.43..1.33 rows=47 width=8) (actual time=0.002..0.003 rows=11 loops=298)
                                 Index Cond: (movie_id = t.id)
                     ->  Index Scan using keyword_pkey on keyword k  (cost=0.42..0.44 rows=1 width=4) (actual time=0.002..0.002 rows=0 loops=3396)
                           Index Cond: (id = mk.keyword_id)
                           Filter: ((keyword)::text = 'sequel'::text)
                           Rows Removed by Filter: 1
               ->  Seq Scan on company_type ct  (cost=0.00..1.05 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=191)
                     Filter: ((kind)::text = 'production companies'::text)
                     Rows Removed by Filter: 1
         ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..1.82 rows=3 width=4) (actual time=0.008..0.010 rows=4 loops=172)
               Index Cond: (movie_id = mk.movie_id)
               Filter: ((info)::text = ANY ('{Sweden,Norway,Germany,Denmark,Swedish,Denish,Norwegian,German,English}'::text[]))
               Rows Removed by Filter: 15
 Planning Time: 70.050 ms
 Execution Time: 40.872 ms
(64 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/28a.sql_explained.sql
SET
                                                                                                            QUERY PLAN                                                                                                            
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=7394.90..7394.91 rows=1 width=96) (actual time=488.071..488.071 rows=1 loops=1)
   ->  Nested Loop  (cost=9.31..7394.89 rows=1 width=42) (actual time=5.863..486.960 rows=4803 loops=1)
         Join Filter: (ct.id = mc.company_type_id)
         ->  Nested Loop  (cost=9.31..7393.80 rows=1 width=46) (actual time=5.857..482.982 rows=4803 loops=1)
               ->  Nested Loop  (cost=8.89..7393.26 rows=1 width=31) (actual time=5.847..468.355 rows=4955 loops=1)
                     Join Filter: (t.id = mc.movie_id)
                     ->  Nested Loop  (cost=8.46..7392.68 rows=1 width=43) (actual time=5.819..458.931 rows=432 loops=1)
                           Join Filter: (it1.id = mi.info_type_id)
                           Rows Removed by Join Filter: 49
                           ->  Seq Scan on info_type it1  (cost=0.00..2.41 rows=1 width=4) (actual time=0.007..0.013 rows=1 loops=1)
                                 Filter: ((info)::text = 'countries'::text)
                                 Rows Removed by Filter: 112
                           ->  Nested Loop  (cost=8.46..7390.25 rows=1 width=47) (actual time=5.811..458.799 rows=481 loops=1)
                                 Join Filter: (t.id = mi.movie_id)
                                 ->  Nested Loop  (cost=8.03..7388.35 rows=1 width=39) (actual time=5.752..404.983 rows=473 loops=1)
                                       Join Filter: (cc.status_id = cct2.id)
                                       Rows Removed by Join Filter: 1159
                                       ->  Nested Loop  (cost=8.03..7387.27 rows=1 width=43) (actual time=5.749..404.045 rows=544 loops=1)
                                             Join Filter: (kt.id = t.kind_id)
                                             Rows Removed by Join Filter: 244
                                             ->  Nested Loop  (cost=8.03..7386.15 rows=1 width=47) (actual time=5.732..402.961 rows=596 loops=1)
                                                   ->  Nested Loop  (cost=7.60..7385.67 rows=1 width=22) (actual time=5.712..365.238 rows=5973 loops=1)
                                                         Join Filter: (cct1.id = cc.subject_id)
                                                         Rows Removed by Join Filter: 13371
                                                         ->  Seq Scan on comp_cast_type cct1  (cost=0.00..1.05 rows=1 width=4) (actual time=0.002..0.002 rows=1 loops=1)
                                                               Filter: ((kind)::text = 'crew'::text)
                                                               Rows Removed by Filter: 3
                                                         ->  Nested Loop  (cost=7.60..7384.57 rows=4 width=26) (actual time=5.215..363.247 rows=19344 loops=1)
                                                               ->  Nested Loop  (cost=7.18..7383.14 rows=3 width=14) (actual time=4.419..302.760 rows=31800 loops=1)
                                                                     Join Filter: (mi_idx.info_type_id = it2.id)
                                                                     Rows Removed by Join Filter: 62093
                                                                     ->  Seq Scan on info_type it2  (cost=0.00..2.41 rows=1 width=4) (actual time=0.008..0.010 rows=1 loops=1)
                                                                           Filter: ((info)::text = 'rating'::text)
                                                                           Rows Removed by Filter: 112
                                                                     ->  Nested Loop  (cost=7.18..7375.83 rows=392 width=18) (actual time=4.408..294.355 rows=93893 loops=1)
                                                                           ->  Nested Loop  (cost=6.75..7304.56 rows=135 width=4) (actual time=4.384..141.722 rows=37091 loops=1)
                                                                                 ->  Seq Scan on keyword k  (cost=0.00..2961.55 rows=4 width=4) (actual time=1.053..20.802 rows=3 loops=1)
                                                                                       Filter: ((keyword)::text = ANY ('{murder,murder-in-title,blood,violence}'::text[]))
                                                                                       Rows Removed by Filter: 134167
                                                                                 ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1082.76 rows=299 width=8) (actual time=3.369..38.911 rows=12364 loops=3)
                                                                                       Recheck Cond: (keyword_id = k.id)
                                                                                       Heap Blocks: exact=26312
                                                                                       ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=1.839..1.839 rows=12364 loops=3)
                                                                                             Index Cond: (keyword_id = k.id)
                                                                           ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx  (cost=0.43..0.50 rows=3 width=14) (actual time=0.003..0.004 rows=3 loops=37091)
                                                                                 Index Cond: (movie_id = mk.movie_id)
                                                                                 Filter: ((info)::text < '8.5'::text)
                                                                                 Rows Removed by Filter: 0
                                                               ->  Index Scan using movie_id_complete_cast on complete_cast cc  (cost=0.42..0.46 rows=2 width=12) (actual time=0.001..0.002 rows=1 loops=31800)
                                                                     Index Cond: (movie_id = mk.movie_id)
                                                   ->  Index Scan using title_pkey on title t  (cost=0.43..0.49 rows=1 width=25) (actual time=0.006..0.006 rows=0 loops=5973)
                                                         Index Cond: (id = mk.movie_id)
                                                         Filter: (production_year > 2000)
                                                         Rows Removed by Filter: 1
                                             ->  Seq Scan on kind_type kt  (cost=0.00..1.09 rows=2 width=4) (actual time=0.001..0.001 rows=1 loops=596)
                                                   Filter: ((kind)::text = ANY ('{movie,episode}'::text[]))
                                                   Rows Removed by Filter: 2
                                       ->  Seq Scan on comp_cast_type cct2  (cost=0.00..1.05 rows=3 width=4) (actual time=0.001..0.001 rows=3 loops=544)
                                             Filter: ((kind)::text <> 'complete+verified'::text)
                                             Rows Removed by Filter: 0
                                 ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..1.87 rows=2 width=8) (actual time=0.098..0.113 rows=1 loops=473)
                                       Index Cond: (movie_id = mk.movie_id)
                                       Filter: ((info)::text = ANY ('{Sweden,Norway,Germany,Denmark,Swedish,Danish,Norwegian,German,USA,American}'::text[]))
                                       Rows Removed by Filter: 139
                     ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..0.57 rows=1 width=12) (actual time=0.010..0.020 rows=11 loops=432)
                           Index Cond: (movie_id = mk.movie_id)
                           Filter: (((note)::text !~~ '%(USA)%'::text) AND ((note)::text ~~ '%(200%)%'::text))
                           Rows Removed by Filter: 10
               ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..0.55 rows=1 width=23) (actual time=0.003..0.003 rows=1 loops=4955)
                     Index Cond: (id = mc.company_id)
                     Filter: ((country_code)::text <> '[us]'::text)
                     Rows Removed by Filter: 0
         ->  Seq Scan on company_type ct  (cost=0.00..1.04 rows=4 width=4) (actual time=0.000..0.000 rows=1 loops=4803)
 Planning Time: 86.458 ms
 Execution Time: 488.313 ms
(75 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/28b.sql_explained.sql
SET
                                                                                                            QUERY PLAN                                                                                                            
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=7387.11..7387.12 rows=1 width=96) (actual time=371.365..371.365 rows=1 loops=1)
   ->  Nested Loop  (cost=9.31..7387.10 rows=1 width=42) (actual time=7.979..371.310 rows=148 loops=1)
         ->  Nested Loop  (cost=8.89..7386.56 rows=1 width=27) (actual time=7.959..370.585 rows=150 loops=1)
               Join Filter: (ct.id = mc.company_type_id)
               ->  Nested Loop  (cost=8.89..7385.47 rows=1 width=31) (actual time=7.950..370.433 rows=150 loops=1)
                     Join Filter: (t.id = mc.movie_id)
                     ->  Nested Loop  (cost=8.46..7384.89 rows=1 width=43) (actual time=7.921..370.000 rows=13 loops=1)
                           Join Filter: (it1.id = mi.info_type_id)
                           Rows Removed by Join Filter: 7
                           ->  Seq Scan on info_type it1  (cost=0.00..2.41 rows=1 width=4) (actual time=0.007..0.014 rows=1 loops=1)
                                 Filter: ((info)::text = 'countries'::text)
                                 Rows Removed by Filter: 112
                           ->  Nested Loop  (cost=8.46..7382.46 rows=1 width=47) (actual time=7.913..369.976 rows=20 loops=1)
                                 Join Filter: (t.id = mi.movie_id)
                                 ->  Nested Loop  (cost=8.03..7380.89 rows=1 width=39) (actual time=6.237..355.828 rows=179 loops=1)
                                       Join Filter: (cct2.id = cc.status_id)
                                       Rows Removed by Join Filter: 394
                                       ->  Nested Loop  (cost=8.03..7379.81 rows=1 width=43) (actual time=6.234..355.509 rows=191 loops=1)
                                             Join Filter: (cct1.id = cc.subject_id)
                                             Rows Removed by Join Filter: 689
                                             ->  Seq Scan on comp_cast_type cct1  (cost=0.00..1.05 rows=1 width=4) (actual time=0.007..0.007 rows=1 loops=1)
                                                   Filter: ((kind)::text = 'crew'::text)
                                                   Rows Removed by Filter: 3
                                             ->  Nested Loop  (cost=8.03..7378.74 rows=1 width=47) (actual time=6.223..355.367 rows=880 loops=1)
                                                   ->  Nested Loop  (cost=7.61..7378.26 rows=1 width=35) (actual time=4.642..348.758 rows=2312 loops=1)
                                                         Join Filter: (kt.id = t.kind_id)
                                                         Rows Removed by Join Filter: 1695
                                                         ->  Nested Loop  (cost=7.61..7377.15 rows=1 width=39) (actual time=4.540..344.747 rows=2835 loops=1)
                                                               ->  Nested Loop  (cost=7.18..7376.66 rows=1 width=14) (actual time=4.519..274.929 rows=11708 loops=1)
                                                                     Join Filter: (it2.id = mi_idx.info_type_id)
                                                                     Rows Removed by Join Filter: 6993
                                                                     ->  Seq Scan on info_type it2  (cost=0.00..2.41 rows=1 width=4) (actual time=0.008..0.011 rows=1 loops=1)
                                                                           Filter: ((info)::text = 'rating'::text)
                                                                           Rows Removed by Filter: 112
                                                                     ->  Nested Loop  (cost=7.18..7373.13 rows=90 width=18) (actual time=4.509..272.420 rows=18701 loops=1)
                                                                           ->  Nested Loop  (cost=6.75..7304.56 rows=135 width=4) (actual time=4.483..138.507 rows=37091 loops=1)
                                                                                 ->  Seq Scan on keyword k  (cost=0.00..2961.55 rows=4 width=4) (actual time=1.147..20.834 rows=3 loops=1)
                                                                                       Filter: ((keyword)::text = ANY ('{murder,murder-in-title,blood,violence}'::text[]))
                                                                                       Rows Removed by Filter: 134167
                                                                                 ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1082.76 rows=299 width=8) (actual time=3.365..37.883 rows=12364 loops=3)
                                                                                       Recheck Cond: (keyword_id = k.id)
                                                                                       Heap Blocks: exact=26312
                                                                                       ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=1.837..1.837 rows=12364 loops=3)
                                                                                             Index Cond: (keyword_id = k.id)
                                                                           ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx  (cost=0.43..0.50 rows=1 width=14) (actual time=0.003..0.003 rows=1 loops=37091)
                                                                                 Index Cond: (movie_id = mk.movie_id)
                                                                                 Filter: ((info)::text > '6.5'::text)
                                                                                 Rows Removed by Filter: 2
                                                               ->  Index Scan using title_pkey on title t  (cost=0.43..0.49 rows=1 width=25) (actual time=0.006..0.006 rows=0 loops=11708)
                                                                     Index Cond: (id = mk.movie_id)
                                                                     Filter: (production_year > 2005)
                                                                     Rows Removed by Filter: 1
                                                         ->  Seq Scan on kind_type kt  (cost=0.00..1.09 rows=2 width=4) (actual time=0.000..0.001 rows=1 loops=2835)
                                                               Filter: ((kind)::text = ANY ('{movie,episode}'::text[]))
                                                               Rows Removed by Filter: 2
                                                   ->  Index Scan using movie_id_complete_cast on complete_cast cc  (cost=0.42..0.46 rows=2 width=12) (actual time=0.002..0.003 rows=0 loops=2312)
                                                         Index Cond: (movie_id = t.id)
                                       ->  Seq Scan on comp_cast_type cct2  (cost=0.00..1.05 rows=3 width=4) (actual time=0.000..0.001 rows=3 loops=191)
                                             Filter: ((kind)::text <> 'complete+verified'::text)
                                             Rows Removed by Filter: 0
                                 ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..1.56 rows=1 width=8) (actual time=0.076..0.079 rows=0 loops=179)
                                       Index Cond: (movie_id = mk.movie_id)
                                       Filter: ((info)::text = ANY ('{Sweden,Germany,Swedish,German}'::text[]))
                                       Rows Removed by Filter: 130
                     ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..0.57 rows=1 width=12) (actual time=0.015..0.031 rows=12 loops=13)
                           Index Cond: (movie_id = mk.movie_id)
                           Filter: (((note)::text !~~ '%(USA)%'::text) AND ((note)::text ~~ '%(200%)%'::text))
                           Rows Removed by Filter: 17
               ->  Seq Scan on company_type ct  (cost=0.00..1.04 rows=4 width=4) (actual time=0.000..0.000 rows=1 loops=150)
         ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..0.55 rows=1 width=23) (actual time=0.004..0.004 rows=1 loops=150)
               Index Cond: (id = mc.company_id)
               Filter: ((country_code)::text <> '[us]'::text)
               Rows Removed by Filter: 0
 Planning Time: 86.383 ms
 Execution Time: 371.620 ms
(75 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/28c.sql_explained.sql
SET
                                                                                                         QUERY PLAN                                                                                                         
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=7394.43..7394.44 rows=1 width=96) (actual time=2345.883..2345.884 rows=1 loops=1)
   ->  Nested Loop  (cost=9.31..7394.42 rows=1 width=42) (actual time=10.276..2343.701 rows=8373 loops=1)
         Join Filter: (it2.id = mi_idx.info_type_id)
         Rows Removed by Join Filter: 16430
         ->  Seq Scan on info_type it2  (cost=0.00..2.41 rows=1 width=4) (actual time=0.012..0.013 rows=1 loops=1)
               Filter: ((info)::text = 'rating'::text)
               Rows Removed by Filter: 112
         ->  Nested Loop  (cost=9.31..7391.99 rows=1 width=46) (actual time=10.260..2341.455 rows=24803 loops=1)
               Join Filter: (t.id = mi_idx.movie_id)
               ->  Nested Loop  (cost=8.88..7391.46 rows=1 width=56) (actual time=10.233..2314.884 rows=8493 loops=1)
                     Join Filter: (kt.id = t.kind_id)
                     Rows Removed by Join Filter: 712
                     ->  Nested Loop  (cost=8.88..7390.35 rows=1 width=60) (actual time=10.225..2304.786 rows=8788 loops=1)
                           Join Filter: (mi.movie_id = t.id)
                           ->  Nested Loop  (cost=8.45..7389.84 rows=1 width=35) (actual time=5.184..2252.429 rows=22323 loops=1)
                                 Join Filter: (it1.id = mi.info_type_id)
                                 Rows Removed by Join Filter: 5071
                                 ->  Seq Scan on info_type it1  (cost=0.00..2.41 rows=1 width=4) (actual time=0.003..0.010 rows=1 loops=1)
                                       Filter: ((info)::text = 'countries'::text)
                                       Rows Removed by Filter: 112
                                 ->  Nested Loop  (cost=8.45..7387.38 rows=4 width=39) (actual time=5.180..2248.538 rows=27394 loops=1)
                                       ->  Nested Loop  (cost=8.02..7383.59 rows=2 width=31) (actual time=4.942..378.968 rows=22725 loops=1)
                                             ->  Nested Loop  (cost=7.60..7381.96 rows=3 width=16) (actual time=4.929..314.254 rows=24082 loops=1)
                                                   Join Filter: (ct.id = mc.company_type_id)
                                                   Rows Removed by Join Filter: 7
                                                   ->  Nested Loop  (cost=7.60..7380.76 rows=3 width=20) (actual time=4.916..307.375 rows=24082 loops=1)
                                                         ->  Nested Loop  (cost=7.17..7373.86 rows=12 width=8) (actual time=4.856..218.125 rows=6704 loops=1)
                                                               Join Filter: (cc.subject_id = cct1.id)
                                                               Rows Removed by Join Filter: 3832
                                                               ->  Seq Scan on comp_cast_type cct1  (cost=0.00..1.05 rows=1 width=4) (actual time=0.007..0.008 rows=1 loops=1)
                                                                     Filter: ((kind)::text = 'cast'::text)
                                                                     Rows Removed by Filter: 3
                                                               ->  Nested Loop  (cost=7.17..7372.22 rows=47 width=12) (actual time=4.848..216.679 rows=10536 loops=1)
                                                                     Join Filter: (cct2.id = cc.status_id)
                                                                     Rows Removed by Join Filter: 9488
                                                                     ->  Seq Scan on comp_cast_type cct2  (cost=0.00..1.05 rows=1 width=4) (actual time=0.003..0.004 rows=1 loops=1)
                                                                           Filter: ((kind)::text = 'complete'::text)
                                                                           Rows Removed by Filter: 3
                                                                     ->  Nested Loop  (cost=7.17..7368.82 rows=188 width=16) (actual time=4.833..213.975 rows=20024 loops=1)
                                                                           ->  Nested Loop  (cost=6.75..7304.56 rows=135 width=4) (actual time=4.447..138.995 rows=37091 loops=1)
                                                                                 ->  Seq Scan on keyword k  (cost=0.00..2961.55 rows=4 width=4) (actual time=1.112..21.024 rows=3 loops=1)
                                                                                       Filter: ((keyword)::text = ANY ('{murder,murder-in-title,blood,violence}'::text[]))
                                                                                       Rows Removed by Filter: 134167
                                                                                 ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1082.76 rows=299 width=8) (actual time=3.376..38.026 rows=12364 loops=3)
                                                                                       Recheck Cond: (keyword_id = k.id)
                                                                                       Heap Blocks: exact=26312
                                                                                       ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=1.848..1.848 rows=12364 loops=3)
                                                                                             Index Cond: (keyword_id = k.id)
                                                                           ->  Index Scan using movie_id_complete_cast on complete_cast cc  (cost=0.42..0.46 rows=2 width=12) (actual time=0.002..0.002 rows=1 loops=37091)
                                                                                 Index Cond: (movie_id = mk.movie_id)
                                                         ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..0.57 rows=1 width=12) (actual time=0.009..0.013 rows=4 loops=6704)
                                                               Index Cond: (movie_id = mk.movie_id)
                                                               Filter: (((note)::text !~~ '%(USA)%'::text) AND ((note)::text ~~ '%(200%)%'::text))
                                                               Rows Removed by Filter: 8
                                                   ->  Materialize  (cost=0.00..1.06 rows=4 width=4) (actual time=0.000..0.000 rows=1 loops=24082)
                                                         ->  Seq Scan on company_type ct  (cost=0.00..1.04 rows=4 width=4) (actual time=0.009..0.010 rows=2 loops=1)
                                             ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..0.55 rows=1 width=23) (actual time=0.002..0.002 rows=1 loops=24082)
                                                   Index Cond: (id = mc.company_id)
                                                   Filter: ((country_code)::text <> '[us]'::text)
                                                   Rows Removed by Filter: 0
                                       ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..1.87 rows=2 width=8) (actual time=0.069..0.082 rows=1 loops=22725)
                                             Index Cond: (movie_id = mk.movie_id)
                                             Filter: ((info)::text = ANY ('{Sweden,Norway,Germany,Denmark,Swedish,Danish,Norwegian,German,USA,American}'::text[]))
                                             Rows Removed by Filter: 203
                           ->  Index Scan using title_pkey on title t  (cost=0.43..0.49 rows=1 width=25) (actual time=0.002..0.002 rows=0 loops=22323)
                                 Index Cond: (id = mk.movie_id)
                                 Filter: (production_year > 2005)
                                 Rows Removed by Filter: 1
                     ->  Seq Scan on kind_type kt  (cost=0.00..1.09 rows=2 width=4) (actual time=0.000..0.001 rows=1 loops=8788)
                           Filter: ((kind)::text = ANY ('{movie,episode}'::text[]))
                           Rows Removed by Filter: 0
               ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx  (cost=0.43..0.50 rows=3 width=14) (actual time=0.002..0.003 rows=3 loops=8493)
                     Index Cond: (movie_id = mk.movie_id)
                     Filter: ((info)::text < '8.5'::text)
                     Rows Removed by Filter: 0
 Planning Time: 88.032 ms
 Execution Time: 2346.138 ms
(77 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/29a.sql_explained.sql
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=3945.49..3945.50 rows=1 width=96) (actual time=25.595..25.595 rows=1 loops=1)
   ->  Nested Loop  (cost=11.16..3945.49 rows=1 width=48) (actual time=7.435..25.316 rows=1620 loops=1)
         Join Filter: (it3.id = pi.info_type_id)
         Rows Removed by Join Filter: 3270
         ->  Seq Scan on info_type it3  (cost=0.00..2.41 rows=1 width=4) (actual time=0.008..0.014 rows=1 loops=1)
               Filter: ((info)::text = 'trivia'::text)
               Rows Removed by Filter: 112
         ->  Nested Loop  (cost=11.16..3943.06 rows=1 width=52) (actual time=7.410..24.977 rows=4890 loops=1)
               Join Filter: (n.id = pi.person_id)
               ->  Nested Loop  (cost=10.73..3922.80 rows=1 width=60) (actual time=7.385..23.549 rows=30 loops=1)
                     Join Filter: (cc.subject_id = cct1.id)
                     ->  Nested Loop  (cost=10.73..3921.74 rows=1 width=64) (actual time=7.382..23.513 rows=30 loops=1)
                           ->  Nested Loop  (cost=10.30..3919.44 rows=1 width=45) (actual time=7.354..23.419 rows=30 loops=1)
                                 Join Filter: (ci.role_id = rt.id)
                                 ->  Nested Loop  (cost=10.30..3918.28 rows=1 width=49) (actual time=7.343..23.366 rows=30 loops=1)
                                       Join Filter: (mi.info_type_id = it.id)
                                       ->  Nested Loop  (cost=10.30..3915.85 rows=1 width=53) (actual time=7.337..23.257 rows=30 loops=1)
                                             ->  Nested Loop  (cost=9.88..3913.83 rows=1 width=57) (actual time=7.324..22.861 rows=132 loops=1)
                                                   Join Filter: (t.id = mc.movie_id)
                                                   ->  Nested Loop  (cost=9.45..3908.99 rows=1 width=73) (actual time=7.297..22.768 rows=6 loops=1)
                                                         ->  Nested Loop  (cost=9.02..3902.76 rows=2 width=61) (actual time=6.513..22.150 rows=132 loops=1)
                                                               ->  Nested Loop  (cost=8.60..3899.85 rows=1 width=57) (actual time=6.458..21.544 rows=76 loops=1)
                                                                     Join Filter: (t.id = ci.movie_id)
                                                                     ->  Nested Loop  (cost=8.03..3852.25 rows=1 width=41) (actual time=6.428..19.975 rows=2 loops=1)
                                                                           Join Filter: (t.id = mi.movie_id)
                                                                           ->  Nested Loop  (cost=7.60..3809.27 rows=1 width=33) (actual time=6.356..19.627 rows=1 loops=1)
                                                                                 Join Filter: (cct2.id = cc.status_id)
                                                                                 ->  Seq Scan on comp_cast_type cct2  (cost=0.00..1.05 rows=1 width=4) (actual time=0.007..0.008 rows=1 loops=1)
                                                                                       Filter: ((kind)::text = 'complete+verified'::text)
                                                                                       Rows Removed by Filter: 3
                                                                                 ->  Nested Loop  (cost=7.60..3808.21 rows=1 width=37) (actual time=6.347..19.617 rows=1 loops=1)
                                                                                       Join Filter: (t.id = cc.movie_id)
                                                                                       ->  Nested Loop  (cost=7.18..3805.41 rows=1 width=25) (actual time=6.322..19.591 rows=1 loops=1)
                                                                                             ->  Nested Loop  (cost=6.75..3732.91 rows=34 width=4) (actual time=0.178..14.154 rows=414 loops=1)
                                                                                                   ->  Seq Scan on keyword k  (cost=0.00..2626.12 rows=1 width=4) (actual time=0.052..11.454 rows=1 loops=1)
                                                                                                         Filter: ((keyword)::text = 'computer-animation'::text)
                                                                                                         Rows Removed by Filter: 134169
                                                                                                   ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1103.80 rows=299 width=8) (actual time=0.124..2.646 rows=414 loops=1)
                                                                                                         Recheck Cond: (keyword_id = k.id)
                                                                                                         Heap Blocks: exact=358
                                                                                                         ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=0.070..0.070 rows=414 loops=1)
                                                                                                               Index Cond: (keyword_id = k.id)
                                                                                             ->  Index Scan using title_pkey on title t  (cost=0.43..2.12 rows=1 width=21) (actual time=0.013..0.013 rows=0 loops=414)
                                                                                                   Index Cond: (id = mk.movie_id)
                                                                                                   Filter: ((production_year >= 2000) AND (production_year <= 2010) AND ((title)::text = 'Shrek 2'::text))
                                                                                                   Rows Removed by Filter: 1
                                                                                       ->  Index Scan using movie_id_complete_cast on complete_cast cc  (cost=0.42..2.77 rows=2 width=12) (actual time=0.022..0.023 rows=1 loops=1)
                                                                                             Index Cond: (movie_id = mk.movie_id)
                                                                           ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..42.97 rows=1 width=8) (actual time=0.070..0.346 rows=2 loops=1)
                                                                                 Index Cond: (movie_id = mk.movie_id)
                                                                                 Filter: ((info IS NOT NULL) AND (((info)::text ~~ 'Japan:%200%'::text) OR ((info)::text ~~ 'USA:%200%'::text)))
                                                                                 Rows Removed by Filter: 455
                                                                     ->  Index Scan using movie_id_cast_info on cast_info ci  (cost=0.56..47.58 rows=1 width=16) (actual time=0.017..0.775 rows=38 loops=2)
                                                                           Index Cond: (movie_id = mk.movie_id)
                                                                           Filter: ((note)::text = ANY ('{(voice),"(voice) (uncredited)","(voice: English version)"}'::text[]))
                                                                           Rows Removed by Filter: 191
                                                               ->  Index Only Scan using person_id_aka_name on aka_name an  (cost=0.42..2.89 rows=2 width=4) (actual time=0.006..0.007 rows=2 loops=76)
                                                                     Index Cond: (person_id = ci.person_id)
                                                                     Heap Fetches: 132
                                                         ->  Index Scan using char_name_pkey on char_name chn  (cost=0.43..2.22 rows=1 width=20) (actual time=0.004..0.004 rows=0 loops=132)
                                                               Index Cond: (id = ci.person_role_id)
                                                               Filter: ((name)::text = 'Queen'::text)
                                                               Rows Removed by Filter: 1
                                                   ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..4.77 rows=5 width=8) (actual time=0.007..0.011 rows=22 loops=6)
                                                         Index Cond: (movie_id = mk.movie_id)
                                             ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..2.03 rows=1 width=4) (actual time=0.003..0.003 rows=0 loops=132)
                                                   Index Cond: (id = mc.company_id)
                                                   Filter: ((country_code)::text = '[us]'::text)
                                                   Rows Removed by Filter: 1
                                       ->  Seq Scan on info_type it  (cost=0.00..2.41 rows=1 width=4) (actual time=0.003..0.003 rows=1 loops=30)
                                             Filter: ((info)::text = 'release dates'::text)
                                             Rows Removed by Filter: 15
                                 ->  Seq Scan on role_type rt  (cost=0.00..1.15 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=30)
                                       Filter: ((role)::text = 'actress'::text)
                                       Rows Removed by Filter: 1
                           ->  Index Scan using name_pkey on name n  (cost=0.43..2.30 rows=1 width=19) (actual time=0.003..0.003 rows=1 loops=30)
                                 Index Cond: (id = ci.person_id)
                                 Filter: (((name)::text ~~ '%An%'::text) AND ((gender)::text = 'f'::text))
                     ->  Seq Scan on comp_cast_type cct1  (cost=0.00..1.05 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=30)
                           Filter: ((kind)::text = 'cast'::text)
               ->  Index Scan using person_id_person_info on person_info pi  (cost=0.43..19.93 rows=26 width=8) (actual time=0.002..0.027 rows=163 loops=30)
                     Index Cond: (person_id = an.person_id)
 Planning Time: 118.806 ms
 Execution Time: 25.908 ms
(84 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/29b.sql_explained.sql
SET
                                                                                                                 QUERY PLAN                                                                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=4148.76..4148.77 rows=1 width=96) (actual time=176.370..176.370 rows=1 loops=1)
   ->  Nested Loop  (cost=11.16..4148.76 rows=1 width=48) (actual time=26.133..176.357 rows=15 loops=1)
         ->  Nested Loop  (cost=10.74..4146.73 rows=1 width=52) (actual time=26.122..176.136 rows=66 loops=1)
               Join Filter: (pi.info_type_id = it3.id)
               Rows Removed by Join Filter: 10692
               ->  Nested Loop  (cost=10.74..4144.31 rows=1 width=56) (actual time=24.845..84.293 rows=10758 loops=1)
                     Join Filter: (mi.info_type_id = it.id)
                     ->  Nested Loop  (cost=10.74..4141.88 rows=1 width=60) (actual time=24.839..51.713 rows=10758 loops=1)
                           Join Filter: (n.id = pi.person_id)
                           ->  Nested Loop  (cost=10.31..4121.62 rows=1 width=68) (actual time=24.822..48.138 rows=66 loops=1)
                                 ->  Nested Loop  (cost=9.88..4117.61 rows=1 width=56) (actual time=24.813..48.006 rows=66 loops=1)
                                       Join Filter: (n.id = an.person_id)
                                       ->  Nested Loop  (cost=9.46..4114.69 rows=1 width=52) (actual time=24.798..47.917 rows=22 loops=1)
                                             Join Filter: (mi.movie_id = t.id)
                                             ->  Nested Loop  (cost=9.03..4110.43 rows=2 width=55) (actual time=8.339..47.531 rows=193 loops=1)
                                                   Join Filter: (mc.movie_id = mi.movie_id)
                                                   ->  Nested Loop  (cost=8.59..3981.80 rows=3 width=47) (actual time=2.943..33.836 rows=167 loops=1)
                                                         Join Filter: (ci.movie_id = mc.movie_id)
                                                         ->  Nested Loop  (cost=8.16..3976.97 rows=1 width=39) (actual time=2.914..33.620 rows=6 loops=1)
                                                               ->  Nested Loop  (cost=7.73..3974.67 rows=1 width=20) (actual time=1.245..31.394 rows=175 loops=1)
                                                                     Join Filter: (rt.id = ci.role_id)
                                                                     Rows Removed by Join Filter: 528
                                                                     ->  Seq Scan on role_type rt  (cost=0.00..1.15 rows=1 width=4) (actual time=0.014..0.015 rows=1 loops=1)
                                                                           Filter: ((role)::text = 'actress'::text)
                                                                           Rows Removed by Filter: 11
                                                                     ->  Nested Loop  (cost=7.73..3973.48 rows=3 width=24) (actual time=0.937..31.306 rows=703 loops=1)
                                                                           ->  Nested Loop  (cost=7.17..3830.71 rows=3 width=8) (actual time=0.896..14.778 rows=23 loops=1)
                                                                                 Join Filter: (cc.status_id = cct2.id)
                                                                                 Rows Removed by Join Filter: 51
                                                                                 ->  Seq Scan on comp_cast_type cct2  (cost=0.00..1.05 rows=1 width=4) (actual time=0.008..0.009 rows=1 loops=1)
                                                                                       Filter: ((kind)::text = 'complete+verified'::text)
                                                                                       Rows Removed by Filter: 3
                                                                                 ->  Nested Loop  (cost=7.17..3829.51 rows=12 width=12) (actual time=0.354..14.756 rows=74 loops=1)
                                                                                       Join Filter: (cc.subject_id = cct1.id)
                                                                                       Rows Removed by Join Filter: 16
                                                                                       ->  Seq Scan on comp_cast_type cct1  (cost=0.00..1.05 rows=1 width=4) (actual time=0.001..0.002 rows=1 loops=1)
                                                                                             Filter: ((kind)::text = 'cast'::text)
                                                                                             Rows Removed by Filter: 3
                                                                                       ->  Nested Loop  (cost=7.17..3827.87 rows=47 width=16) (actual time=0.352..14.735 rows=90 loops=1)
                                                                                             ->  Nested Loop  (cost=6.75..3732.91 rows=34 width=4) (actual time=0.141..12.544 rows=414 loops=1)
                                                                                                   ->  Seq Scan on keyword k  (cost=0.00..2626.12 rows=1 width=4) (actual time=0.034..11.089 rows=1 loops=1)
                                                                                                         Filter: ((keyword)::text = 'computer-animation'::text)
                                                                                                         Rows Removed by Filter: 134169
                                                                                                   ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1103.80 rows=299 width=8) (actual time=0.105..1.409 rows=414 loops=1)
                                                                                                         Recheck Cond: (keyword_id = k.id)
                                                                                                         Heap Blocks: exact=358
                                                                                                         ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=0.054..0.054 rows=414 loops=1)
                                                                                                               Index Cond: (keyword_id = k.id)
                                                                                             ->  Index Scan using movie_id_complete_cast on complete_cast cc  (cost=0.42..2.77 rows=2 width=12) (actual time=0.005..0.005 rows=0 loops=414)
                                                                                                   Index Cond: (movie_id = mk.movie_id)
                                                                           ->  Index Scan using movie_id_cast_info on cast_info ci  (cost=0.56..47.58 rows=1 width=16) (actual time=0.089..0.714 rows=31 loops=23)
                                                                                 Index Cond: (movie_id = mk.movie_id)
                                                                                 Filter: ((note)::text = ANY ('{(voice),"(voice) (uncredited)","(voice: English version)"}'::text[]))
                                                                                 Rows Removed by Filter: 116
                                                               ->  Index Scan using name_pkey on name n  (cost=0.43..2.30 rows=1 width=19) (actual time=0.012..0.012 rows=0 loops=175)
                                                                     Index Cond: (id = ci.person_id)
                                                                     Filter: (((name)::text ~~ '%An%'::text) AND ((gender)::text = 'f'::text))
                                                                     Rows Removed by Filter: 1
                                                         ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..4.77 rows=5 width=8) (actual time=0.018..0.029 rows=28 loops=6)
                                                               Index Cond: (movie_id = mk.movie_id)
                                                   ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..42.86 rows=1 width=8) (actual time=0.018..0.082 rows=1 loops=167)
                                                         Index Cond: (movie_id = mk.movie_id)
                                                         Filter: ((info)::text ~~ 'USA:%200%'::text)
                                                         Rows Removed by Filter: 422
                                             ->  Index Scan using title_pkey on title t  (cost=0.43..2.12 rows=1 width=21) (actual time=0.002..0.002 rows=0 loops=193)
                                                   Index Cond: (id = mk.movie_id)
                                                   Filter: ((production_year >= 2000) AND (production_year <= 2005) AND ((title)::text = 'Shrek 2'::text))
                                                   Rows Removed by Filter: 1
                                       ->  Index Only Scan using person_id_aka_name on aka_name an  (cost=0.42..2.89 rows=2 width=4) (actual time=0.002..0.003 rows=3 loops=22)
                                             Index Cond: (person_id = ci.person_id)
                                             Heap Fetches: 66
                                 ->  Index Scan using char_name_pkey on char_name chn  (cost=0.43..2.22 rows=1 width=20) (actual time=0.002..0.002 rows=1 loops=66)
                                       Index Cond: (id = ci.person_role_id)
                                       Filter: ((name)::text = 'Queen'::text)
                           ->  Index Scan using person_id_person_info on person_info pi  (cost=0.43..19.93 rows=26 width=8) (actual time=0.002..0.028 rows=163 loops=66)
                                 Index Cond: (person_id = an.person_id)
                     ->  Seq Scan on info_type it  (cost=0.00..2.41 rows=1 width=4) (actual time=0.003..0.003 rows=1 loops=10758)
                           Filter: ((info)::text = 'release dates'::text)
                           Rows Removed by Filter: 15
               ->  Seq Scan on info_type it3  (cost=0.00..2.41 rows=1 width=4) (actual time=0.003..0.008 rows=1 loops=10758)
                     Filter: ((info)::text = 'height'::text)
                     Rows Removed by Filter: 111
         ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..2.03 rows=1 width=4) (actual time=0.003..0.003 rows=0 loops=66)
               Index Cond: (id = mc.company_id)
               Filter: ((country_code)::text = '[us]'::text)
               Rows Removed by Filter: 1
 Planning Time: 116.707 ms
 Execution Time: 176.724 ms
(88 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/29c.sql_explained.sql
SET
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=4547.37..4547.38 rows=1 width=96) (actual time=554.928..554.929 rows=1 loops=1)
   ->  Nested Loop  (cost=11.16..4547.36 rows=1 width=48) (actual time=69.687..551.521 rows=16308 loops=1)
         Join Filter: (cc.status_id = cct2.id)
         Rows Removed by Join Filter: 11714
         ->  Nested Loop  (cost=11.16..4546.30 rows=1 width=52) (actual time=16.308..523.227 rows=28022 loops=1)
               ->  Nested Loop  (cost=10.74..4544.27 rows=1 width=56) (actual time=15.924..299.856 rows=149974 loops=1)
                     Join Filter: (n.id = an.person_id)
                     ->  Nested Loop  (cost=10.32..4541.38 rows=1 width=68) (actual time=15.895..190.634 rows=36250 loops=1)
                           Join Filter: (it3.id = pi.info_type_id)
                           Rows Removed by Join Filter: 117713
                           ->  Seq Scan on info_type it3  (cost=0.00..2.41 rows=1 width=4) (actual time=0.008..0.014 rows=1 loops=1)
                                 Filter: ((info)::text = 'trivia'::text)
                                 Rows Removed by Filter: 112
                           ->  Nested Loop  (cost=10.32..4538.95 rows=1 width=72) (actual time=15.883..180.110 rows=153963 loops=1)
                                 Join Filter: (n.id = pi.person_id)
                                 ->  Nested Loop  (cost=9.89..4518.69 rows=1 width=64) (actual time=15.852..135.607 rows=1206 loops=1)
                                       Join Filter: (ci.role_id = rt.id)
                                       ->  Nested Loop  (cost=9.89..4517.53 rows=1 width=68) (actual time=15.849..134.233 rows=1206 loops=1)
                                             ->  Nested Loop  (cost=9.46..4515.32 rows=1 width=56) (actual time=15.820..131.688 rows=1455 loops=1)
                                                   Join Filter: (cc.subject_id = cct1.id)
                                                   ->  Nested Loop  (cost=9.46..4514.26 rows=1 width=60) (actual time=15.813..130.340 rows=1455 loops=1)
                                                         Join Filter: (t.id = mc.movie_id)
                                                         ->  Nested Loop  (cost=9.03..4509.42 rows=1 width=76) (actual time=15.778..129.319 rows=58 loops=1)
                                                               Join Filter: (mi.info_type_id = it.id)
                                                               ->  Nested Loop  (cost=9.03..4506.99 rows=1 width=80) (actual time=15.771..129.081 rows=58 loops=1)
                                                                     ->  Nested Loop  (cost=8.61..4504.20 rows=1 width=68) (actual time=13.943..128.765 rows=75 loops=1)
                                                                           ->  Nested Loop  (cost=8.18..4501.91 rows=1 width=49) (actual time=2.386..94.771 rows=7505 loops=1)
                                                                                 Join Filter: (t.id = ci.movie_id)
                                                                                 ->  Nested Loop  (cost=7.61..4406.63 rows=2 width=33) (actual time=0.726..40.996 rows=357 loops=1)
                                                                                       Join Filter: (t.id = mi.movie_id)
                                                                                       ->  Nested Loop  (cost=7.18..3804.91 rows=14 width=25) (actual time=0.155..17.704 rows=249 loops=1)
                                                                                             ->  Nested Loop  (cost=6.75..3732.91 rows=34 width=4) (actual time=0.141..14.108 rows=414 loops=1)
                                                                                                   ->  Seq Scan on keyword k  (cost=0.00..2626.12 rows=1 width=4) (actual time=0.034..12.679 rows=1 loops=1)
                                                                                                         Filter: ((keyword)::text = 'computer-animation'::text)
                                                                                                         Rows Removed by Filter: 134169
                                                                                                   ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1103.80 rows=299 width=8) (actual time=0.105..1.361 rows=414 loops=1)
                                                                                                         Recheck Cond: (keyword_id = k.id)
                                                                                                         Heap Blocks: exact=358
                                                                                                         ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=0.054..0.054 rows=414 loops=1)
                                                                                                               Index Cond: (keyword_id = k.id)
                                                                                             ->  Index Scan using title_pkey on title t  (cost=0.43..2.12 rows=1 width=21) (actual time=0.008..0.008 rows=1 loops=414)
                                                                                                   Index Cond: (id = mk.movie_id)
                                                                                                   Filter: ((production_year >= 2000) AND (production_year <= 2010))
                                                                                                   Rows Removed by Filter: 0
                                                                                       ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..42.97 rows=1 width=8) (actual time=0.041..0.093 rows=1 loops=249)
                                                                                             Index Cond: (movie_id = mk.movie_id)
                                                                                             Filter: ((info IS NOT NULL) AND (((info)::text ~~ 'Japan:%200%'::text) OR ((info)::text ~~ 'USA:%200%'::text)))
                                                                                             Rows Removed by Filter: 88
                                                                                 ->  Index Scan using movie_id_cast_info on cast_info ci  (cost=0.56..47.63 rows=1 width=16) (actual time=0.026..0.147 rows=21 loops=357)
                                                                                       Index Cond: (movie_id = mk.movie_id)
                                                                                       Filter: ((note)::text = ANY ('{(voice),"(voice: Japanese version)","(voice) (uncredited)","(voice: English version)"}'::text[]))
                                                                                       Rows Removed by Filter: 72
                                                                           ->  Index Scan using name_pkey on name n  (cost=0.43..2.29 rows=1 width=19) (actual time=0.004..0.004 rows=0 loops=7505)
                                                                                 Index Cond: (id = ci.person_id)
                                                                                 Filter: (((name)::text ~~ '%An%'::text) AND ((gender)::text = 'f'::text))
                                                                                 Rows Removed by Filter: 1
                                                                     ->  Index Scan using movie_id_complete_cast on complete_cast cc  (cost=0.42..2.77 rows=2 width=12) (actual time=0.003..0.004 rows=1 loops=75)
                                                                           Index Cond: (movie_id = t.id)
                                                               ->  Seq Scan on info_type it  (cost=0.00..2.41 rows=1 width=4) (actual time=0.003..0.003 rows=1 loops=58)
                                                                     Filter: ((info)::text = 'release dates'::text)
                                                                     Rows Removed by Filter: 15
                                                         ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..4.77 rows=5 width=8) (actual time=0.007..0.012 rows=25 loops=58)
                                                               Index Cond: (movie_id = mk.movie_id)
                                                   ->  Seq Scan on comp_cast_type cct1  (cost=0.00..1.05 rows=1 width=4) (actual time=0.000..0.000 rows=1 loops=1455)
                                                         Filter: ((kind)::text = 'cast'::text)
                                             ->  Index Scan using char_name_pkey on char_name chn  (cost=0.43..2.21 rows=1 width=20) (actual time=0.001..0.001 rows=1 loops=1455)
                                                   Index Cond: (id = ci.person_role_id)
                                       ->  Seq Scan on role_type rt  (cost=0.00..1.15 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=1206)
                                             Filter: ((role)::text = 'actress'::text)
                                             Rows Removed by Filter: 1
                                 ->  Index Scan using person_id_person_info on person_info pi  (cost=0.43..19.93 rows=26 width=8) (actual time=0.002..0.019 rows=128 loops=1206)
                                       Index Cond: (person_id = ci.person_id)
                     ->  Index Only Scan using person_id_aka_name on aka_name an  (cost=0.42..2.87 rows=2 width=4) (actual time=0.001..0.002 rows=4 loops=36250)
                           Index Cond: (person_id = pi.person_id)
                           Heap Fetches: 149974
               ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..2.03 rows=1 width=4) (actual time=0.001..0.001 rows=0 loops=149974)
                     Index Cond: (id = mc.company_id)
                     Filter: ((country_code)::text = '[us]'::text)
                     Rows Removed by Filter: 1
         ->  Seq Scan on comp_cast_type cct2  (cost=0.00..1.05 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=28022)
               Filter: ((kind)::text = 'complete+verified'::text)
               Rows Removed by Filter: 3
 Planning Time: 119.845 ms
 Execution Time: 555.264 ms
(84 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/2a.sql_explained.sql
SET
                                                                               QUERY PLAN                                                                                
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=3832.24..3832.25 rows=1 width=32) (actual time=591.121..591.121 rows=1 loops=1)
   ->  Nested Loop  (cost=8.03..3832.22 rows=7 width=17) (actual time=7.354..589.987 rows=7834 loops=1)
         Join Filter: (mc.movie_id = t.id)
         ->  Nested Loop  (cost=7.60..3828.74 rows=7 width=8) (actual time=7.336..555.480 rows=7834 loops=1)
               ->  Nested Loop  (cost=7.18..3752.99 rows=170 width=12) (actual time=6.658..263.715 rows=148552 loops=1)
                     ->  Nested Loop  (cost=6.75..3732.91 rows=34 width=4) (actual time=6.616..79.885 rows=41840 loops=1)
                           ->  Seq Scan on keyword k  (cost=0.00..2626.12 rows=1 width=4) (actual time=0.513..11.604 rows=1 loops=1)
                                 Filter: ((keyword)::text = 'character-name-in-title'::text)
                                 Rows Removed by Filter: 134169
                           ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1103.80 rows=299 width=8) (actual time=6.100..63.911 rows=41840 loops=1)
                                 Recheck Cond: (keyword_id = k.id)
                                 Heap Blocks: exact=11541
                                 ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=4.047..4.047 rows=41840 loops=1)
                                       Index Cond: (keyword_id = k.id)
                     ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..0.54 rows=5 width=8) (actual time=0.003..0.004 rows=4 loops=41840)
                           Index Cond: (movie_id = mk.movie_id)
               ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..0.45 rows=1 width=4) (actual time=0.002..0.002 rows=0 loops=148552)
                     Index Cond: (id = mc.company_id)
                     Filter: ((country_code)::text = '[de]'::text)
                     Rows Removed by Filter: 1
         ->  Index Scan using title_pkey on title t  (cost=0.43..0.49 rows=1 width=21) (actual time=0.004..0.004 rows=1 loops=7834)
               Index Cond: (id = mk.movie_id)
 Planning Time: 2.152 ms
 Execution Time: 591.299 ms
(24 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/2b.sql_explained.sql
SET
                                                                               QUERY PLAN                                                                                
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=3829.74..3829.75 rows=1 width=32) (actual time=564.193..564.193 rows=1 loops=1)
   ->  Nested Loop  (cost=8.03..3829.73 rows=2 width=17) (actual time=9.027..563.438 rows=5228 loops=1)
         Join Filter: (mc.movie_id = t.id)
         ->  Nested Loop  (cost=7.60..3828.74 rows=2 width=8) (actual time=9.007..540.208 rows=5228 loops=1)
               ->  Nested Loop  (cost=7.18..3752.99 rows=170 width=12) (actual time=6.693..259.276 rows=148552 loops=1)
                     ->  Nested Loop  (cost=6.75..3732.91 rows=34 width=4) (actual time=6.654..78.535 rows=41840 loops=1)
                           ->  Seq Scan on keyword k  (cost=0.00..2626.12 rows=1 width=4) (actual time=0.652..11.738 rows=1 loops=1)
                                 Filter: ((keyword)::text = 'character-name-in-title'::text)
                                 Rows Removed by Filter: 134169
                           ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1103.80 rows=299 width=8) (actual time=5.999..62.314 rows=41840 loops=1)
                                 Recheck Cond: (keyword_id = k.id)
                                 Heap Blocks: exact=11541
                                 ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=3.946..3.946 rows=41840 loops=1)
                                       Index Cond: (keyword_id = k.id)
                     ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..0.54 rows=5 width=8) (actual time=0.003..0.004 rows=4 loops=41840)
                           Index Cond: (movie_id = mk.movie_id)
               ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..0.45 rows=1 width=4) (actual time=0.002..0.002 rows=0 loops=148552)
                     Index Cond: (id = mc.company_id)
                     Filter: ((country_code)::text = '[nl]'::text)
                     Rows Removed by Filter: 1
         ->  Index Scan using title_pkey on title t  (cost=0.43..0.49 rows=1 width=21) (actual time=0.004..0.004 rows=1 loops=5228)
               Index Cond: (id = mk.movie_id)
 Planning Time: 2.413 ms
 Execution Time: 564.368 ms
(24 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/2c.sql_explained.sql
SET
                                                                               QUERY PLAN                                                                                
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=3829.24..3829.25 rows=1 width=32) (actual time=539.726..539.726 rows=1 loops=1)
   ->  Nested Loop  (cost=8.03..3829.24 rows=1 width=17) (actual time=539.722..539.722 rows=0 loops=1)
         Join Filter: (mc.movie_id = t.id)
         ->  Nested Loop  (cost=7.60..3828.74 rows=1 width=8) (actual time=539.721..539.721 rows=0 loops=1)
               ->  Nested Loop  (cost=7.18..3752.99 rows=170 width=12) (actual time=6.769..261.546 rows=148552 loops=1)
                     ->  Nested Loop  (cost=6.75..3732.91 rows=34 width=4) (actual time=6.724..79.835 rows=41840 loops=1)
                           ->  Seq Scan on keyword k  (cost=0.00..2626.12 rows=1 width=4) (actual time=0.662..11.838 rows=1 loops=1)
                                 Filter: ((keyword)::text = 'character-name-in-title'::text)
                                 Rows Removed by Filter: 134169
                           ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1103.80 rows=299 width=8) (actual time=6.059..63.094 rows=41840 loops=1)
                                 Recheck Cond: (keyword_id = k.id)
                                 Heap Blocks: exact=11541
                                 ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=4.005..4.006 rows=41840 loops=1)
                                       Index Cond: (keyword_id = k.id)
                     ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..0.54 rows=5 width=8) (actual time=0.003..0.004 rows=4 loops=41840)
                           Index Cond: (movie_id = mk.movie_id)
               ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..0.45 rows=1 width=4) (actual time=0.002..0.002 rows=0 loops=148552)
                     Index Cond: (id = mc.company_id)
                     Filter: ((country_code)::text = '[sm]'::text)
                     Rows Removed by Filter: 1
         ->  Index Scan using title_pkey on title t  (cost=0.43..0.49 rows=1 width=21) (never executed)
               Index Cond: (id = mk.movie_id)
 Planning Time: 2.387 ms
 Execution Time: 539.901 ms
(24 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/2d.sql_explained.sql
SET
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=3845.82..3845.83 rows=1 width=32) (actual time=718.940..718.940 rows=1 loops=1)
   ->  Nested Loop  (cost=8.03..3845.67 rows=61 width=17) (actual time=6.794..710.712 rows=68316 loops=1)
         ->  Nested Loop  (cost=7.61..3769.92 rows=170 width=21) (actual time=6.732..422.005 rows=148552 loops=1)
               Join Filter: (t.id = mc.movie_id)
               ->  Nested Loop  (cost=7.18..3749.42 rows=34 width=25) (actual time=6.684..242.631 rows=41840 loops=1)
                     ->  Nested Loop  (cost=6.75..3732.91 rows=34 width=4) (actual time=6.668..74.684 rows=41840 loops=1)
                           ->  Seq Scan on keyword k  (cost=0.00..2626.12 rows=1 width=4) (actual time=0.658..11.774 rows=1 loops=1)
                                 Filter: ((keyword)::text = 'character-name-in-title'::text)
                                 Rows Removed by Filter: 134169
                           ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1103.80 rows=299 width=8) (actual time=6.007..58.028 rows=41840 loops=1)
                                 Recheck Cond: (keyword_id = k.id)
                                 Heap Blocks: exact=11541
                                 ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=3.943..3.943 rows=41840 loops=1)
                                       Index Cond: (keyword_id = k.id)
                     ->  Index Scan using title_pkey on title t  (cost=0.43..0.49 rows=1 width=21) (actual time=0.004..0.004 rows=1 loops=41840)
                           Index Cond: (id = mk.movie_id)
               ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..0.54 rows=5 width=8) (actual time=0.002..0.004 rows=4 loops=41840)
                     Index Cond: (movie_id = mk.movie_id)
         ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..0.45 rows=1 width=4) (actual time=0.002..0.002 rows=0 loops=148552)
               Index Cond: (id = mc.company_id)
               Filter: ((country_code)::text = '[us]'::text)
               Rows Removed by Filter: 1
 Planning Time: 2.397 ms
 Execution Time: 719.116 ms
(24 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/30a.sql_explained.sql
SET
                                                                                                         QUERY PLAN                                                                                                         
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=8691.91..8691.92 rows=1 width=128) (actual time=1303.339..1303.339 rows=1 loops=1)
   ->  Nested Loop  (cost=1012.70..8691.90 rows=1 width=80) (actual time=25.399..1302.831 rows=757 loops=1)
         ->  Nested Loop  (cost=1012.27..8690.88 rows=1 width=69) (actual time=25.357..1293.242 rows=1021 loops=1)
               ->  Nested Loop  (cost=1012.13..8690.69 rows=1 width=73) (actual time=25.348..1291.336 rows=1021 loops=1)
                     Join Filter: (t.id = mi.movie_id)
                     ->  Nested Loop  (cost=1011.70..8672.67 rows=1 width=47) (actual time=13.279..1114.900 rows=1736 loops=1)
                           Join Filter: (t.id = ci.movie_id)
                           ->  Nested Loop  (cost=1011.13..8643.58 rows=1 width=39) (actual time=7.005..311.885 rows=2023 loops=1)
                                 Join Filter: (mi_idx.movie_id = t.id)
                                 ->  Nested Loop  (cost=1010.70..8642.75 rows=1 width=18) (actual time=6.973..219.148 rows=16283 loops=1)
                                       ->  Gather  (cost=1010.57..8642.58 rows=1 width=22) (actual time=6.220..182.356 rows=35346 loops=1)
                                             Workers Planned: 2
                                             Workers Launched: 2
                                             ->  Nested Loop  (cost=10.57..7642.48 rows=1 width=22) (actual time=4.913..313.860 rows=11782 loops=3)
                                                   ->  Nested Loop  (cost=10.44..7642.32 rows=1 width=26) (actual time=4.895..300.533 rows=11782 loops=3)
                                                         ->  Hash Join  (cost=10.02..7640.66 rows=2 width=14) (actual time=4.603..254.480 rows=21234 loops=3)
                                                               Hash Cond: (mi_idx.info_type_id = it2.id)
                                                               ->  Nested Loop  (cost=7.60..7637.43 rows=294 width=18) (actual time=4.517..245.481 rows=63896 loops=3)
                                                                     ->  Nested Loop  (cost=7.17..7557.95 rows=98 width=4) (actual time=4.480..125.822 rows=25571 loops=3)
                                                                           ->  Parallel Index Scan using keyword_pkey on keyword k  (cost=0.42..4353.35 rows=3 width=4) (actual time=0.247..23.109 rows=2 loops=3)
                                                                                 Filter: ((keyword)::text = ANY ('{murder,violence,blood,gore,death,female-nudity,hospital}'::text[]))
                                                                                 Rows Removed by Filter: 44721
                                                                           ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1065.21 rows=299 width=8) (actual time=3.146..42.707 rows=10959 loops=7)
                                                                                 Recheck Cond: (keyword_id = k.id)
                                                                                 Heap Blocks: exact=12389
                                                                                 ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=1.812..1.812 rows=10959 loops=7)
                                                                                       Index Cond: (keyword_id = k.id)
                                                                     ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx  (cost=0.43..0.78 rows=3 width=14) (actual time=0.004..0.004 rows=2 loops=76714)
                                                                           Index Cond: (movie_id = mk.movie_id)
                                                               ->  Hash  (cost=2.41..2.41 rows=1 width=4) (actual time=0.027..0.027 rows=1 loops=3)
                                                                     Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                                     ->  Seq Scan on info_type it2  (cost=0.00..2.41 rows=1 width=4) (actual time=0.021..0.022 rows=1 loops=3)
                                                                           Filter: ((info)::text = 'votes'::text)
                                                                           Rows Removed by Filter: 112
                                                         ->  Index Scan using movie_id_complete_cast on complete_cast cc  (cost=0.42..0.81 rows=2 width=12) (actual time=0.002..0.002 rows=1 loops=63701)
                                                               Index Cond: (movie_id = mi_idx.movie_id)
                                                   ->  Index Scan using comp_cast_type_pkey on comp_cast_type cct1  (cost=0.13..0.15 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=35346)
                                                         Index Cond: (id = cc.subject_id)
                                                         Filter: ((kind)::text = ANY ('{cast,crew}'::text[]))
                                       ->  Index Scan using comp_cast_type_pkey on comp_cast_type cct2  (cost=0.13..0.15 rows=1 width=4) (actual time=0.001..0.001 rows=0 loops=35346)
                                             Index Cond: (id = cc.status_id)
                                             Filter: ((kind)::text = 'complete+verified'::text)
                                             Rows Removed by Filter: 1
                                 ->  Index Scan using title_pkey on title t  (cost=0.43..0.82 rows=1 width=21) (actual time=0.005..0.005 rows=0 loops=16283)
                                       Index Cond: (id = mk.movie_id)
                                       Filter: (production_year > 2000)
                                       Rows Removed by Filter: 1
                           ->  Index Scan using movie_id_cast_info on cast_info ci  (cost=0.56..29.08 rows=1 width=8) (actual time=0.279..0.396 rows=1 loops=2023)
                                 Index Cond: (movie_id = mk.movie_id)
                                 Filter: ((note)::text = ANY ('{(writer),"(head writer)","(written by)",(story),"(story editor)"}'::text[]))
                                 Rows Removed by Filter: 137
                     ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..18.01 rows=1 width=50) (actual time=0.101..0.101 rows=1 loops=1736)
                           Index Cond: (movie_id = mk.movie_id)
                           Filter: ((info)::text = ANY ('{Horror,Thriller}'::text[]))
                           Rows Removed by Filter: 226
               ->  Index Scan using info_type_pkey on info_type it1  (cost=0.14..0.16 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=1021)
                     Index Cond: (id = mi.info_type_id)
                     Filter: ((info)::text = 'genres'::text)
         ->  Index Scan using name_pkey on name n  (cost=0.43..1.03 rows=1 width=19) (actual time=0.009..0.009 rows=1 loops=1021)
               Index Cond: (id = ci.person_id)
               Filter: ((gender)::text = 'm'::text)
               Rows Removed by Filter: 0
 Planning Time: 73.210 ms
 Execution Time: 1303.769 ms
(64 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/30b.sql_explained.sql
SET
                                                                                                           QUERY PLAN                                                                                                            
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=8689.58..8689.59 rows=1 width=128) (actual time=326.837..326.837 rows=1 loops=1)
   ->  Nested Loop  (cost=1010.42..8689.57 rows=1 width=80) (actual time=72.670..326.797 rows=28 loops=1)
         ->  Nested Loop  (cost=1010.29..8689.41 rows=1 width=84) (actual time=72.659..326.751 rows=28 loops=1)
               ->  Nested Loop  (cost=1010.16..8689.23 rows=1 width=88) (actual time=72.650..326.608 rows=108 loops=1)
                     Join Filter: (t.id = cc.movie_id)
                     ->  Nested Loop  (cost=1009.74..8688.40 rows=1 width=100) (actual time=72.625..326.287 rows=108 loops=1)
                           ->  Nested Loop  (cost=1009.31..8687.37 rows=1 width=89) (actual time=72.603..325.721 rows=108 loops=1)
                                 ->  Nested Loop  (cost=1009.17..8687.19 rows=1 width=93) (actual time=72.590..325.354 rows=324 loops=1)
                                       Join Filter: (t.id = mi_idx.movie_id)
                                       ->  Nested Loop  (cost=1008.74..8686.37 rows=1 width=79) (actual time=72.560..324.923 rows=108 loops=1)
                                             ->  Nested Loop  (cost=1008.60..8686.19 rows=1 width=83) (actual time=72.555..324.756 rows=108 loops=1)
                                                   Join Filter: (t.id = mi.movie_id)
                                                   ->  Nested Loop  (cost=1008.16..8668.17 rows=1 width=33) (actual time=72.264..318.372 rows=77 loops=1)
                                                         Join Filter: (t.id = ci.movie_id)
                                                         ->  Gather  (cost=1007.60..8639.08 rows=1 width=25) (actual time=57.237..310.460 rows=49 loops=1)
                                                               Workers Planned: 2
                                                               Workers Launched: 2
                                                               ->  Nested Loop  (cost=7.60..7638.98 rows=1 width=25) (actual time=64.006..246.125 rows=16 loops=3)
                                                                     ->  Nested Loop  (cost=7.17..7557.95 rows=98 width=4) (actual time=4.390..115.709 rows=25571 loops=3)
                                                                           ->  Parallel Index Scan using keyword_pkey on keyword k  (cost=0.42..4353.35 rows=3 width=4) (actual time=0.152..23.206 rows=2 loops=3)
                                                                                 Filter: ((keyword)::text = ANY ('{murder,violence,blood,gore,death,female-nudity,hospital}'::text[]))
                                                                                 Rows Removed by Filter: 44721
                                                                           ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1065.21 rows=299 width=8) (actual time=3.129..38.448 rows=10959 loops=7)
                                                                                 Recheck Cond: (keyword_id = k.id)
                                                                                 Heap Blocks: exact=12389
                                                                                 ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=1.793..1.793 rows=10959 loops=7)
                                                                                       Index Cond: (keyword_id = k.id)
                                                                     ->  Index Scan using title_pkey on title t  (cost=0.43..0.83 rows=1 width=21) (actual time=0.005..0.005 rows=0 loops=76714)
                                                                           Index Cond: (id = mk.movie_id)
                                                                           Filter: ((production_year > 2000) AND (((title)::text ~~ '%Freddy%'::text) OR ((title)::text ~~ '%Jason%'::text) OR ((title)::text ~~ 'Saw%'::text)))
                                                                           Rows Removed by Filter: 1
                                                         ->  Index Scan using movie_id_cast_info on cast_info ci  (cost=0.56..29.08 rows=1 width=8) (actual time=0.145..0.216 rows=2 loops=49)
                                                               Index Cond: (movie_id = mk.movie_id)
                                                               Filter: ((note)::text = ANY ('{(writer),"(head writer)","(written by)",(story),"(story editor)"}'::text[]))
                                                               Rows Removed by Filter: 82
                                                   ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..18.01 rows=1 width=50) (actual time=0.082..0.082 rows=1 loops=77)
                                                         Index Cond: (movie_id = mk.movie_id)
                                                         Filter: ((info)::text = ANY ('{Horror,Thriller}'::text[]))
                                                         Rows Removed by Filter: 279
                                             ->  Index Scan using info_type_pkey on info_type it1  (cost=0.14..0.16 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=108)
                                                   Index Cond: (id = mi.info_type_id)
                                                   Filter: ((info)::text = 'genres'::text)
                                       ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx  (cost=0.43..0.78 rows=3 width=14) (actual time=0.003..0.003 rows=3 loops=108)
                                             Index Cond: (movie_id = mk.movie_id)
                                 ->  Index Scan using info_type_pkey on info_type it2  (cost=0.14..0.16 rows=1 width=4) (actual time=0.001..0.001 rows=0 loops=324)
                                       Index Cond: (id = mi_idx.info_type_id)
                                       Filter: ((info)::text = 'votes'::text)
                                       Rows Removed by Filter: 1
                           ->  Index Scan using name_pkey on name n  (cost=0.43..1.03 rows=1 width=19) (actual time=0.005..0.005 rows=1 loops=108)
                                 Index Cond: (id = ci.person_id)
                                 Filter: ((gender)::text = 'm'::text)
                     ->  Index Scan using movie_id_complete_cast on complete_cast cc  (cost=0.42..0.81 rows=2 width=12) (actual time=0.002..0.002 rows=1 loops=108)
                           Index Cond: (movie_id = mk.movie_id)
               ->  Index Scan using comp_cast_type_pkey on comp_cast_type cct2  (cost=0.13..0.15 rows=1 width=4) (actual time=0.001..0.001 rows=0 loops=108)
                     Index Cond: (id = cc.status_id)
                     Filter: ((kind)::text = 'complete+verified'::text)
                     Rows Removed by Filter: 1
         ->  Index Scan using comp_cast_type_pkey on comp_cast_type cct1  (cost=0.13..0.15 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=28)
               Index Cond: (id = cc.subject_id)
               Filter: ((kind)::text = ANY ('{cast,crew}'::text[]))
 Planning Time: 73.410 ms
 Execution Time: 329.870 ms
(62 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/30c.sql_explained.sql
SET
                                                                                                         QUERY PLAN                                                                                                         
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=8709.53..8709.54 rows=1 width=128) (actual time=3923.120..3923.121 rows=1 loops=1)
   ->  Nested Loop  (cost=1012.70..8709.52 rows=1 width=80) (actual time=12.114..3919.226 rows=8024 loops=1)
         ->  Nested Loop  (cost=1012.27..8708.49 rows=1 width=69) (actual time=12.082..3842.539 rows=11863 loops=1)
               Join Filter: (t.id = ci.movie_id)
               ->  Nested Loop  (cost=1011.71..8679.40 rows=1 width=85) (actual time=10.102..1274.635 rows=14655 loops=1)
                     ->  Nested Loop  (cost=1011.58..8679.23 rows=1 width=89) (actual time=7.635..1245.716 rows=27522 loops=1)
                           ->  Nested Loop  (cost=1011.45..8679.06 rows=1 width=93) (actual time=7.618..1200.099 rows=37669 loops=1)
                                 ->  Nested Loop  (cost=1011.03..8678.23 rows=1 width=81) (actual time=6.064..1059.031 rows=63386 loops=1)
                                       Join Filter: (mi.movie_id = t.id)
                                       ->  Gather  (cost=1010.60..8677.40 rows=1 width=60) (actual time=6.042..768.020 rows=63386 loops=1)
                                             Workers Planned: 2
                                             Workers Launched: 2
                                             ->  Nested Loop  (cost=10.60..7677.30 rows=1 width=60) (actual time=4.713..1299.748 rows=21129 loops=3)
                                                   ->  Nested Loop  (cost=10.46..7677.12 rows=1 width=64) (actual time=4.704..1271.619 rows=22577 loops=3)
                                                         Join Filter: (mi_idx.movie_id = mi.movie_id)
                                                         ->  Hash Join  (cost=10.02..7640.66 rows=2 width=14) (actual time=4.610..249.955 rows=21234 loops=3)
                                                               Hash Cond: (mi_idx.info_type_id = it2.id)
                                                               ->  Nested Loop  (cost=7.60..7637.43 rows=294 width=18) (actual time=4.524..240.155 rows=63896 loops=3)
                                                                     ->  Nested Loop  (cost=7.17..7557.95 rows=98 width=4) (actual time=4.493..120.596 rows=25571 loops=3)
                                                                           ->  Parallel Index Scan using keyword_pkey on keyword k  (cost=0.42..4353.35 rows=3 width=4) (actual time=0.266..23.058 rows=2 loops=3)
                                                                                 Filter: ((keyword)::text = ANY ('{murder,violence,blood,gore,death,female-nudity,hospital}'::text[]))
                                                                                 Rows Removed by Filter: 44721
                                                                           ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1065.21 rows=299 width=8) (actual time=3.140..40.437 rows=10959 loops=7)
                                                                                 Recheck Cond: (keyword_id = k.id)
                                                                                 Heap Blocks: exact=12389
                                                                                 ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=1.807..1.807 rows=10959 loops=7)
                                                                                       Index Cond: (keyword_id = k.id)
                                                                     ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx  (cost=0.43..0.78 rows=3 width=14) (actual time=0.004..0.004 rows=2 loops=76714)
                                                                           Index Cond: (movie_id = mk.movie_id)
                                                               ->  Hash  (cost=2.41..2.41 rows=1 width=4) (actual time=0.028..0.029 rows=1 loops=3)
                                                                     Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                                     ->  Seq Scan on info_type it2  (cost=0.00..2.41 rows=1 width=4) (actual time=0.022..0.024 rows=1 loops=3)
                                                                           Filter: ((info)::text = 'votes'::text)
                                                                           Rows Removed by Filter: 112
                                                         ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..18.22 rows=1 width=50) (actual time=0.046..0.048 rows=1 loops=63701)
                                                               Index Cond: (movie_id = mk.movie_id)
                                                               Filter: ((info)::text = ANY ('{Horror,Action,Sci-Fi,Thriller,Crime,War}'::text[]))
                                                               Rows Removed by Filter: 58
                                                   ->  Index Scan using info_type_pkey on info_type it1  (cost=0.14..0.16 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=67732)
                                                         Index Cond: (id = mi.info_type_id)
                                                         Filter: ((info)::text = 'genres'::text)
                                                         Rows Removed by Filter: 0
                                       ->  Index Scan using title_pkey on title t  (cost=0.43..0.82 rows=1 width=21) (actual time=0.004..0.004 rows=1 loops=63386)
                                             Index Cond: (id = mk.movie_id)
                                 ->  Index Scan using movie_id_complete_cast on complete_cast cc  (cost=0.42..0.81 rows=2 width=12) (actual time=0.002..0.002 rows=1 loops=63386)
                                       Index Cond: (movie_id = t.id)
                           ->  Index Scan using comp_cast_type_pkey on comp_cast_type cct1  (cost=0.13..0.15 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=37669)
                                 Index Cond: (id = cc.subject_id)
                                 Filter: ((kind)::text = 'cast'::text)
                                 Rows Removed by Filter: 0
                     ->  Index Scan using comp_cast_type_pkey on comp_cast_type cct2  (cost=0.13..0.15 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=27522)
                           Index Cond: (id = cc.status_id)
                           Filter: ((kind)::text = 'complete+verified'::text)
                           Rows Removed by Filter: 0
               ->  Index Scan using movie_id_cast_info on cast_info ci  (cost=0.56..29.08 rows=1 width=8) (actual time=0.132..0.175 rows=1 loops=14655)
                     Index Cond: (movie_id = mk.movie_id)
                     Filter: ((note)::text = ANY ('{(writer),"(head writer)","(written by)",(story),"(story editor)"}'::text[]))
                     Rows Removed by Filter: 83
         ->  Index Scan using name_pkey on name n  (cost=0.43..1.03 rows=1 width=19) (actual time=0.006..0.006 rows=1 loops=11863)
               Index Cond: (id = ci.person_id)
               Filter: ((gender)::text = 'm'::text)
               Rows Removed by Filter: 0
 Planning Time: 73.912 ms
 Execution Time: 3923.543 ms
(64 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/31a.sql_explained.sql
SET
                                                                                                      QUERY PLAN                                                                                                      
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=8954.40..8954.41 rows=1 width=128) (actual time=1374.638..1374.638 rows=1 loops=1)
   ->  Nested Loop  (cost=1012.87..8954.39 rows=1 width=80) (actual time=58.054..1374.099 rows=1273 loops=1)
         Join Filter: (mi.movie_id = t.id)
         ->  Nested Loop  (cost=1012.44..8953.28 rows=1 width=83) (actual time=58.020..1368.643 rows=1273 loops=1)
               ->  Nested Loop  (cost=1012.01..8951.99 rows=1 width=72) (actual time=57.973..1359.988 rows=1556 loops=1)
                     ->  Nested Loop  (cost=1011.87..8951.81 rows=1 width=76) (actual time=57.964..1357.548 rows=1616 loops=1)
                           Join Filter: (mi_idx.movie_id = mi.movie_id)
                           ->  Nested Loop  (cost=1011.44..8928.44 rows=1 width=26) (actual time=28.385..1264.582 rows=1471 loops=1)
                                 Join Filter: (mi_idx.movie_id = ci.movie_id)
                                 ->  Gather  (cost=1010.87..8895.40 rows=1 width=18) (actual time=28.116..933.961 rows=1547 loops=1)
                                       Workers Planned: 2
                                       Workers Launched: 2
                                       ->  Nested Loop  (cost=10.87..7895.30 rows=1 width=18) (actual time=17.027..952.193 rows=516 loops=3)
                                             ->  Nested Loop  (cost=10.45..7882.53 rows=13 width=22) (actual time=4.535..456.848 rows=199419 loops=3)
                                                   Join Filter: (mi_idx.movie_id = mc.movie_id)
                                                   ->  Hash Join  (cost=10.02..7878.13 rows=2 width=14) (actual time=4.506..251.571 rows=21234 loops=3)
                                                         Hash Cond: (mi_idx.info_type_id = it2.id)
                                                         ->  Nested Loop  (cost=7.60..7874.90 rows=294 width=18) (actual time=4.424..242.120 rows=63896 loops=3)
                                                               ->  Nested Loop  (cost=7.17..7767.34 rows=98 width=4) (actual time=4.389..124.941 rows=25571 loops=3)
                                                                     ->  Parallel Index Scan using keyword_pkey on keyword k  (cost=0.42..4562.73 rows=3 width=4) (actual time=0.169..22.119 rows=2 loops=3)
                                                                           Filter: ((keyword)::text = ANY ('{murder,violence,blood,gore,death,female-nudity,hospital}'::text[]))
                                                                           Rows Removed by Filter: 44721
                                                                     ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1065.21 rows=299 width=8) (actual time=3.122..42.759 rows=10959 loops=7)
                                                                           Recheck Cond: (keyword_id = k.id)
                                                                           Heap Blocks: exact=12389
                                                                           ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=1.791..1.791 rows=10959 loops=7)
                                                                                 Index Cond: (keyword_id = k.id)
                                                               ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx  (cost=0.43..1.07 rows=3 width=14) (actual time=0.004..0.004 rows=2 loops=76714)
                                                                     Index Cond: (movie_id = mk.movie_id)
                                                         ->  Hash  (cost=2.41..2.41 rows=1 width=4) (actual time=0.028..0.028 rows=1 loops=3)
                                                               Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                               ->  Seq Scan on info_type it2  (cost=0.00..2.41 rows=1 width=4) (actual time=0.022..0.024 rows=1 loops=3)
                                                                     Filter: ((info)::text = 'votes'::text)
                                                                     Rows Removed by Filter: 112
                                                   ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..2.14 rows=5 width=8) (actual time=0.005..0.008 rows=9 loops=63701)
                                                         Index Cond: (movie_id = mk.movie_id)
                                             ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..0.98 rows=1 width=4) (actual time=0.002..0.002 rows=0 loops=598256)
                                                   Index Cond: (id = mc.company_id)
                                                   Filter: ((name)::text ~~ 'Lionsgate%'::text)
                                                   Rows Removed by Filter: 1
                                 ->  Index Scan using movie_id_cast_info on cast_info ci  (cost=0.56..33.03 rows=1 width=8) (actual time=0.156..0.215 rows=1 loops=1547)
                                       Index Cond: (movie_id = mk.movie_id)
                                       Filter: ((note)::text = ANY ('{(writer),"(head writer)","(written by)",(story),"(story editor)"}'::text[]))
                                       Rows Removed by Filter: 119
                           ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..23.36 rows=1 width=50) (actual time=0.062..0.063 rows=1 loops=1471)
                                 Index Cond: (movie_id = mk.movie_id)
                                 Filter: ((info)::text = ANY ('{Horror,Thriller}'::text[]))
                                 Rows Removed by Filter: 173
                     ->  Index Scan using info_type_pkey on info_type it1  (cost=0.14..0.16 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=1616)
                           Index Cond: (id = mi.info_type_id)
                           Filter: ((info)::text = 'genres'::text)
                           Rows Removed by Filter: 0
               ->  Index Scan using name_pkey on name n  (cost=0.43..1.29 rows=1 width=19) (actual time=0.005..0.005 rows=1 loops=1556)
                     Index Cond: (id = ci.person_id)
                     Filter: ((gender)::text = 'm'::text)
                     Rows Removed by Filter: 0
         ->  Index Scan using title_pkey on title t  (cost=0.43..1.10 rows=1 width=21) (actual time=0.004..0.004 rows=1 loops=1273)
               Index Cond: (id = mk.movie_id)
 Planning Time: 50.951 ms
 Execution Time: 1377.698 ms
(60 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/31b.sql_explained.sql
SET
                                                                                                        QUERY PLAN                                                                                                         
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=8939.01..8939.02 rows=1 width=128) (actual time=325.706..325.706 rows=1 loops=1)
   ->  Nested Loop  (cost=1010.59..8939.00 rows=1 width=80) (actual time=114.850..325.656 rows=84 loops=1)
         ->  Nested Loop  (cost=1010.16..8937.71 rows=1 width=69) (actual time=114.820..325.261 rows=84 loops=1)
               ->  Nested Loop  (cost=1010.02..8937.53 rows=1 width=73) (actual time=114.807..324.974 rows=252 loops=1)
                     Join Filter: (t.id = mi_idx.movie_id)
                     ->  Nested Loop  (cost=1009.59..8936.42 rows=1 width=83) (actual time=114.776..324.685 rows=84 loops=1)
                           ->  Nested Loop  (cost=1009.45..8936.24 rows=1 width=87) (actual time=114.761..324.546 rows=84 loops=1)
                                 Join Filter: (t.id = mi.movie_id)
                                 ->  Nested Loop  (cost=1009.01..8912.87 rows=1 width=37) (actual time=114.501..320.545 rows=53 loops=1)
                                       ->  Nested Loop  (cost=1008.59..8911.15 rows=1 width=41) (actual time=114.452..320.168 rows=119 loops=1)
                                             Join Filter: (t.id = mc.movie_id)
                                             ->  Nested Loop  (cost=1008.16..8908.99 rows=1 width=33) (actual time=71.809..319.143 rows=77 loops=1)
                                                   Join Filter: (t.id = ci.movie_id)
                                                   ->  Gather  (cost=1007.60..8875.95 rows=1 width=25) (actual time=56.829..311.218 rows=49 loops=1)
                                                         Workers Planned: 2
                                                         Workers Launched: 2
                                                         ->  Nested Loop  (cost=7.60..7875.85 rows=1 width=25) (actual time=63.072..245.423 rows=16 loops=3)
                                                               ->  Nested Loop  (cost=7.17..7767.34 rows=98 width=4) (actual time=4.411..115.386 rows=25571 loops=3)
                                                                     ->  Parallel Index Scan using keyword_pkey on keyword k  (cost=0.42..4562.73 rows=3 width=4) (actual time=0.168..23.362 rows=2 loops=3)
                                                                           Filter: ((keyword)::text = ANY ('{murder,violence,blood,gore,death,female-nudity,hospital}'::text[]))
                                                                           Rows Removed by Filter: 44721
                                                                     ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1065.21 rows=299 width=8) (actual time=3.134..38.260 rows=10959 loops=7)
                                                                           Recheck Cond: (keyword_id = k.id)
                                                                           Heap Blocks: exact=12389
                                                                           ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=1.798..1.798 rows=10959 loops=7)
                                                                                 Index Cond: (keyword_id = k.id)
                                                               ->  Index Scan using title_pkey on title t  (cost=0.43..1.11 rows=1 width=21) (actual time=0.005..0.005 rows=0 loops=76714)
                                                                     Index Cond: (id = mk.movie_id)
                                                                     Filter: ((production_year > 2000) AND (((title)::text ~~ '%Freddy%'::text) OR ((title)::text ~~ '%Jason%'::text) OR ((title)::text ~~ 'Saw%'::text)))
                                                                     Rows Removed by Filter: 1
                                                   ->  Index Scan using movie_id_cast_info on cast_info ci  (cost=0.56..33.03 rows=1 width=8) (actual time=0.144..0.216 rows=2 loops=49)
                                                         Index Cond: (movie_id = mk.movie_id)
                                                         Filter: ((note)::text = ANY ('{(writer),"(head writer)","(written by)",(story),"(story editor)"}'::text[]))
                                                         Rows Removed by Filter: 82
                                             ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..2.15 rows=1 width=8) (actual time=0.008..0.013 rows=2 loops=77)
                                                   Index Cond: (movie_id = mk.movie_id)
                                                   Filter: ((note)::text ~~ '%(Blu-ray)%'::text)
                                                   Rows Removed by Filter: 24
                                       ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..1.61 rows=1 width=4) (actual time=0.003..0.003 rows=0 loops=119)
                                             Index Cond: (id = mc.company_id)
                                             Filter: ((name)::text ~~ 'Lionsgate%'::text)
                                             Rows Removed by Filter: 1
                                 ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..23.36 rows=1 width=50) (actual time=0.074..0.075 rows=2 loops=53)
                                       Index Cond: (movie_id = mk.movie_id)
                                       Filter: ((info)::text = ANY ('{Horror,Thriller}'::text[]))
                                       Rows Removed by Filter: 292
                           ->  Index Scan using info_type_pkey on info_type it1  (cost=0.14..0.16 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=84)
                                 Index Cond: (id = mi.info_type_id)
                                 Filter: ((info)::text = 'genres'::text)
                     ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx  (cost=0.43..1.07 rows=3 width=14) (actual time=0.002..0.003 rows=3 loops=84)
                           Index Cond: (movie_id = mk.movie_id)
               ->  Index Scan using info_type_pkey on info_type it2  (cost=0.14..0.16 rows=1 width=4) (actual time=0.001..0.001 rows=0 loops=252)
                     Index Cond: (id = mi_idx.info_type_id)
                     Filter: ((info)::text = 'votes'::text)
                     Rows Removed by Filter: 1
         ->  Index Scan using name_pkey on name n  (cost=0.43..1.29 rows=1 width=19) (actual time=0.004..0.004 rows=1 loops=84)
               Index Cond: (id = ci.person_id)
               Filter: ((gender)::text = 'm'::text)
 Planning Time: 50.164 ms
 Execution Time: 328.699 ms
(60 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/31c.sql_explained.sql
SET
                                                                                                      QUERY PLAN                                                                                                      
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=8954.61..8954.62 rows=1 width=128) (actual time=1386.676..1386.676 rows=1 loops=1)
   ->  Nested Loop  (cost=1012.87..8954.60 rows=1 width=80) (actual time=56.745..1385.647 rows=2825 loops=1)
         Join Filter: (mi.movie_id = t.id)
         ->  Nested Loop  (cost=1012.44..8953.49 rows=1 width=83) (actual time=56.722..1376.841 rows=2825 loops=1)
               ->  Nested Loop  (cost=1012.01..8952.20 rows=1 width=72) (actual time=56.697..1365.444 rows=2825 loops=1)
                     ->  Nested Loop  (cost=1011.87..8952.02 rows=1 width=76) (actual time=56.688..1361.403 rows=3007 loops=1)
                           Join Filter: (mi_idx.movie_id = mi.movie_id)
                           ->  Nested Loop  (cost=1011.44..8928.44 rows=1 width=26) (actual time=28.004..1249.708 rows=1471 loops=1)
                                 Join Filter: (mi_idx.movie_id = ci.movie_id)
                                 ->  Gather  (cost=1010.87..8895.40 rows=1 width=18) (actual time=27.747..915.998 rows=1547 loops=1)
                                       Workers Planned: 2
                                       Workers Launched: 2
                                       ->  Nested Loop  (cost=10.87..7895.30 rows=1 width=18) (actual time=16.866..955.776 rows=516 loops=3)
                                             ->  Nested Loop  (cost=10.45..7882.53 rows=13 width=22) (actual time=4.632..458.038 rows=199419 loops=3)
                                                   Join Filter: (mi_idx.movie_id = mc.movie_id)
                                                   ->  Hash Join  (cost=10.02..7878.13 rows=2 width=14) (actual time=4.600..252.464 rows=21234 loops=3)
                                                         Hash Cond: (mi_idx.info_type_id = it2.id)
                                                         ->  Nested Loop  (cost=7.60..7874.90 rows=294 width=18) (actual time=4.514..243.032 rows=63896 loops=3)
                                                               ->  Nested Loop  (cost=7.17..7767.34 rows=98 width=4) (actual time=4.485..125.371 rows=25571 loops=3)
                                                                     ->  Parallel Index Scan using keyword_pkey on keyword k  (cost=0.42..4562.73 rows=3 width=4) (actual time=0.249..22.138 rows=2 loops=3)
                                                                           Filter: ((keyword)::text = ANY ('{murder,violence,blood,gore,death,female-nudity,hospital}'::text[]))
                                                                           Rows Removed by Filter: 44721
                                                                     ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1065.21 rows=299 width=8) (actual time=3.140..42.938 rows=10959 loops=7)
                                                                           Recheck Cond: (keyword_id = k.id)
                                                                           Heap Blocks: exact=12389
                                                                           ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=1.808..1.808 rows=10959 loops=7)
                                                                                 Index Cond: (keyword_id = k.id)
                                                               ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx  (cost=0.43..1.07 rows=3 width=14) (actual time=0.004..0.004 rows=2 loops=76714)
                                                                     Index Cond: (movie_id = mk.movie_id)
                                                         ->  Hash  (cost=2.41..2.41 rows=1 width=4) (actual time=0.026..0.027 rows=1 loops=3)
                                                               Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                               ->  Seq Scan on info_type it2  (cost=0.00..2.41 rows=1 width=4) (actual time=0.020..0.022 rows=1 loops=3)
                                                                     Filter: ((info)::text = 'votes'::text)
                                                                     Rows Removed by Filter: 112
                                                   ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..2.14 rows=5 width=8) (actual time=0.005..0.008 rows=9 loops=63701)
                                                         Index Cond: (movie_id = mk.movie_id)
                                             ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..0.98 rows=1 width=4) (actual time=0.002..0.002 rows=0 loops=598256)
                                                   Index Cond: (id = mc.company_id)
                                                   Filter: ((name)::text ~~ 'Lionsgate%'::text)
                                                   Rows Removed by Filter: 1
                                 ->  Index Scan using movie_id_cast_info on cast_info ci  (cost=0.56..33.03 rows=1 width=8) (actual time=0.157..0.217 rows=1 loops=1547)
                                       Index Cond: (movie_id = mk.movie_id)
                                       Filter: ((note)::text = ANY ('{(writer),"(head writer)","(written by)",(story),"(story editor)"}'::text[]))
                                       Rows Removed by Filter: 119
                           ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..23.57 rows=1 width=50) (actual time=0.073..0.075 rows=2 loops=1471)
                                 Index Cond: (movie_id = mk.movie_id)
                                 Filter: ((info)::text = ANY ('{Horror,Action,Sci-Fi,Thriller,Crime,War}'::text[]))
                                 Rows Removed by Filter: 172
                     ->  Index Scan using info_type_pkey on info_type it1  (cost=0.14..0.16 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=3007)
                           Index Cond: (id = mi.info_type_id)
                           Filter: ((info)::text = 'genres'::text)
                           Rows Removed by Filter: 0
               ->  Index Scan using name_pkey on name n  (cost=0.43..1.29 rows=1 width=19) (actual time=0.004..0.004 rows=1 loops=2825)
                     Index Cond: (id = ci.person_id)
         ->  Index Scan using title_pkey on title t  (cost=0.43..1.10 rows=1 width=21) (actual time=0.003..0.003 rows=1 loops=2825)
               Index Cond: (id = mk.movie_id)
 Planning Time: 50.866 ms
 Execution Time: 1389.838 ms
(58 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/32a.sql_explained.sql
SET
                                                                              QUERY PLAN                                                                               
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=3802.90..3802.91 rows=1 width=96) (actual time=15.532..15.532 rows=1 loops=1)
   ->  Nested Loop  (cost=7.90..3802.82 rows=11 width=116) (actual time=15.529..15.529 rows=0 loops=1)
         ->  Nested Loop  (cost=7.47..3756.66 rows=11 width=103) (actual time=15.529..15.529 rows=0 loops=1)
               ->  Nested Loop  (cost=7.04..3751.32 rows=11 width=94) (actual time=15.529..15.529 rows=0 loops=1)
                     Join Filter: (ml.link_type_id = lt.id)
                     ->  Nested Loop  (cost=7.04..3747.37 rows=11 width=16) (actual time=15.528..15.528 rows=0 loops=1)
                           ->  Nested Loop  (cost=6.75..3732.91 rows=34 width=4) (actual time=15.180..15.519 rows=1 loops=1)
                                 ->  Seq Scan on keyword k  (cost=0.00..2626.12 rows=1 width=4) (actual time=15.149..15.487 rows=1 loops=1)
                                       Filter: ((keyword)::text = '10,000-mile-club'::text)
                                       Rows Removed by Filter: 134169
                                 ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1103.80 rows=299 width=8) (actual time=0.027..0.028 rows=1 loops=1)
                                       Recheck Cond: (keyword_id = k.id)
                                       Heap Blocks: exact=1
                                       ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=0.013..0.013 rows=1 loops=1)
                                             Index Cond: (keyword_id = k.id)
                           ->  Index Scan using movie_id_movie_link on movie_link ml  (cost=0.29..0.38 rows=5 width=12) (actual time=0.008..0.008 rows=0 loops=1)
                                 Index Cond: (movie_id = mk.movie_id)
                     ->  Materialize  (cost=0.00..1.27 rows=18 width=86) (never executed)
                           ->  Seq Scan on link_type lt  (cost=0.00..1.18 rows=18 width=86) (never executed)
               ->  Index Scan using title_pkey on title t1  (cost=0.43..0.49 rows=1 width=21) (never executed)
                     Index Cond: (id = mk.movie_id)
         ->  Index Scan using title_pkey on title t2  (cost=0.43..4.20 rows=1 width=21) (never executed)
               Index Cond: (id = ml.linked_movie_id)
 Planning Time: 2.911 ms
 Execution Time: 15.670 ms
(25 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/32b.sql_explained.sql
SET
                                                                                QUERY PLAN                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=3802.90..3802.91 rows=1 width=96) (actual time=181.359..181.359 rows=1 loops=1)
   ->  Nested Loop  (cost=7.90..3802.82 rows=11 width=116) (actual time=6.827..180.258 rows=4388 loops=1)
         ->  Nested Loop  (cost=7.47..3756.66 rows=11 width=103) (actual time=6.795..138.845 rows=4388 loops=1)
               ->  Nested Loop  (cost=7.04..3751.32 rows=11 width=94) (actual time=6.773..127.610 rows=4388 loops=1)
                     Join Filter: (ml.link_type_id = lt.id)
                     Rows Removed by Join Filter: 30206
                     ->  Nested Loop  (cost=7.04..3747.37 rows=11 width=16) (actual time=6.751..122.854 rows=4388 loops=1)
                           ->  Nested Loop  (cost=6.75..3732.91 rows=34 width=4) (actual time=6.641..83.357 rows=41840 loops=1)
                                 ->  Seq Scan on keyword k  (cost=0.00..2626.12 rows=1 width=4) (actual time=0.494..11.850 rows=1 loops=1)
                                       Filter: ((keyword)::text = 'character-name-in-title'::text)
                                       Rows Removed by Filter: 134169
                                 ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1103.80 rows=299 width=8) (actual time=6.144..67.623 rows=41840 loops=1)
                                       Recheck Cond: (keyword_id = k.id)
                                       Heap Blocks: exact=11541
                                       ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=4.059..4.060 rows=41840 loops=1)
                                             Index Cond: (keyword_id = k.id)
                           ->  Index Scan using movie_id_movie_link on movie_link ml  (cost=0.29..0.38 rows=5 width=12) (actual time=0.001..0.001 rows=0 loops=41840)
                                 Index Cond: (movie_id = mk.movie_id)
                     ->  Materialize  (cost=0.00..1.27 rows=18 width=86) (actual time=0.000..0.000 rows=8 loops=4388)
                           ->  Seq Scan on link_type lt  (cost=0.00..1.18 rows=18 width=86) (actual time=0.010..0.013 rows=17 loops=1)
               ->  Index Scan using title_pkey on title t1  (cost=0.43..0.49 rows=1 width=21) (actual time=0.002..0.002 rows=1 loops=4388)
                     Index Cond: (id = mk.movie_id)
         ->  Index Scan using title_pkey on title t2  (cost=0.43..4.20 rows=1 width=21) (actual time=0.009..0.009 rows=1 loops=4388)
               Index Cond: (id = ml.linked_movie_id)
 Planning Time: 2.277 ms
 Execution Time: 181.543 ms
(26 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/33a.sql_explained.sql
SET
                                                                                                                  QUERY PLAN                                                                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=4451.76..4451.77 rows=1 width=192) (actual time=70.179..70.180 rows=1 loops=1)
   ->  Nested Loop  (cost=6.44..4451.74 rows=1 width=84) (actual time=11.629..70.166 rows=8 loops=1)
         ->  Nested Loop  (cost=6.02..4451.30 rows=1 width=69) (actual time=11.619..70.115 rows=8 loops=1)
               Join Filter: (t2.id = mc2.movie_id)
               ->  Nested Loop  (cost=5.59..4450.56 rows=1 width=77) (actual time=11.599..70.080 rows=2 loops=1)
                     Join Filter: ((ml.linked_movie_id = t2.id) AND (kt2.id = t2.kind_id))
                     ->  Nested Loop  (cost=5.16..4449.84 rows=1 width=60) (actual time=11.575..69.986 rows=12 loops=1)
                           ->  Nested Loop  (cost=4.74..4449.40 rows=1 width=45) (actual time=11.549..69.552 rows=81 loops=1)
                                 ->  Nested Loop  (cost=4.31..4448.79 rows=1 width=53) (actual time=11.526..69.216 rows=28 loops=1)
                                       Join Filter: (it2.id = mi_idx2.info_type_id)
                                       Rows Removed by Join Filter: 1595
                                       ->  Nested Loop  (cost=3.88..4409.59 rows=19 width=47) (actual time=0.202..61.548 rows=1220 loops=1)
                                             Join Filter: (kt1.id = t1.kind_id)
                                             Rows Removed by Join Filter: 844
                                             ->  Nested Loop  (cost=0.00..2.18 rows=1 width=8) (actual time=0.019..0.021 rows=1 loops=1)
                                                   ->  Seq Scan on kind_type kt1  (cost=0.00..1.09 rows=1 width=4) (actual time=0.016..0.017 rows=1 loops=1)
                                                         Filter: ((kind)::text = 'tv series'::text)
                                                         Rows Removed by Filter: 6
                                                   ->  Seq Scan on kind_type kt2  (cost=0.00..1.09 rows=1 width=4) (actual time=0.001..0.002 rows=1 loops=1)
                                                         Filter: ((kind)::text = 'tv series'::text)
                                                         Rows Removed by Filter: 6
                                             ->  Nested Loop  (cost=3.88..4405.75 rows=132 width=47) (actual time=0.183..61.286 rows=2064 loops=1)
                                                   Join Filter: (ml.movie_id = t1.id)
                                                   ->  Nested Loop  (cost=3.45..4328.60 rows=132 width=22) (actual time=0.164..54.145 rows=2064 loops=1)
                                                         Join Filter: (ml.link_type_id = lt.id)
                                                         Rows Removed by Join Filter: 38685
                                                         ->  Nested Loop  (cost=3.45..4292.61 rows=794 width=26) (actual time=0.066..47.325 rows=20890 loops=1)
                                                               ->  Seq Scan on info_type it2  (cost=0.00..2.41 rows=1 width=4) (actual time=0.010..0.012 rows=1 loops=1)
                                                                     Filter: ((info)::text = 'rating'::text)
                                                                     Rows Removed by Filter: 112
                                                               ->  Hash Join  (cost=3.45..4282.26 rows=794 width=22) (actual time=0.055..45.424 rows=20890 loops=1)
                                                                     Hash Cond: (mi_idx1.info_type_id = it1.id)
                                                                     ->  Merge Join  (cost=1.03..4035.43 rows=89741 width=26) (actual time=0.015..39.168 rows=62670 loops=1)
                                                                           Merge Cond: (ml.movie_id = mi_idx1.movie_id)
                                                                           ->  Index Scan using movie_id_movie_link on movie_link ml  (cost=0.29..959.51 rows=29997 width=12) (actual time=0.005..5.007 rows=29997 loops=1)
                                                                           ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx1  (cost=0.43..43820.38 rows=1380035 width=14) (actual time=0.007..18.608 rows=114373 loops=1)
                                                                     ->  Hash  (cost=2.41..2.41 rows=1 width=4) (actual time=0.017..0.017 rows=1 loops=1)
                                                                           Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                                           ->  Seq Scan on info_type it1  (cost=0.00..2.41 rows=1 width=4) (actual time=0.009..0.010 rows=1 loops=1)
                                                                                 Filter: ((info)::text = 'rating'::text)
                                                                                 Rows Removed by Filter: 112
                                                         ->  Materialize  (cost=0.00..1.26 rows=3 width=4) (actual time=0.000..0.000 rows=2 loops=20890)
                                                               ->  Seq Scan on link_type lt  (cost=0.00..1.25 rows=3 width=4) (actual time=0.011..0.014 rows=2 loops=1)
                                                                     Filter: ((link)::text = ANY ('{sequel,follows,"followed by"}'::text[]))
                                                                     Rows Removed by Filter: 16
                                                   ->  Index Scan using title_pkey on title t1  (cost=0.43..0.57 rows=1 width=25) (actual time=0.003..0.003 rows=1 loops=2064)
                                                         Index Cond: (id = mi_idx1.movie_id)
                                       ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx2  (cost=0.43..2.05 rows=1 width=14) (actual time=0.005..0.006 rows=1 loops=1220)
                                             Index Cond: (movie_id = ml.linked_movie_id)
                                             Filter: ((info)::text < '3.0'::text)
                                             Rows Removed by Filter: 1
                                 ->  Index Scan using movie_id_movie_companies on movie_companies mc1  (cost=0.43..0.56 rows=5 width=8) (actual time=0.008..0.011 rows=3 loops=28)
                                       Index Cond: (movie_id = t1.id)
                           ->  Index Scan using company_name_pkey on company_name cn1  (cost=0.42..0.45 rows=1 width=23) (actual time=0.005..0.005 rows=0 loops=81)
                                 Index Cond: (id = mc1.company_id)
                                 Filter: ((country_code)::text = '[us]'::text)
                                 Rows Removed by Filter: 1
                     ->  Index Scan using title_pkey on title t2  (cost=0.43..0.71 rows=1 width=25) (actual time=0.007..0.007 rows=0 loops=12)
                           Index Cond: (id = mi_idx2.movie_id)
                           Filter: ((production_year >= 2005) AND (production_year <= 2008))
                           Rows Removed by Filter: 1
               ->  Index Scan using movie_id_movie_companies on movie_companies mc2  (cost=0.43..0.67 rows=5 width=8) (actual time=0.010..0.016 rows=4 loops=2)
                     Index Cond: (movie_id = mi_idx2.movie_id)
         ->  Index Scan using company_name_pkey on company_name cn2  (cost=0.42..0.44 rows=1 width=23) (actual time=0.006..0.006 rows=1 loops=8)
               Index Cond: (id = mc2.company_id)
 Planning Time: 91.986 ms
 Execution Time: 70.445 ms
(67 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/33b.sql_explained.sql
SET
                                                                                                                 QUERY PLAN                                                                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=2681.30..2681.31 rows=1 width=192) (actual time=45.407..45.407 rows=1 loops=1)
   ->  Nested Loop  (cost=340.64..2681.28 rows=1 width=84) (actual time=8.216..45.391 rows=4 loops=1)
         Join Filter: ((t2.id = mi_idx2.movie_id) AND (it2.id = mi_idx2.info_type_id))
         Rows Removed by Join Filter: 4
         ->  Nested Loop  (cost=340.21..2680.76 rows=1 width=94) (actual time=8.199..45.363 rows=4 loops=1)
               ->  Nested Loop  (cost=340.08..2680.59 rows=1 width=98) (actual time=8.191..45.351 rows=4 loops=1)
                     Join Filter: (ml.movie_id = t1.id)
                     ->  Nested Loop  (cost=339.65..2680.06 rows=1 width=89) (actual time=8.175..45.328 rows=4 loops=1)
                           ->  Nested Loop  (cost=339.23..2679.62 rows=1 width=74) (actual time=8.170..45.316 rows=4 loops=1)
                                 ->  Nested Loop  (cost=338.80..2678.21 rows=1 width=66) (actual time=8.162..45.305 rows=1 loops=1)
                                       ->  Nested Loop  (cost=338.67..2678.04 rows=1 width=70) (actual time=1.904..45.283 rows=6 loops=1)
                                             ->  Nested Loop  (cost=338.24..2669.65 rows=2 width=45) (actual time=1.877..43.155 rows=477 loops=1)
                                                   ->  Index Scan using info_type_pkey on info_type it2  (cost=0.14..14.12 rows=1 width=4) (actual time=0.016..0.019 rows=1 loops=1)
                                                         Filter: ((info)::text = 'rating'::text)
                                                         Rows Removed by Filter: 112
                                                   ->  Nested Loop  (cost=338.09..2655.51 rows=2 width=41) (actual time=1.858..43.076 rows=477 loops=1)
                                                         ->  Nested Loop  (cost=337.67..2557.48 rows=220 width=26) (actual time=1.810..25.249 rows=9674 loops=1)
                                                               Join Filter: (ml.movie_id = mc1.movie_id)
                                                               ->  Hash Join  (cost=337.24..2528.65 rows=44 width=18) (actual time=1.804..16.115 rows=2064 loops=1)
                                                                     Hash Cond: (mi_idx1.info_type_id = it1.id)
                                                                     ->  Merge Join  (cost=334.82..2512.65 rows=4984 width=22) (actual time=1.764..15.435 rows=6192 loops=1)
                                                                           Merge Cond: (mi_idx1.movie_id = ml.movie_id)
                                                                           ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx1  (cost=0.43..43820.38 rows=1380035 width=14) (actual time=0.009..8.226 rows=63901 loops=1)
                                                                           ->  Sort  (cost=334.38..338.55 rows=1666 width=8) (actual time=1.733..2.059 rows=6443 loops=1)
                                                                                 Sort Key: ml.movie_id
                                                                                 Sort Method: quicksort  Memory: 205kB
                                                                                 ->  Nested Loop  (cost=38.82..245.23 rows=1666 width=8) (actual time=0.117..1.224 rows=2315 loops=1)
                                                                                       ->  Seq Scan on link_type lt  (cost=0.00..1.23 rows=1 width=4) (actual time=0.011..0.015 rows=2 loops=1)
                                                                                             Filter: ((link)::text ~~ '%follow%'::text)
                                                                                             Rows Removed by Filter: 16
                                                                                       ->  Bitmap Heap Scan on movie_link ml  (cost=38.82..225.26 rows=1875 width=12) (actual time=0.090..0.493 rows=1158 loops=2)
                                                                                             Recheck Cond: (link_type_id = lt.id)
                                                                                             Heap Blocks: exact=191
                                                                                             ->  Bitmap Index Scan on link_type_id_movie_link  (cost=0.00..38.35 rows=1875 width=0) (actual time=0.074..0.074 rows=1158 loops=2)
                                                                                                   Index Cond: (link_type_id = lt.id)
                                                                     ->  Hash  (cost=2.41..2.41 rows=1 width=4) (actual time=0.015..0.015 rows=1 loops=1)
                                                                           Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                                           ->  Seq Scan on info_type it1  (cost=0.00..2.41 rows=1 width=4) (actual time=0.010..0.012 rows=1 loops=1)
                                                                                 Filter: ((info)::text = 'rating'::text)
                                                                                 Rows Removed by Filter: 112
                                                               ->  Index Scan using movie_id_movie_companies on movie_companies mc1  (cost=0.43..0.59 rows=5 width=8) (actual time=0.002..0.004 rows=5 loops=2064)
                                                                     Index Cond: (movie_id = mi_idx1.movie_id)
                                                         ->  Index Scan using company_name_pkey on company_name cn1  (cost=0.42..0.45 rows=1 width=23) (actual time=0.002..0.002 rows=0 loops=9674)
                                                               Index Cond: (id = mc1.company_id)
                                                               Filter: ((country_code)::text = '[nl]'::text)
                                                               Rows Removed by Filter: 1
                                             ->  Index Scan using title_pkey on title t2  (cost=0.43..4.20 rows=1 width=25) (actual time=0.004..0.004 rows=0 loops=477)
                                                   Index Cond: (id = ml.linked_movie_id)
                                                   Filter: (production_year = 2007)
                                                   Rows Removed by Filter: 1
                                       ->  Index Scan using kind_type_pkey on kind_type kt2  (cost=0.13..0.15 rows=1 width=4) (actual time=0.003..0.003 rows=0 loops=6)
                                             Index Cond: (id = t2.kind_id)
                                             Filter: ((kind)::text = 'tv series'::text)
                                             Rows Removed by Filter: 1
                                 ->  Index Scan using movie_id_movie_companies on movie_companies mc2  (cost=0.43..1.35 rows=5 width=8) (actual time=0.007..0.009 rows=4 loops=1)
                                       Index Cond: (movie_id = t2.id)
                           ->  Index Scan using company_name_pkey on company_name cn2  (cost=0.42..0.44 rows=1 width=23) (actual time=0.002..0.002 rows=1 loops=4)
                                 Index Cond: (id = mc2.company_id)
                     ->  Index Scan using title_pkey on title t1  (cost=0.43..0.51 rows=1 width=25) (actual time=0.005..0.005 rows=1 loops=4)
                           Index Cond: (id = mc1.movie_id)
               ->  Index Scan using kind_type_pkey on kind_type kt1  (cost=0.13..0.15 rows=1 width=4) (actual time=0.002..0.002 rows=1 loops=4)
                     Index Cond: (id = t1.kind_id)
                     Filter: ((kind)::text = 'tv series'::text)
         ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx2  (cost=0.43..0.51 rows=1 width=14) (actual time=0.005..0.006 rows=2 loops=4)
               Index Cond: (movie_id = mc2.movie_id)
               Filter: ((info)::text < '3.0'::text)
               Rows Removed by Filter: 1
 Planning Time: 92.117 ms
 Execution Time: 45.734 ms
(69 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/33c.sql_explained.sql
SET
                                                                                                                 QUERY PLAN                                                                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=3851.97..3851.98 rows=1 width=192) (actual time=34.920..34.920 rows=1 loops=1)
   ->  Nested Loop  (cost=875.97..3851.96 rows=1 width=84) (actual time=9.669..34.860 rows=114 loops=1)
         ->  Nested Loop  (cost=875.55..3851.51 rows=1 width=69) (actual time=9.661..34.544 rows=131 loops=1)
               ->  Nested Loop  (cost=875.12..3850.90 rows=1 width=77) (actual time=9.654..34.382 rows=44 loops=1)
                     ->  Nested Loop  (cost=874.70..3850.46 rows=1 width=62) (actual time=9.642..34.250 rows=44 loops=1)
                           ->  Nested Loop  (cost=874.27..3849.79 rows=1 width=70) (actual time=9.635..34.067 rows=19 loops=1)
                                 ->  Nested Loop  (cost=874.14..3849.63 rows=1 width=74) (actual time=8.861..34.025 rows=27 loops=1)
                                       Join Filter: (it2.id = mi_idx2.info_type_id)
                                       Rows Removed by Join Filter: 1170
                                       ->  Nested Loop  (cost=873.71..3841.45 rows=15 width=68) (actual time=5.724..31.587 rows=851 loops=1)
                                             ->  Index Scan using info_type_pkey on info_type it2  (cost=0.14..14.12 rows=1 width=4) (actual time=0.016..0.019 rows=1 loops=1)
                                                   Filter: ((info)::text = 'rating'::text)
                                                   Rows Removed by Filter: 112
                                             ->  Hash Join  (cost=873.57..3827.18 rows=15 width=64) (actual time=5.705..31.456 rows=851 loops=1)
                                                   Hash Cond: (t1.kind_id = kt1.id)
                                                   ->  Nested Loop  (cost=872.46..3825.83 rows=54 width=68) (actual time=5.675..31.243 rows=851 loops=1)
                                                         Join Filter: (ml.movie_id = t1.id)
                                                         ->  Nested Loop  (cost=872.03..3794.27 rows=54 width=43) (actual time=5.669..29.491 rows=851 loops=1)
                                                               ->  Hash Join  (cost=871.60..3239.76 rows=132 width=18) (actual time=5.636..19.870 rows=2064 loops=1)
                                                                     Hash Cond: (mi_idx1.info_type_id = it1.id)
                                                                     ->  Merge Join  (cost=869.17..3196.60 rows=14958 width=22) (actual time=5.607..19.187 rows=6192 loops=1)
                                                                           Merge Cond: (mi_idx1.movie_id = ml.movie_id)
                                                                           ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx1  (cost=0.43..43820.38 rows=1380035 width=14) (actual time=0.008..8.131 rows=63901 loops=1)
                                                                           ->  Sort  (cost=868.72..881.22 rows=5000 width=8) (actual time=5.577..5.888 rows=6443 loops=1)
                                                                                 Sort Key: ml.movie_id
                                                                                 Sort Method: quicksort  Memory: 205kB
                                                                                 ->  Hash Join  (cost=1.29..561.53 rows=5000 width=8) (actual time=0.039..5.079 rows=2315 loops=1)
                                                                                       Hash Cond: (ml.link_type_id = lt.id)
                                                                                       ->  Seq Scan on movie_link ml  (cost=0.00..462.97 rows=29997 width=12) (actual time=0.004..2.673 rows=29997 loops=1)
                                                                                       ->  Hash  (cost=1.25..1.25 rows=3 width=4) (actual time=0.016..0.016 rows=2 loops=1)
                                                                                             Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                                                             ->  Seq Scan on link_type lt  (cost=0.00..1.25 rows=3 width=4) (actual time=0.010..0.013 rows=2 loops=1)
                                                                                                   Filter: ((link)::text = ANY ('{sequel,follows,"followed by"}'::text[]))
                                                                                                   Rows Removed by Filter: 16
                                                                     ->  Hash  (cost=2.41..2.41 rows=1 width=4) (actual time=0.012..0.012 rows=1 loops=1)
                                                                           Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                                           ->  Seq Scan on info_type it1  (cost=0.00..2.41 rows=1 width=4) (actual time=0.009..0.010 rows=1 loops=1)
                                                                                 Filter: ((info)::text = 'rating'::text)
                                                                                 Rows Removed by Filter: 112
                                                               ->  Index Scan using title_pkey on title t2  (cost=0.43..4.20 rows=1 width=25) (actual time=0.004..0.004 rows=0 loops=2064)
                                                                     Index Cond: (id = ml.linked_movie_id)
                                                                     Filter: ((production_year >= 2000) AND (production_year <= 2010))
                                                                     Rows Removed by Filter: 1
                                                         ->  Index Scan using title_pkey on title t1  (cost=0.43..0.57 rows=1 width=25) (actual time=0.002..0.002 rows=1 loops=851)
                                                               Index Cond: (id = mi_idx1.movie_id)
                                                   ->  Hash  (cost=1.09..1.09 rows=2 width=4) (actual time=0.012..0.013 rows=2 loops=1)
                                                         Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                         ->  Seq Scan on kind_type kt1  (cost=0.00..1.09 rows=2 width=4) (actual time=0.005..0.006 rows=2 loops=1)
                                                               Filter: ((kind)::text = ANY ('{"tv series",episode}'::text[]))
                                                               Rows Removed by Filter: 5
                                       ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx2  (cost=0.43..0.53 rows=1 width=14) (actual time=0.002..0.003 rows=1 loops=851)
                                             Index Cond: (movie_id = t2.id)
                                             Filter: ((info)::text < '3.5'::text)
                                             Rows Removed by Filter: 2
                                 ->  Index Scan using kind_type_pkey on kind_type kt2  (cost=0.13..0.15 rows=1 width=4) (actual time=0.001..0.001 rows=1 loops=27)
                                       Index Cond: (id = t2.kind_id)
                                       Filter: ((kind)::text = ANY ('{"tv series",episode}'::text[]))
                                       Rows Removed by Filter: 0
                           ->  Index Scan using movie_id_movie_companies on movie_companies mc2  (cost=0.43..0.62 rows=5 width=8) (actual time=0.007..0.009 rows=2 loops=19)
                                 Index Cond: (movie_id = t2.id)
                     ->  Index Scan using company_name_pkey on company_name cn2  (cost=0.42..0.44 rows=1 width=23) (actual time=0.003..0.003 rows=1 loops=44)
                           Index Cond: (id = mc2.company_id)
               ->  Index Scan using movie_id_movie_companies on movie_companies mc1  (cost=0.43..0.56 rows=5 width=8) (actual time=0.002..0.003 rows=3 loops=44)
                     Index Cond: (movie_id = t1.id)
         ->  Index Scan using company_name_pkey on company_name cn1  (cost=0.42..0.45 rows=1 width=23) (actual time=0.002..0.002 rows=1 loops=131)
               Index Cond: (id = mc1.company_id)
               Filter: ((country_code)::text <> '[us]'::text)
               Rows Removed by Filter: 0
 Planning Time: 89.873 ms
 Execution Time: 35.219 ms
(70 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/3a.sql_explained.sql
SET
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=16579.47..16579.48 rows=1 width=32) (actual time=219.417..219.417 rows=1 loops=1)
   ->  Nested Loop  (cost=7.61..16579.31 rows=65 width=17) (actual time=6.554..219.357 rows=206 loops=1)
         Join Filter: (t.id = mi.movie_id)
         ->  Nested Loop  (cost=7.18..16269.29 rows=174 width=25) (actual time=4.901..125.340 rows=2235 loops=1)
               ->  Nested Loop  (cost=6.75..16055.56 rows=438 width=4) (actual time=3.538..58.270 rows=12951 loops=1)
                     ->  Seq Scan on keyword k  (cost=0.00..2626.12 rows=13 width=4) (actual time=1.155..21.948 rows=30 loops=1)
                           Filter: ((keyword)::text ~~ '%sequel%'::text)
                           Rows Removed by Filter: 134140
                     ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1030.04 rows=299 width=8) (actual time=0.100..1.161 rows=432 loops=30)
                           Recheck Cond: (keyword_id = k.id)
                           Heap Blocks: exact=6979
                           ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=0.060..0.060 rows=432 loops=30)
                                 Index Cond: (keyword_id = k.id)
               ->  Index Scan using title_pkey on title t  (cost=0.43..0.49 rows=1 width=21) (actual time=0.005..0.005 rows=0 loops=12951)
                     Index Cond: (id = mk.movie_id)
                     Filter: (production_year > 2005)
                     Rows Removed by Filter: 1
         ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..1.77 rows=1 width=4) (actual time=0.039..0.042 rows=0 loops=2235)
               Index Cond: (movie_id = mk.movie_id)
               Filter: ((info)::text = ANY ('{Sweden,Norway,Germany,Denmark,Swedish,Denish,Norwegian,German}'::text[]))
               Rows Removed by Filter: 45
 Planning Time: 1.767 ms
 Execution Time: 219.510 ms
(23 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/3b.sql_explained.sql
SET
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=16369.03..16369.04 rows=1 width=32) (actual time=141.658..141.658 rows=1 loops=1)
   ->  Nested Loop  (cost=7.61..16369.03 rows=1 width=17) (actual time=10.444..141.646 rows=5 loops=1)
         Join Filter: (t.id = mi.movie_id)
         ->  Nested Loop  (cost=7.18..16269.29 rows=68 width=25) (actual time=5.293..121.963 rows=405 loops=1)
               ->  Nested Loop  (cost=6.75..16055.56 rows=438 width=4) (actual time=3.709..58.115 rows=12951 loops=1)
                     ->  Seq Scan on keyword k  (cost=0.00..2626.12 rows=13 width=4) (actual time=1.314..22.403 rows=30 loops=1)
                           Filter: ((keyword)::text ~~ '%sequel%'::text)
                           Rows Removed by Filter: 134140
                     ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1030.04 rows=299 width=8) (actual time=0.100..1.140 rows=432 loops=30)
                           Recheck Cond: (keyword_id = k.id)
                           Heap Blocks: exact=6979
                           ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=0.060..0.060 rows=432 loops=30)
                                 Index Cond: (keyword_id = k.id)
               ->  Index Scan using title_pkey on title t  (cost=0.43..0.49 rows=1 width=21) (actual time=0.005..0.005 rows=0 loops=12951)
                     Index Cond: (id = mk.movie_id)
                     Filter: (production_year > 2010)
                     Rows Removed by Filter: 1
         ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..1.45 rows=1 width=4) (actual time=0.048..0.048 rows=0 loops=405)
               Index Cond: (movie_id = mk.movie_id)
               Filter: ((info)::text = 'Bulgaria'::text)
               Rows Removed by Filter: 63
 Planning Time: 1.861 ms
 Execution Time: 141.768 ms
(23 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/3c.sql_explained.sql
SET
                                                                          QUERY PLAN                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=16842.39..16842.40 rows=1 width=32) (actual time=379.016..379.017 rows=1 loops=1)
   ->  Nested Loop  (cost=7.61..16840.96 rows=570 width=17) (actual time=3.990..377.993 rows=7250 loops=1)
         Join Filter: (t.id = mi.movie_id)
         ->  Nested Loop  (cost=7.18..16269.29 rows=301 width=25) (actual time=3.742..117.074 rows=7874 loops=1)
               ->  Nested Loop  (cost=6.75..16055.56 rows=438 width=4) (actual time=3.718..54.809 rows=12951 loops=1)
                     ->  Seq Scan on keyword k  (cost=0.00..2626.12 rows=13 width=4) (actual time=1.326..22.001 rows=30 loops=1)
                           Filter: ((keyword)::text ~~ '%sequel%'::text)
                           Rows Removed by Filter: 134140
                     ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1030.04 rows=299 width=8) (actual time=0.101..1.042 rows=432 loops=30)
                           Recheck Cond: (keyword_id = k.id)
                           Heap Blocks: exact=6979
                           ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=0.061..0.061 rows=432 loops=30)
                                 Index Cond: (keyword_id = k.id)
               ->  Index Scan using title_pkey on title t  (cost=0.43..0.49 rows=1 width=21) (actual time=0.004..0.004 rows=1 loops=12951)
                     Index Cond: (id = mk.movie_id)
                     Filter: (production_year > 1990)
                     Rows Removed by Filter: 0
         ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..1.87 rows=2 width=4) (actual time=0.028..0.033 rows=1 loops=7874)
               Index Cond: (movie_id = mk.movie_id)
               Filter: ((info)::text = ANY ('{Sweden,Norway,Germany,Denmark,Swedish,Denish,Norwegian,German,USA,American}'::text[]))
               Rows Removed by Filter: 35
 Planning Time: 2.016 ms
 Execution Time: 379.117 ms
(23 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/4a.sql_explained.sql
SET
                                                                                 QUERY PLAN                                                                                 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=16288.57..16288.58 rows=1 width=64) (actual time=154.916..154.916 rows=1 loops=1)
   ->  Nested Loop  (cost=7.61..16288.56 rows=2 width=23) (actual time=5.882..154.742 rows=740 loops=1)
         Join Filter: (mi_idx.movie_id = t.id)
         ->  Nested Loop  (cost=7.18..16286.56 rows=4 width=14) (actual time=3.745..115.348 rows=5820 loops=1)
               Join Filter: (mi_idx.info_type_id = it.id)
               Rows Removed by Join Filter: 2613
               ->  Seq Scan on info_type it  (cost=0.00..2.41 rows=1 width=4) (actual time=0.011..0.013 rows=1 loops=1)
                     Filter: ((info)::text = 'rating'::text)
                     Rows Removed by Filter: 112
               ->  Nested Loop  (cost=7.18..16278.01 rows=491 width=18) (actual time=3.732..114.227 rows=8433 loops=1)
                     ->  Nested Loop  (cost=6.75..16055.56 rows=438 width=4) (actual time=3.708..61.562 rows=12951 loops=1)
                           ->  Seq Scan on keyword k  (cost=0.00..2626.12 rows=13 width=4) (actual time=1.305..22.562 rows=30 loops=1)
                                 Filter: ((keyword)::text ~~ '%sequel%'::text)
                                 Rows Removed by Filter: 134140
                           ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1030.04 rows=299 width=8) (actual time=0.100..1.251 rows=432 loops=30)
                                 Recheck Cond: (keyword_id = k.id)
                                 Heap Blocks: exact=6979
                                 ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=0.061..0.061 rows=432 loops=30)
                                       Index Cond: (keyword_id = k.id)
                     ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx  (cost=0.43..0.50 rows=1 width=14) (actual time=0.004..0.004 rows=1 loops=12951)
                           Index Cond: (movie_id = mk.movie_id)
                           Filter: ((info)::text > '5.0'::text)
                           Rows Removed by Filter: 1
         ->  Index Scan using title_pkey on title t  (cost=0.43..0.49 rows=1 width=21) (actual time=0.007..0.007 rows=0 loops=5820)
               Index Cond: (id = mk.movie_id)
               Filter: (production_year > 2005)
               Rows Removed by Filter: 1
 Planning Time: 2.343 ms
 Execution Time: 155.038 ms
(29 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/4b.sql_explained.sql
SET
                                                                                 QUERY PLAN                                                                                 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=16281.03..16281.04 rows=1 width=64) (actual time=88.331..88.331 rows=1 loops=1)
   ->  Nested Loop  (cost=7.61..16281.02 rows=1 width=23) (actual time=14.138..88.320 rows=6 loops=1)
         Join Filter: (mi_idx.movie_id = t.id)
         ->  Nested Loop  (cost=7.18..16280.52 rows=1 width=14) (actual time=12.444..88.154 rows=21 loops=1)
               Join Filter: (mi_idx.info_type_id = it.id)
               Rows Removed by Join Filter: 285
               ->  Seq Scan on info_type it  (cost=0.00..2.41 rows=1 width=4) (actual time=0.012..0.013 rows=1 loops=1)
                     Filter: ((info)::text = 'rating'::text)
                     Rows Removed by Filter: 112
               ->  Nested Loop  (cost=7.18..16278.01 rows=8 width=18) (actual time=4.070..88.103 rows=306 loops=1)
                     ->  Nested Loop  (cost=6.75..16055.56 rows=438 width=4) (actual time=3.732..49.276 rows=12951 loops=1)
                           ->  Seq Scan on keyword k  (cost=0.00..2626.12 rows=13 width=4) (actual time=1.348..20.501 rows=30 loops=1)
                                 Filter: ((keyword)::text ~~ '%sequel%'::text)
                                 Rows Removed by Filter: 134140
                           ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1030.04 rows=299 width=8) (actual time=0.094..0.915 rows=432 loops=30)
                                 Recheck Cond: (keyword_id = k.id)
                                 Heap Blocks: exact=6979
                                 ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=0.057..0.057 rows=432 loops=30)
                                       Index Cond: (keyword_id = k.id)
                     ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx  (cost=0.43..0.50 rows=1 width=14) (actual time=0.003..0.003 rows=0 loops=12951)
                           Index Cond: (movie_id = mk.movie_id)
                           Filter: ((info)::text > '9.0'::text)
                           Rows Removed by Filter: 2
         ->  Index Scan using title_pkey on title t  (cost=0.43..0.49 rows=1 width=21) (actual time=0.007..0.007 rows=0 loops=21)
               Index Cond: (id = mk.movie_id)
               Filter: (production_year > 2010)
               Rows Removed by Filter: 1
 Planning Time: 2.094 ms
 Execution Time: 88.457 ms
(29 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/4c.sql_explained.sql
SET
                                                                                 QUERY PLAN                                                                                 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=16297.85..16297.86 rows=1 width=64) (actual time=128.307..128.307 rows=1 loops=1)
   ->  Nested Loop  (cost=7.61..16297.83 rows=5 width=23) (actual time=3.395..127.420 rows=4700 loops=1)
         Join Filter: (mi_idx.movie_id = t.id)
         ->  Nested Loop  (cost=7.18..16294.33 rows=7 width=14) (actual time=3.357..81.217 rows=8092 loops=1)
               Join Filter: (mi_idx.info_type_id = it.id)
               Rows Removed by Join Filter: 6507
               ->  Seq Scan on info_type it  (cost=0.00..2.41 rows=1 width=4) (actual time=0.012..0.014 rows=1 loops=1)
                     Filter: ((info)::text = 'rating'::text)
                     Rows Removed by Filter: 112
               ->  Nested Loop  (cost=7.18..16282.39 rows=762 width=18) (actual time=3.344..79.576 rows=14599 loops=1)
                     ->  Nested Loop  (cost=6.75..16055.56 rows=438 width=4) (actual time=3.333..42.968 rows=12951 loops=1)
                           ->  Seq Scan on keyword k  (cost=0.00..2626.12 rows=13 width=4) (actual time=1.120..22.488 rows=30 loops=1)
                                 Filter: ((keyword)::text ~~ '%sequel%'::text)
                                 Rows Removed by Filter: 134140
                           ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1030.04 rows=299 width=8) (actual time=0.094..0.634 rows=432 loops=30)
                                 Recheck Cond: (keyword_id = k.id)
                                 Heap Blocks: exact=6979
                                 ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=0.055..0.055 rows=432 loops=30)
                                       Index Cond: (keyword_id = k.id)
                     ->  Index Scan using movie_id_movie_info_idx on movie_info_idx mi_idx  (cost=0.43..0.50 rows=2 width=14) (actual time=0.002..0.003 rows=1 loops=12951)
                           Index Cond: (movie_id = mk.movie_id)
                           Filter: ((info)::text > '2.0'::text)
                           Rows Removed by Filter: 1
         ->  Index Scan using title_pkey on title t  (cost=0.43..0.49 rows=1 width=21) (actual time=0.005..0.005 rows=1 loops=8092)
               Index Cond: (id = mk.movie_id)
               Filter: (production_year > 1990)
               Rows Removed by Filter: 0
 Planning Time: 1.874 ms
 Execution Time: 128.425 ms
(29 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/5a.sql_explained.sql
SET
                                                                                QUERY PLAN                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=38740.79..38740.80 rows=1 width=32) (actual time=135.278..135.278 rows=1 loops=1)
   ->  Gather  (cost=38740.58..38740.79 rows=2 width=32) (actual time=135.237..135.862 rows=3 loops=1)
         Workers Planned: 2
         Workers Launched: 2
         ->  Partial Aggregate  (cost=37740.58..37740.59 rows=1 width=32) (actual time=132.855..132.855 rows=1 loops=3)
               ->  Hash Join  (cost=5.47..37740.50 rows=31 width=17) (actual time=132.853..132.853 rows=0 loops=3)
                     Hash Cond: (mi.info_type_id = it.id)
                     ->  Nested Loop  (cost=1.93..37736.88 rows=31 width=21) (actual time=132.852..132.852 rows=0 loops=3)
                           ->  Nested Loop  (cost=1.49..37442.96 rows=122 width=25) (actual time=132.851..132.852 rows=0 loops=3)
                                 ->  Hash Join  (cost=1.06..35104.78 rows=308 width=4) (actual time=132.851..132.851 rows=0 loops=3)
                                       Hash Cond: (mc.company_type_id = ct.id)
                                       ->  Parallel Seq Scan on movie_companies mc  (cost=0.00..35097.06 rows=1231 width=8) (actual time=0.028..132.221 rows=8008 loops=3)
                                             Filter: (((note)::text ~~ '%(theatrical)%'::text) AND ((note)::text ~~ '%(France)%'::text))
                                             Rows Removed by Filter: 861701
                                       ->  Hash  (cost=1.05..1.05 rows=1 width=4) (actual time=0.016..0.017 rows=1 loops=3)
                                             Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                             ->  Seq Scan on company_type ct  (cost=0.00..1.05 rows=1 width=4) (actual time=0.010..0.011 rows=1 loops=3)
                                                   Filter: ((kind)::text = 'production companies'::text)
                                                   Rows Removed by Filter: 3
                                 ->  Index Scan using title_pkey on title t  (cost=0.43..7.59 rows=1 width=21) (never executed)
                                       Index Cond: (id = mc.movie_id)
                                       Filter: (production_year > 2005)
                           ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..2.40 rows=1 width=8) (never executed)
                                 Index Cond: (movie_id = t.id)
                                 Filter: ((info)::text = ANY ('{Sweden,Norway,Germany,Denmark,Swedish,Denish,Norwegian,German}'::text[]))
                     ->  Hash  (cost=2.13..2.13 rows=113 width=4) (never executed)
                           ->  Seq Scan on info_type it  (cost=0.00..2.13 rows=113 width=4) (never executed)
 Planning Time: 2.339 ms
 Execution Time: 135.999 ms
(29 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/5b.sql_explained.sql
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=38870.51..38870.52 rows=1 width=32) (actual time=127.480..127.480 rows=1 loops=1)
   ->  Gather  (cost=1002.07..38870.50 rows=2 width=17) (actual time=127.474..128.053 rows=0 loops=1)
         Workers Planned: 2
         Workers Launched: 2
         ->  Nested Loop  (cost=2.07..37870.30 rows=1 width=17) (actual time=125.036..125.036 rows=0 loops=3)
               ->  Nested Loop  (cost=1.93..37870.14 rows=1 width=21) (actual time=125.036..125.036 rows=0 loops=3)
                     ->  Nested Loop  (cost=1.49..37866.79 rows=1 width=25) (actual time=125.035..125.035 rows=0 loops=3)
                           ->  Hash Join  (cost=1.06..37816.09 rows=6 width=4) (actual time=125.035..125.035 rows=0 loops=3)
                                 Hash Cond: (mc.company_type_id = ct.id)
                                 ->  Parallel Seq Scan on movie_companies mc  (cost=0.00..37814.90 rows=25 width=8) (actual time=0.192..124.920 rows=473 loops=3)
                                       Filter: (((note)::text ~~ '%(VHS)%'::text) AND ((note)::text ~~ '%(USA)%'::text) AND ((note)::text ~~ '%(1994)%'::text))
                                       Rows Removed by Filter: 869237
                                 ->  Hash  (cost=1.05..1.05 rows=1 width=4) (actual time=0.013..0.013 rows=1 loops=3)
                                       Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                       ->  Seq Scan on company_type ct  (cost=0.00..1.05 rows=1 width=4) (actual time=0.008..0.008 rows=1 loops=3)
                                             Filter: ((kind)::text = 'production companies'::text)
                                             Rows Removed by Filter: 3
                           ->  Index Scan using title_pkey on title t  (cost=0.43..8.45 rows=1 width=21) (never executed)
                                 Index Cond: (id = mc.movie_id)
                                 Filter: (production_year > 2010)
                     ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..3.33 rows=2 width=8) (never executed)
                           Index Cond: (movie_id = t.id)
                           Filter: ((info)::text = ANY ('{USA,America}'::text[]))
               ->  Index Only Scan using info_type_pkey on info_type it  (cost=0.14..0.16 rows=1 width=4) (never executed)
                     Index Cond: (id = mi.info_type_id)
                     Heap Fetches: 0
 Planning Time: 2.042 ms
 Execution Time: 128.170 ms
(28 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/5c.sql_explained.sql
SET
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=88991.12..88991.13 rows=1 width=32) (actual time=186.881..186.881 rows=1 loops=1)
   ->  Gather  (cost=88990.90..88991.11 rows=2 width=32) (actual time=186.776..188.935 rows=3 loops=1)
         Workers Planned: 2
         Workers Launched: 2
         ->  Partial Aggregate  (cost=87990.90..87990.91 rows=1 width=32) (actual time=184.539..184.539 rows=1 loops=3)
               ->  Hash Join  (cost=5.47..87951.49 rows=15766 width=17) (actual time=21.214..184.489 rows=223 loops=3)
                     Hash Cond: (mi.info_type_id = it.id)
                     ->  Nested Loop  (cost=1.93..87905.00 rows=15766 width=21) (actual time=21.166..184.386 rows=223 loops=3)
                           ->  Nested Loop  (cost=1.49..61336.48 rows=12181 width=25) (actual time=21.097..165.294 rows=256 loops=3)
                                 ->  Hash Join  (cost=1.06..35481.01 rows=17705 width=4) (actual time=20.845..161.084 rows=266 loops=3)
                                       Hash Cond: (mc.company_type_id = ct.id)
                                       ->  Parallel Seq Scan on movie_companies mc  (cost=0.00..35097.06 rows=70822 width=8) (actual time=0.031..154.358 rows=98543 loops=3)
                                             Filter: (((note)::text !~~ '%(TV)%'::text) AND ((note)::text ~~ '%(USA)%'::text))
                                             Rows Removed by Filter: 771167
                                       ->  Hash  (cost=1.05..1.05 rows=1 width=4) (actual time=0.014..0.014 rows=1 loops=3)
                                             Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                             ->  Seq Scan on company_type ct  (cost=0.00..1.05 rows=1 width=4) (actual time=0.007..0.008 rows=1 loops=3)
                                                   Filter: ((kind)::text = 'production companies'::text)
                                                   Rows Removed by Filter: 3
                                 ->  Index Scan using title_pkey on title t  (cost=0.43..1.46 rows=1 width=21) (actual time=0.015..0.015 rows=1 loops=798)
                                       Index Cond: (id = mc.movie_id)
                                       Filter: (production_year > 1990)
                                       Rows Removed by Filter: 0
                           ->  Index Scan using movie_id_movie_info on movie_info mi  (cost=0.43..2.16 rows=2 width=8) (actual time=0.066..0.074 rows=1 loops=767)
                                 Index Cond: (movie_id = t.id)
                                 Filter: ((info)::text = ANY ('{Sweden,Norway,Germany,Denmark,Swedish,Denish,Norwegian,German,USA,American}'::text[]))
                                 Rows Removed by Filter: 10
                     ->  Hash  (cost=2.13..2.13 rows=113 width=4) (actual time=0.032..0.032 rows=113 loops=3)
                           Buckets: 1024  Batches: 1  Memory Usage: 12kB
                           ->  Seq Scan on info_type it  (cost=0.00..2.13 rows=113 width=4) (actual time=0.008..0.016 rows=113 loops=3)
 Planning Time: 2.006 ms
 Execution Time: 189.058 ms
(32 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/6a.sql_explained.sql
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=3848.64..3848.65 rows=1 width=96) (actual time=36.871..36.872 rows=1 loops=1)
   ->  Nested Loop  (cost=8.17..3848.63 rows=1 width=48) (actual time=4.360..36.859 rows=6 loops=1)
         ->  Nested Loop  (cost=7.74..3759.44 rows=195 width=37) (actual time=0.462..22.485 rows=1224 loops=1)
               Join Filter: (t.id = ci.movie_id)
               ->  Nested Loop  (cost=7.18..3749.50 rows=5 width=41) (actual time=0.434..15.391 rows=11 loops=1)
                     ->  Nested Loop  (cost=6.75..3732.91 rows=34 width=20) (actual time=0.411..15.130 rows=14 loops=1)
                           ->  Seq Scan on keyword k  (cost=0.00..2626.12 rows=1 width=20) (actual time=0.381..15.010 rows=1 loops=1)
                                 Filter: ((keyword)::text = 'marvel-cinematic-universe'::text)
                                 Rows Removed by Filter: 134169
                           ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1103.80 rows=299 width=8) (actual time=0.027..0.113 rows=14 loops=1)
                                 Recheck Cond: (keyword_id = k.id)
                                 Heap Blocks: exact=12
                                 ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=0.015..0.015 rows=14 loops=1)
                                       Index Cond: (keyword_id = k.id)
                     ->  Index Scan using title_pkey on title t  (cost=0.43..0.49 rows=1 width=21) (actual time=0.018..0.018 rows=1 loops=14)
                           Index Cond: (id = mk.movie_id)
                           Filter: (production_year > 2010)
                           Rows Removed by Filter: 0
               ->  Index Scan using movie_id_cast_info on cast_info ci  (cost=0.56..1.52 rows=37 width=8) (actual time=0.019..0.623 rows=111 loops=11)
                     Index Cond: (movie_id = mk.movie_id)
         ->  Index Scan using name_pkey on name n  (cost=0.43..0.46 rows=1 width=19) (actual time=0.012..0.012 rows=0 loops=1224)
               Index Cond: (id = ci.person_id)
               Filter: ((name)::text ~~ '%Downey%Robert%'::text)
               Rows Removed by Filter: 1
 Planning Time: 2.240 ms
 Execution Time: 36.995 ms
(26 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/6b.sql_explained.sql
SET
                                                                             QUERY PLAN                                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=12284.11..12284.12 rows=1 width=96) (actual time=288.550..288.550 rows=1 loops=1)
   ->  Nested Loop  (cost=8.17..12284.10 rows=1 width=48) (actual time=29.372..288.528 rows=12 loops=1)
         ->  Nested Loop  (cost=7.74..12283.65 rows=1 width=37) (actual time=9.004..286.310 rows=383 loops=1)
               Join Filter: (t.id = ci.movie_id)
               ->  Nested Loop  (cost=7.18..12281.66 rows=1 width=41) (actual time=8.996..285.064 rows=36 loops=1)
                     ->  Nested Loop  (cost=6.75..12149.91 rows=270 width=20) (actual time=0.707..127.127 rows=35548 loops=1)
                           ->  Seq Scan on keyword k  (cost=0.00..3632.40 rows=8 width=20) (actual time=0.107..29.727 rows=8 loops=1)
                                 Filter: ((keyword)::text = ANY ('{superhero,sequel,second-part,marvel-comics,based-on-comic,tv-special,fight,violence}'::text[]))
                                 Rows Removed by Filter: 134162
                           ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1061.70 rows=299 width=8) (actual time=1.140..11.645 rows=4444 loops=8)
                                 Recheck Cond: (keyword_id = k.id)
                                 Heap Blocks: exact=23488
                                 ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=0.654..0.654 rows=4444 loops=8)
                                       Index Cond: (keyword_id = k.id)
                     ->  Index Scan using title_pkey on title t  (cost=0.43..0.49 rows=1 width=21) (actual time=0.004..0.004 rows=0 loops=35548)
                           Index Cond: (id = mk.movie_id)
                           Filter: (production_year > 2014)
                           Rows Removed by Filter: 1
               ->  Index Scan using movie_id_cast_info on cast_info ci  (cost=0.56..1.52 rows=37 width=8) (actual time=0.011..0.032 rows=11 loops=36)
                     Index Cond: (movie_id = mk.movie_id)
         ->  Index Scan using name_pkey on name n  (cost=0.43..0.46 rows=1 width=19) (actual time=0.006..0.006 rows=0 loops=383)
               Index Cond: (id = ci.person_id)
               Filter: ((name)::text ~~ '%Downey%Robert%'::text)
               Rows Removed by Filter: 1
 Planning Time: 2.062 ms
 Execution Time: 288.684 ms
(26 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/6c.sql_explained.sql
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=3751.96..3751.97 rows=1 width=96) (actual time=11.245..11.246 rows=1 loops=1)
   ->  Nested Loop  (cost=8.17..3751.95 rows=1 width=48) (actual time=0.760..11.237 rows=2 loops=1)
         ->  Nested Loop  (cost=7.74..3751.49 rows=1 width=37) (actual time=0.452..11.035 rows=33 loops=1)
               Join Filter: (t.id = ci.movie_id)
               ->  Nested Loop  (cost=7.18..3749.51 rows=1 width=41) (actual time=0.437..10.932 rows=2 loops=1)
                     ->  Nested Loop  (cost=6.75..3732.91 rows=34 width=20) (actual time=0.396..10.725 rows=14 loops=1)
                           ->  Seq Scan on keyword k  (cost=0.00..2626.12 rows=1 width=20) (actual time=0.378..10.639 rows=1 loops=1)
                                 Filter: ((keyword)::text = 'marvel-cinematic-universe'::text)
                                 Rows Removed by Filter: 134169
                           ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1103.80 rows=299 width=8) (actual time=0.016..0.080 rows=14 loops=1)
                                 Recheck Cond: (keyword_id = k.id)
                                 Heap Blocks: exact=12
                                 ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=0.012..0.012 rows=14 loops=1)
                                       Index Cond: (keyword_id = k.id)
                     ->  Index Scan using title_pkey on title t  (cost=0.43..0.49 rows=1 width=21) (actual time=0.014..0.014 rows=0 loops=14)
                           Index Cond: (id = mk.movie_id)
                           Filter: (production_year > 2014)
                           Rows Removed by Filter: 1
               ->  Index Scan using movie_id_cast_info on cast_info ci  (cost=0.56..1.52 rows=37 width=8) (actual time=0.017..0.047 rows=16 loops=2)
                     Index Cond: (movie_id = mk.movie_id)
         ->  Index Scan using name_pkey on name n  (cost=0.43..0.46 rows=1 width=19) (actual time=0.006..0.006 rows=0 loops=33)
               Index Cond: (id = ci.person_id)
               Filter: ((name)::text ~~ '%Downey%Robert%'::text)
               Rows Removed by Filter: 1
 Planning Time: 2.447 ms
 Execution Time: 11.375 ms
(26 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/6d.sql_explained.sql
SET
                                                                             QUERY PLAN                                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=15053.68..15053.69 rows=1 width=96) (actual time=6457.236..6457.236 rows=1 loops=1)
   ->  Nested Loop  (cost=8.17..15053.68 rows=1 width=48) (actual time=178.552..6457.116 rows=88 loops=1)
         ->  Nested Loop  (cost=7.74..12573.66 rows=5422 width=37) (actual time=0.717..2419.605 rows=785477 loops=1)
               Join Filter: (t.id = ci.movie_id)
               ->  Nested Loop  (cost=7.18..12281.66 rows=147 width=41) (actual time=0.696..322.594 rows=14165 loops=1)
                     ->  Nested Loop  (cost=6.75..12149.91 rows=270 width=20) (actual time=0.674..134.926 rows=35548 loops=1)
                           ->  Seq Scan on keyword k  (cost=0.00..3632.40 rows=8 width=20) (actual time=0.102..30.019 rows=8 loops=1)
                                 Filter: ((keyword)::text = ANY ('{superhero,sequel,second-part,marvel-comics,based-on-comic,tv-special,fight,violence}'::text[]))
                                 Rows Removed by Filter: 134162
                           ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1061.70 rows=299 width=8) (actual time=1.151..12.399 rows=4444 loops=8)
                                 Recheck Cond: (keyword_id = k.id)
                                 Heap Blocks: exact=23488
                                 ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=0.664..0.664 rows=4444 loops=8)
                                       Index Cond: (keyword_id = k.id)
                     ->  Index Scan using title_pkey on title t  (cost=0.43..0.49 rows=1 width=21) (actual time=0.005..0.005 rows=0 loops=35548)
                           Index Cond: (id = mk.movie_id)
                           Filter: (production_year > 2000)
                           Rows Removed by Filter: 1
               ->  Index Scan using movie_id_cast_info on cast_info ci  (cost=0.56..1.52 rows=37 width=8) (actual time=0.007..0.138 rows=55 loops=14165)
                     Index Cond: (movie_id = mk.movie_id)
         ->  Index Scan using name_pkey on name n  (cost=0.43..0.46 rows=1 width=19) (actual time=0.005..0.005 rows=0 loops=785477)
               Index Cond: (id = ci.person_id)
               Filter: ((name)::text ~~ '%Downey%Robert%'::text)
               Rows Removed by Filter: 1
 Planning Time: 1.961 ms
 Execution Time: 6457.347 ms
(26 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/6e.sql_explained.sql
SET
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=4095.38..4095.39 rows=1 width=96) (actual time=23.931..23.931 rows=1 loops=1)
   ->  Nested Loop  (cost=8.17..4095.38 rows=1 width=48) (actual time=3.822..23.919 rows=6 loops=1)
         ->  Nested Loop  (cost=7.74..3785.26 rows=678 width=37) (actual time=0.465..14.921 rows=1224 loops=1)
               Join Filter: (t.id = ci.movie_id)
               ->  Nested Loop  (cost=7.18..3749.50 rows=18 width=41) (actual time=0.434..10.677 rows=11 loops=1)
                     ->  Nested Loop  (cost=6.75..3732.91 rows=34 width=20) (actual time=0.413..10.482 rows=14 loops=1)
                           ->  Seq Scan on keyword k  (cost=0.00..2626.12 rows=1 width=20) (actual time=0.379..10.375 rows=1 loops=1)
                                 Filter: ((keyword)::text = 'marvel-cinematic-universe'::text)
                                 Rows Removed by Filter: 134169
                           ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1103.80 rows=299 width=8) (actual time=0.031..0.100 rows=14 loops=1)
                                 Recheck Cond: (keyword_id = k.id)
                                 Heap Blocks: exact=12
                                 ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=0.020..0.020 rows=14 loops=1)
                                       Index Cond: (keyword_id = k.id)
                     ->  Index Scan using title_pkey on title t  (cost=0.43..0.49 rows=1 width=21) (actual time=0.013..0.013 rows=1 loops=14)
                           Index Cond: (id = mk.movie_id)
                           Filter: (production_year > 2000)
                           Rows Removed by Filter: 0
               ->  Index Scan using movie_id_cast_info on cast_info ci  (cost=0.56..1.52 rows=37 width=8) (actual time=0.015..0.367 rows=111 loops=11)
                     Index Cond: (movie_id = mk.movie_id)
         ->  Index Scan using name_pkey on name n  (cost=0.43..0.46 rows=1 width=19) (actual time=0.007..0.007 rows=0 loops=1224)
               Index Cond: (id = ci.person_id)
               Filter: ((name)::text ~~ '%Downey%Robert%'::text)
               Rows Removed by Filter: 1
 Planning Time: 2.475 ms
 Execution Time: 24.058 ms
(26 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/6f.sql_explained.sql
SET
                                                                             QUERY PLAN                                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=15080.79..15080.80 rows=1 width=96) (actual time=6967.306..6967.307 rows=1 loops=1)
   ->  Nested Loop  (cost=8.17..15040.12 rows=5422 width=48) (actual time=0.760..6788.813 rows=785477 loops=1)
         ->  Nested Loop  (cost=7.74..12573.66 rows=5422 width=37) (actual time=0.727..2546.384 rows=785477 loops=1)
               Join Filter: (t.id = ci.movie_id)
               ->  Nested Loop  (cost=7.18..12281.66 rows=147 width=41) (actual time=0.703..340.645 rows=14165 loops=1)
                     ->  Nested Loop  (cost=6.75..12149.91 rows=270 width=20) (actual time=0.681..142.797 rows=35548 loops=1)
                           ->  Seq Scan on keyword k  (cost=0.00..3632.40 rows=8 width=20) (actual time=0.104..29.943 rows=8 loops=1)
                                 Filter: ((keyword)::text = ANY ('{superhero,sequel,second-part,marvel-comics,based-on-comic,tv-special,fight,violence}'::text[]))
                                 Rows Removed by Filter: 134162
                           ->  Bitmap Heap Scan on movie_keyword mk  (cost=6.75..1061.70 rows=299 width=8) (actual time=1.145..13.397 rows=4444 loops=8)
                                 Recheck Cond: (keyword_id = k.id)
                                 Heap Blocks: exact=23488
                                 ->  Bitmap Index Scan on keyword_id_movie_keyword  (cost=0.00..6.67 rows=299 width=0) (actual time=0.658..0.658 rows=4444 loops=8)
                                       Index Cond: (keyword_id = k.id)
                     ->  Index Scan using title_pkey on title t  (cost=0.43..0.49 rows=1 width=21) (actual time=0.005..0.005 rows=0 loops=35548)
                           Index Cond: (id = mk.movie_id)
                           Filter: (production_year > 2000)
                           Rows Removed by Filter: 1
               ->  Index Scan using movie_id_cast_info on cast_info ci  (cost=0.56..1.52 rows=37 width=8) (actual time=0.008..0.146 rows=55 loops=14165)
                     Index Cond: (movie_id = mk.movie_id)
         ->  Index Scan using name_pkey on name n  (cost=0.43..0.45 rows=1 width=19) (actual time=0.005..0.005 rows=1 loops=785477)
               Index Cond: (id = ci.person_id)
 Planning Time: 2.175 ms
 Execution Time: 6967.433 ms
(24 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/7a.sql_explained.sql
SET
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=13450.44..13450.45 rows=1 width=64) (actual time=978.508..978.509 rows=1 loops=1)
   ->  Nested Loop  (cost=41.24..13450.44 rows=1 width=32) (actual time=57.203..978.481 rows=32 loops=1)
         ->  Nested Loop  (cost=41.10..13449.36 rows=1 width=36) (actual time=57.185..978.386 rows=32 loops=1)
               Join Filter: (n.id = an.person_id)
               ->  Nested Loop  (cost=40.67..13448.87 rows=1 width=48) (actual time=57.160..978.188 rows=14 loops=1)
                     Join Filter: (n.id = pi.person_id)
                     ->  Nested Loop  (cost=40.24..12494.38 rows=985 width=40) (actual time=0.401..833.284 rows=17559 loops=1)
                           ->  Nested Loop  (cost=39.81..8533.64 rows=8474 width=21) (actual time=0.378..293.063 rows=105262 loops=1)
                                 ->  Nested Loop  (cost=39.25..7243.89 rows=229 width=25) (actual time=0.346..37.549 rows=1467 loops=1)
                                       ->  Nested Loop  (cost=38.82..245.23 rows=1666 width=4) (actual time=0.310..2.485 rows=5186 loops=1)
                                             ->  Seq Scan on link_type lt  (cost=0.00..1.23 rows=1 width=4) (actual time=0.014..0.017 rows=1 loops=1)
                                                   Filter: ((link)::text = 'features'::text)
                                                   Rows Removed by Filter: 17
                                             ->  Bitmap Heap Scan on movie_link ml  (cost=38.82..225.26 rows=1875 width=8) (actual time=0.294..1.573 rows=5186 loops=1)
                                                   Recheck Cond: (link_type_id = lt.id)
                                                   Heap Blocks: exact=132
                                                   ->  Bitmap Index Scan on link_type_id_movie_link  (cost=0.00..38.35 rows=1875 width=0) (actual time=0.266..0.266 rows=5186 loops=1)
                                                         Index Cond: (link_type_id = lt.id)
                                       ->  Index Scan using title_pkey on title t  (cost=0.43..4.20 rows=1 width=21) (actual time=0.006..0.006 rows=0 loops=5186)
                                             Index Cond: (id = ml.linked_movie_id)
                                             Filter: ((production_year >= 1980) AND (production_year <= 1995))
                                             Rows Removed by Filter: 1
                                 ->  Index Scan using movie_id_cast_info on cast_info ci  (cost=0.56..5.26 rows=37 width=8) (actual time=0.009..0.165 rows=72 loops=1467)
                                       Index Cond: (movie_id = t.id)
                           ->  Index Scan using name_pkey on name n  (cost=0.43..0.47 rows=1 width=19) (actual time=0.005..0.005 rows=0 loops=105262)
                                 Index Cond: (id = ci.person_id)
                                 Filter: (((name_pcode_cf)::text >= 'A'::text) AND ((name_pcode_cf)::text <= 'F'::text) AND (((gender)::text = 'm'::text) OR (((gender)::text = 'f'::text) AND ((name)::text ~~ 'B%'::text))))
                                 Rows Removed by Filter: 1
                     ->  Index Scan using person_id_person_info on person_info pi  (cost=0.43..0.96 rows=1 width=8) (actual time=0.008..0.008 rows=0 loops=17559)
                           Index Cond: (person_id = ci.person_id)
                           Filter: ((note)::text = 'Volker Boehm'::text)
                           Rows Removed by Filter: 20
               ->  Index Scan using person_id_aka_name on aka_name an  (cost=0.42..0.47 rows=2 width=4) (actual time=0.010..0.013 rows=2 loops=14)
                     Index Cond: (person_id = ci.person_id)
                     Filter: ((name)::text ~~ '%a%'::text)
                     Rows Removed by Filter: 1
         ->  Index Scan using info_type_pkey on info_type it  (cost=0.14..0.61 rows=1 width=4) (actual time=0.002..0.002 rows=1 loops=32)
               Index Cond: (id = pi.info_type_id)
               Filter: ((info)::text = 'mini biography'::text)
 Planning Time: 7.374 ms
 Execution Time: 978.691 ms
(41 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/7b.sql_explained.sql
SET
                                                                                      QUERY PLAN                                                                                       
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=9049.69..9049.70 rows=1 width=64) (actual time=271.798..271.798 rows=1 loops=1)
   ->  Nested Loop  (cost=41.24..9049.68 rows=1 width=32) (actual time=11.592..271.780 rows=16 loops=1)
         ->  Nested Loop  (cost=41.10..9048.61 rows=1 width=36) (actual time=11.578..271.728 rows=16 loops=1)
               Join Filter: (n.id = an.person_id)
               ->  Nested Loop  (cost=40.67..9048.12 rows=1 width=48) (actual time=11.566..271.654 rows=8 loops=1)
                     Join Filter: (n.id = pi.person_id)
                     ->  Nested Loop  (cost=40.24..9005.48 rows=44 width=40) (actual time=0.559..263.484 rows=1076 loops=1)
                           ->  Nested Loop  (cost=39.81..8134.43 rows=1894 width=21) (actual time=0.366..107.123 rows=33415 loops=1)
                                 ->  Nested Loop  (cost=39.25..7243.89 rows=51 width=25) (actual time=0.335..34.529 rows=435 loops=1)
                                       ->  Nested Loop  (cost=38.82..245.23 rows=1666 width=4) (actual time=0.304..2.212 rows=5186 loops=1)
                                             ->  Seq Scan on link_type lt  (cost=0.00..1.23 rows=1 width=4) (actual time=0.011..0.014 rows=1 loops=1)
                                                   Filter: ((link)::text = 'features'::text)
                                                   Rows Removed by Filter: 17
                                             ->  Bitmap Heap Scan on movie_link ml  (cost=38.82..225.26 rows=1875 width=8) (actual time=0.291..1.485 rows=5186 loops=1)
                                                   Recheck Cond: (link_type_id = lt.id)
                                                   Heap Blocks: exact=132
                                                   ->  Bitmap Index Scan on link_type_id_movie_link  (cost=0.00..38.35 rows=1875 width=0) (actual time=0.264..0.264 rows=5186 loops=1)
                                                         Index Cond: (link_type_id = lt.id)
                                       ->  Index Scan using title_pkey on title t  (cost=0.43..4.20 rows=1 width=21) (actual time=0.006..0.006 rows=0 loops=5186)
                                             Index Cond: (id = ml.linked_movie_id)
                                             Filter: ((production_year >= 1980) AND (production_year <= 1984))
                                             Rows Removed by Filter: 1
                                 ->  Index Scan using movie_id_cast_info on cast_info ci  (cost=0.56..17.09 rows=37 width=8) (actual time=0.010..0.157 rows=77 loops=435)
                                       Index Cond: (movie_id = t.id)
                           ->  Index Scan using name_pkey on name n  (cost=0.43..0.46 rows=1 width=19) (actual time=0.004..0.004 rows=0 loops=33415)
                                 Index Cond: (id = ci.person_id)
                                 Filter: (((name_pcode_cf)::text ~~ 'D%'::text) AND ((gender)::text = 'm'::text))
                                 Rows Removed by Filter: 1
                     ->  Index Scan using person_id_person_info on person_info pi  (cost=0.43..0.96 rows=1 width=8) (actual time=0.007..0.007 rows=0 loops=1076)
                           Index Cond: (person_id = ci.person_id)
                           Filter: ((note)::text = 'Volker Boehm'::text)
                           Rows Removed by Filter: 16
               ->  Index Scan using person_id_aka_name on aka_name an  (cost=0.42..0.47 rows=2 width=4) (actual time=0.006..0.008 rows=2 loops=8)
                     Index Cond: (person_id = ci.person_id)
                     Filter: ((name)::text ~~ '%a%'::text)
                     Rows Removed by Filter: 1
         ->  Index Scan using info_type_pkey on info_type it  (cost=0.14..0.61 rows=1 width=4) (actual time=0.002..0.002 rows=1 loops=16)
               Index Cond: (id = pi.info_type_id)
               Filter: ((info)::text = 'mini biography'::text)
 Planning Time: 7.283 ms
 Execution Time: 271.979 ms
(41 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/7c.sql_explained.sql
SET
                                                                                                             QUERY PLAN                                                                                                              
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=58025.67..58025.68 rows=1 width=64) (actual time=3291.747..3291.747 rows=1 loops=1)
   ->  Nested Loop  (cost=2495.15..58025.64 rows=6 width=111) (actual time=20.049..3052.505 rows=68185 loops=1)
         ->  Hash Join  (cost=2494.72..58021.06 rows=10 width=119) (actual time=20.012..2804.913 rows=109842 loops=1)
               Hash Cond: (ml.link_type_id = lt.id)
               ->  Nested Loop  (cost=2493.40..58019.61 rows=44 width=123) (actual time=19.960..2781.162 rows=127027 loops=1)
                     ->  Nested Loop  (cost=2493.11..57531.16 rows=1426 width=115) (actual time=19.927..1155.699 rows=1618304 loops=1)
                           ->  Nested Loop  (cost=2492.55..57287.95 rows=14 width=123) (actual time=19.903..649.410 rows=12595 loops=1)
                                 ->  Nested Loop  (cost=2492.12..56107.25 rows=1430 width=104) (actual time=19.802..406.170 rows=72979 loops=1)
                                       ->  Nested Loop  (cost=2491.69..55264.82 rows=717 width=100) (actual time=19.749..184.020 rows=84183 loops=1)
                                             ->  Seq Scan on info_type it  (cost=0.00..2.41 rows=1 width=4) (actual time=0.014..0.022 rows=1 loops=1)
                                                   Filter: ((info)::text = 'mini biography'::text)
                                                   Rows Removed by Filter: 112
                                             ->  Bitmap Heap Scan on person_info pi  (cost=2491.69..55225.59 rows=3682 width=104) (actual time=19.732..175.197 rows=84183 loops=1)
                                                   Recheck Cond: (info_type_id = it.id)
                                                   Filter: (note IS NOT NULL)
                                                   Rows Removed by Filter: 1
                                                   Heap Blocks: exact=40537
                                                   ->  Bitmap Index Scan on info_type_id_person_info  (cost=0.00..2490.77 rows=134712 width=0) (actual time=11.392..11.392 rows=84184 loops=1)
                                                         Index Cond: (info_type_id = it.id)
                                       ->  Index Scan using person_id_aka_name on aka_name an  (cost=0.42..1.15 rows=2 width=4) (actual time=0.002..0.002 rows=1 loops=84183)
                                             Index Cond: (person_id = pi.person_id)
                                             Filter: ((name IS NOT NULL) AND (((name)::text ~~ '%a%'::text) OR ((name)::text ~~ 'A%'::text)))
                                             Rows Removed by Filter: 0
                                 ->  Index Scan using name_pkey on name n  (cost=0.43..0.83 rows=1 width=19) (actual time=0.003..0.003 rows=0 loops=72979)
                                       Index Cond: (id = an.person_id)
                                       Filter: (((name_pcode_cf)::text >= 'A'::text) AND ((name_pcode_cf)::text <= 'F'::text) AND (((gender)::text = 'm'::text) OR (((gender)::text = 'f'::text) AND ((name)::text ~~ 'A%'::text))))
                                       Rows Removed by Filter: 1
                           ->  Index Scan using person_id_cast_info on cast_info ci  (cost=0.56..12.33 rows=504 width=8) (actual time=0.005..0.027 rows=128 loops=12595)
                                 Index Cond: (person_id = n.id)
                     ->  Index Scan using linked_movie_id_movie_link on movie_link ml  (cost=0.29..0.32 rows=2 width=8) (actual time=0.001..0.001 rows=0 loops=1618304)
                           Index Cond: (linked_movie_id = ci.movie_id)
               ->  Hash  (cost=1.27..1.27 rows=4 width=4) (actual time=0.019..0.019 rows=4 loops=1)
                     Buckets: 1024  Batches: 1  Memory Usage: 9kB
                     ->  Seq Scan on link_type lt  (cost=0.00..1.27 rows=4 width=4) (actual time=0.011..0.014 rows=4 loops=1)
                           Filter: ((link)::text = ANY ('{references,"referenced in",features,"featured in"}'::text[]))
                           Rows Removed by Filter: 14
         ->  Index Scan using title_pkey on title t  (cost=0.43..0.46 rows=1 width=4) (actual time=0.002..0.002 rows=1 loops=109842)
               Index Cond: (id = ci.movie_id)
               Filter: ((production_year >= 1980) AND (production_year <= 2010))
               Rows Removed by Filter: 0
 Planning Time: 7.456 ms
 Execution Time: 3292.086 ms
(42 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/8a.sql_explained.sql
SET
                                                                                    QUERY PLAN                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=42962.65..42962.66 rows=1 width=64) (actual time=1433.440..1433.440 rows=1 loops=1)
   ->  Gather  (cost=5775.17..42962.64 rows=1 width=33) (actual time=817.895..1436.134 rows=62 loops=1)
         Workers Planned: 2
         Workers Launched: 2
         ->  Nested Loop  (cost=4775.17..41962.54 rows=1 width=33) (actual time=475.076..1430.541 rows=21 loops=3)
               ->  Nested Loop  (cost=4774.74..41958.79 rows=5 width=41) (actual time=136.814..1416.092 rows=5793 loops=3)
                     ->  Hash Join  (cost=4774.31..41956.44 rows=2 width=21) (actual time=136.164..1404.044 rows=2479 loops=3)
                           Hash Cond: (ci.role_id = rt.id)
                           ->  Nested Loop  (cost=4773.15..41955.18 rows=27 width=25) (actual time=136.060..1403.038 rows=6533 loops=3)
                                 ->  Nested Loop  (cost=4772.59..41333.61 rows=332 width=25) (actual time=16.304..236.401 rows=16109 loops=3)
                                       ->  Parallel Hash Join  (cost=4772.16..39899.83 rows=332 width=4) (actual time=16.257..154.984 rows=16109 loops=3)
                                             Hash Cond: (mc.company_id = cn.id)
                                             ->  Parallel Seq Scan on movie_companies mc  (cost=0.00..35097.06 rows=11664 width=8) (actual time=0.061..133.087 rows=16299 loops=3)
                                                   Filter: (((note)::text ~~ '%(Japan)%'::text) AND ((note)::text !~~ '%(USA)%'::text))
                                                   Rows Removed by Filter: 853411
                                             ->  Parallel Hash  (cost=4722.92..4722.92 rows=3939 width=4) (actual time=16.017..16.017 rows=2251 loops=3)
                                                   Buckets: 8192  Batches: 1  Memory Usage: 384kB
                                                   ->  Parallel Seq Scan on company_name cn  (cost=0.00..4722.92 rows=3939 width=4) (actual time=0.021..15.360 rows=2251 loops=3)
                                                         Filter: ((country_code)::text = '[jp]'::text)
                                                         Rows Removed by Filter: 76082
                                       ->  Index Scan using title_pkey on title t  (cost=0.43..4.32 rows=1 width=21) (actual time=0.005..0.005 rows=1 loops=48328)
                                             Index Cond: (id = mc.movie_id)
                                 ->  Index Scan using movie_id_cast_info on cast_info ci  (cost=0.56..1.86 rows=1 width=12) (actual time=0.070..0.072 rows=0 loops=48328)
                                       Index Cond: (movie_id = t.id)
                                       Filter: ((note)::text = '(voice: English version)'::text)
                                       Rows Removed by Filter: 32
                           ->  Hash  (cost=1.15..1.15 rows=1 width=4) (actual time=0.018..0.018 rows=1 loops=3)
                                 Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                 ->  Seq Scan on role_type rt  (cost=0.00..1.15 rows=1 width=4) (actual time=0.013..0.014 rows=1 loops=3)
                                       Filter: ((role)::text = 'actress'::text)
                                       Rows Removed by Filter: 11
                     ->  Index Scan using person_id_aka_name on aka_name an1  (cost=0.42..1.16 rows=2 width=20) (actual time=0.004..0.004 rows=2 loops=7438)
                           Index Cond: (person_id = ci.person_id)
               ->  Index Scan using name_pkey on name n1  (cost=0.43..0.75 rows=1 width=4) (actual time=0.002..0.002 rows=0 loops=17379)
                     Index Cond: (id = an1.person_id)
                     Filter: (((name)::text ~~ '%Yo%'::text) AND ((name)::text !~~ '%Yu%'::text))
                     Rows Removed by Filter: 1
 Planning Time: 4.694 ms
 Execution Time: 1436.348 ms
(39 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/8b.sql_explained.sql
SET
                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=44409.00..44409.01 rows=1 width=64) (actual time=170.087..170.087 rows=1 loops=1)
   ->  Nested Loop  (cost=1002.40..44409.00 rows=1 width=33) (actual time=126.303..170.069 rows=6 loops=1)
         ->  Nested Loop  (cost=1002.27..44408.82 rows=1 width=37) (actual time=126.279..170.036 rows=6 loops=1)
               ->  Nested Loop  (cost=1001.84..44408.07 rows=1 width=45) (actual time=125.514..169.112 rows=171 loops=1)
                     ->  Nested Loop  (cost=1001.42..44406.90 rows=1 width=25) (actual time=125.485..168.146 rows=104 loops=1)
                           Join Filter: (t.id = ci.movie_id)
                           ->  Gather  (cost=1000.85..44264.09 rows=1 width=25) (actual time=125.430..169.521 rows=4 loops=1)
                                 Workers Planned: 2
                                 Workers Launched: 2
                                 ->  Nested Loop  (cost=0.85..43263.99 rows=1 width=25) (actual time=152.881..166.805 rows=1 loops=3)
                                       ->  Nested Loop  (cost=0.42..43166.10 rows=12 width=4) (actual time=0.305..138.987 rows=2832 loops=3)
                                             ->  Parallel Seq Scan on movie_companies mc  (cost=0.00..40532.74 rows=434 width=8) (actual time=0.264..129.438 rows=2856 loops=3)
                                                   Filter: (((note)::text ~~ '%(Japan)%'::text) AND ((note)::text !~~ '%(USA)%'::text) AND (((note)::text ~~ '%(2006)%'::text) OR ((note)::text ~~ '%(2007)%'::text)))
                                                   Rows Removed by Filter: 866853
                                             ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..6.07 rows=1 width=4) (actual time=0.003..0.003 rows=1 loops=8569)
                                                   Index Cond: (id = mc.company_id)
                                                   Filter: ((country_code)::text = '[jp]'::text)
                                                   Rows Removed by Filter: 0
                                       ->  Index Scan using title_pkey on title t  (cost=0.43..8.13 rows=1 width=21) (actual time=0.010..0.010 rows=0 loops=8495)
                                             Index Cond: (id = mc.movie_id)
                                             Filter: ((production_year >= 2006) AND (production_year <= 2007) AND (((title)::text ~~ 'One Piece%'::text) OR ((title)::text ~~ 'Dragon Ball Z%'::text)))
                                             Rows Removed by Filter: 1
                           ->  Index Scan using movie_id_cast_info on cast_info ci  (cost=0.56..142.80 rows=1 width=12) (actual time=0.073..0.212 rows=26 loops=4)
                                 Index Cond: (movie_id = mc.movie_id)
                                 Filter: ((note)::text = '(voice: English version)'::text)
                                 Rows Removed by Filter: 17
                     ->  Index Scan using person_id_aka_name on aka_name an  (cost=0.42..1.16 rows=2 width=20) (actual time=0.008..0.009 rows=2 loops=104)
                           Index Cond: (person_id = ci.person_id)
               ->  Index Scan using name_pkey on name n  (cost=0.43..0.75 rows=1 width=4) (actual time=0.005..0.005 rows=0 loops=171)
                     Index Cond: (id = an.person_id)
                     Filter: (((name)::text ~~ '%Yo%'::text) AND ((name)::text !~~ '%Yu%'::text))
                     Rows Removed by Filter: 1
         ->  Index Scan using role_type_pkey on role_type rt  (cost=0.14..0.16 rows=1 width=4) (actual time=0.005..0.005 rows=1 loops=6)
               Index Cond: (id = ci.role_id)
               Filter: ((role)::text = 'actress'::text)
 Planning Time: 4.856 ms
 Execution Time: 172.509 ms
(37 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/8c.sql_explained.sql
SET
                                                                                                QUERY PLAN                                                                                                
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=529735.54..529735.55 rows=1 width=64) (actual time=3470.312..3470.312 rows=1 loops=1)
   ->  Gather  (cost=529735.32..529735.53 rows=2 width=64) (actual time=3468.309..3567.023 rows=3 loops=1)
         Workers Planned: 2
         Workers Launched: 2
         ->  Partial Aggregate  (cost=528735.32..528735.33 rows=1 width=64) (actual time=3465.770..3465.770 rows=1 loops=3)
               ->  Parallel Hash Join  (cost=483413.83..513803.80 rows=2986304 width=33) (actual time=3195.036..3361.263 rows=829204 loops=3)
                     Hash Cond: (a1.person_id = n1.id)
                     ->  Parallel Seq Scan on aka_name a1  (cost=0.00..15151.60 rows=375560 width=20) (actual time=0.026..38.312 rows=300448 loops=3)
                     ->  Parallel Hash  (cost=459853.10..459853.10 rows=1218458 width=25) (actual time=3097.222..3097.222 rows=656886 loops=3)
                           Buckets: 65536  Batches: 64  Memory Usage: 2848kB
                           ->  Parallel Hash Join  (cost=345158.80..459853.10 rows=1218458 width=25) (actual time=2763.849..2962.178 rows=656886 loops=3)
                                 Hash Cond: (ci.person_id = n1.id)
                                 ->  Hash Join  (cost=243691.57..334123.41 rows=1218458 width=21) (actual time=1927.763..2208.893 rows=656886 loops=3)
                                       Hash Cond: (t.id = ci.movie_id)
                                       ->  Parallel Hash Join  (cost=44358.48..110382.12 rows=395644 width=25) (actual time=586.157..785.427 rows=384599 loops=3)
                                             Hash Cond: (t.id = mc.movie_id)
                                             ->  Parallel Seq Scan on title t  (cost=0.00..46532.63 rows=1053463 width=21) (actual time=0.019..112.195 rows=842771 loops=3)
                                             ->  Parallel Hash  (cost=37866.93..37866.93 rows=395644 width=4) (actual time=295.776..295.776 rows=384599 loops=3)
                                                   Buckets: 131072  Batches: 16  Memory Usage: 3872kB
                                                   ->  Parallel Hash Join  (cost=5351.77..37866.93 rows=395644 width=4) (actual time=25.063..243.546 rows=384599 loops=3)
                                                         Hash Cond: (mc.company_id = cn.id)
                                                         ->  Parallel Seq Scan on movie_companies mc  (cost=0.00..29661.37 rows=1087137 width=8) (actual time=0.016..77.785 rows=869710 loops=3)
                                                         ->  Parallel Hash  (cost=4722.92..4722.92 rows=50308 width=4) (actual time=24.691..24.692 rows=28281 loops=3)
                                                               Buckets: 131072  Batches: 1  Memory Usage: 4384kB
                                                               ->  Parallel Seq Scan on company_name cn  (cost=0.00..4722.92 rows=50308 width=4) (actual time=0.020..16.837 rows=28281 loops=3)
                                                                     Filter: ((country_code)::text = '[us]'::text)
                                                                     Rows Removed by Filter: 50051
                                       ->  Hash  (cost=149779.57..149779.57 rows=3020362 width=8) (actual time=1141.012..1141.012 rows=2728943 loops=3)
                                             Buckets: 131072  Batches: 64  Memory Usage: 2675kB
                                             ->  Nested Loop  (cost=0.56..149779.57 rows=3020362 width=8) (actual time=0.044..766.147 rows=2728943 loops=3)
                                                   ->  Seq Scan on role_type rt  (cost=0.00..1.15 rows=1 width=4) (actual time=0.011..0.015 rows=1 loops=3)
                                                         Filter: ((role)::text = 'writer'::text)
                                                         Rows Removed by Filter: 11
                                                   ->  Index Scan using role_id_cast_info on cast_info ci  (cost=0.56..116829.02 rows=3294940 width=12) (actual time=0.029..509.579 rows=2728943 loops=3)
                                                         Index Cond: (role_id = rt.id)
                                 ->  Parallel Hash  (cost=72977.55..72977.55 rows=1736455 width=4) (actual time=348.350..348.350 rows=1389164 loops=3)
                                       Buckets: 131072  Batches: 64  Memory Usage: 3616kB
                                       ->  Parallel Seq Scan on name n1  (cost=0.00..72977.55 rows=1736455 width=4) (actual time=0.023..167.510 rows=1389164 loops=3)
 Planning Time: 4.129 ms
 Execution Time: 3567.465 ms
(40 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/8d.sql_explained.sql
SET
                                                                                               QUERY PLAN                                                                                               
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=529735.54..529735.55 rows=1 width=64) (actual time=1701.915..1701.915 rows=1 loops=1)
   ->  Gather  (cost=529735.32..529735.53 rows=2 width=64) (actual time=1699.892..1771.323 rows=3 loops=1)
         Workers Planned: 2
         Workers Launched: 2
         ->  Partial Aggregate  (cost=528735.32..528735.33 rows=1 width=64) (actual time=1697.449..1697.450 rows=1 loops=3)
               ->  Parallel Hash Join  (cost=483413.83..513803.80 rows=2986304 width=33) (actual time=1639.195..1683.847 rows=107668 loops=3)
                     Hash Cond: (an1.person_id = n1.id)
                     ->  Parallel Seq Scan on aka_name an1  (cost=0.00..15151.60 rows=375560 width=20) (actual time=0.021..38.503 rows=300448 loops=3)
                     ->  Parallel Hash  (cost=459853.10..459853.10 rows=1218458 width=25) (actual time=1542.444..1542.444 rows=95179 loops=3)
                           Buckets: 65536  Batches: 64  Memory Usage: 992kB
                           ->  Parallel Hash Join  (cost=345158.80..459853.10 rows=1218458 width=25) (actual time=1426.707..1521.977 rows=95179 loops=3)
                                 Hash Cond: (ci.person_id = n1.id)
                                 ->  Hash Join  (cost=243691.57..334123.41 rows=1218458 width=21) (actual time=883.760..1048.961 rows=95179 loops=3)
                                       Hash Cond: (t.id = ci.movie_id)
                                       ->  Parallel Hash Join  (cost=44358.48..110382.12 rows=395644 width=25) (actual time=584.843..785.340 rows=384599 loops=3)
                                             Hash Cond: (t.id = mc.movie_id)
                                             ->  Parallel Seq Scan on title t  (cost=0.00..46532.63 rows=1053463 width=21) (actual time=0.021..110.084 rows=842771 loops=3)
                                             ->  Parallel Hash  (cost=37866.93..37866.93 rows=395644 width=4) (actual time=296.408..296.408 rows=384599 loops=3)
                                                   Buckets: 131072  Batches: 16  Memory Usage: 3872kB
                                                   ->  Parallel Hash Join  (cost=5351.77..37866.93 rows=395644 width=4) (actual time=25.579..244.165 rows=384599 loops=3)
                                                         Hash Cond: (mc.company_id = cn.id)
                                                         ->  Parallel Seq Scan on movie_companies mc  (cost=0.00..29661.37 rows=1087137 width=8) (actual time=0.023..77.470 rows=869710 loops=3)
                                                         ->  Parallel Hash  (cost=4722.92..4722.92 rows=50308 width=4) (actual time=25.218..25.219 rows=28281 loops=3)
                                                               Buckets: 131072  Batches: 1  Memory Usage: 4384kB
                                                               ->  Parallel Seq Scan on company_name cn  (cost=0.00..4722.92 rows=50308 width=4) (actual time=0.025..17.457 rows=28281 loops=3)
                                                                     Filter: ((country_code)::text = '[us]'::text)
                                                                     Rows Removed by Filter: 50051
                                       ->  Hash  (cost=149779.57..149779.57 rows=3020362 width=8) (actual time=109.307..109.307 rows=276403 loops=3)
                                             Buckets: 131072  Batches: 64  Memory Usage: 1193kB
                                             ->  Nested Loop  (cost=0.56..149779.57 rows=3020362 width=8) (actual time=0.064..70.472 rows=276403 loops=3)
                                                   ->  Seq Scan on role_type rt  (cost=0.00..1.15 rows=1 width=4) (actual time=0.015..0.017 rows=1 loops=3)
                                                         Filter: ((role)::text = 'costume designer'::text)
                                                         Rows Removed by Filter: 11
                                                   ->  Index Scan using role_id_cast_info on cast_info ci  (cost=0.56..116829.02 rows=3294940 width=12) (actual time=0.045..44.641 rows=276403 loops=3)
                                                         Index Cond: (role_id = rt.id)
                                 ->  Parallel Hash  (cost=72977.55..72977.55 rows=1736455 width=4) (actual time=350.131..350.131 rows=1389164 loops=3)
                                       Buckets: 131072  Batches: 64  Memory Usage: 3648kB
                                       ->  Parallel Seq Scan on name n1  (cost=0.00..72977.55 rows=1736455 width=4) (actual time=0.019..168.387 rows=1389164 loops=3)
 Planning Time: 4.685 ms
 Execution Time: 1771.773 ms
(40 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/9a.sql_explained.sql
SET
                                                                                        QUERY PLAN                                                                                         
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=83282.38..83282.39 rows=1 width=96) (actual time=271.694..271.694 rows=1 loops=1)
   ->  Nested Loop  (cost=1003.86..83282.37 rows=1 width=49) (actual time=113.288..271.646 rows=121 loops=1)
         ->  Nested Loop  (cost=1003.44..83281.88 rows=1 width=53) (actual time=113.260..271.007 rows=123 loops=1)
               Join Filter: (ci.movie_id = mc.movie_id)
               ->  Gather  (cost=1003.01..83281.24 rows=1 width=57) (actual time=109.314..270.993 rows=139 loops=1)
                     Workers Planned: 2
                     Workers Launched: 2
                     ->  Nested Loop  (cost=3.01..82281.14 rows=1 width=57) (actual time=110.623..268.306 rows=46 loops=3)
                           ->  Nested Loop  (cost=2.58..82280.49 rows=1 width=45) (actual time=110.439..267.929 rows=52 loops=3)
                                 ->  Hash Join  (cost=2.15..82279.20 rows=2 width=24) (actual time=106.549..266.545 rows=142 loops=3)
                                       Hash Cond: (ci.role_id = rt.id)
                                       ->  Nested Loop  (cost=0.99..82277.96 rows=21 width=28) (actual time=106.451..266.412 rows=142 loops=3)
                                             Join Filter: (n.id = ci.person_id)
                                             ->  Nested Loop  (cost=0.42..82155.29 rows=9 width=24) (actual time=103.343..255.444 rows=519 loops=3)
                                                   ->  Parallel Seq Scan on name n  (cost=0.00..81659.82 rows=40 width=4) (actual time=102.998..245.360 rows=2256 loops=3)
                                                         Filter: (((name)::text ~~ '%Ang%'::text) AND ((gender)::text = 'f'::text))
                                                         Rows Removed by Filter: 1386908
                                                   ->  Index Scan using person_id_aka_name on aka_name an  (cost=0.42..12.37 rows=2 width=20) (actual time=0.004..0.004 rows=0 loops=6768)
                                                         Index Cond: (person_id = n.id)
                                             ->  Index Scan using person_id_cast_info on cast_info ci  (cost=0.56..13.47 rows=13 width=16) (actual time=0.020..0.021 rows=0 loops=1558)
                                                   Index Cond: (person_id = an.person_id)
                                                   Filter: ((note)::text = ANY ('{(voice),"(voice: Japanese version)","(voice) (uncredited)","(voice: English version)"}'::text[]))
                                                   Rows Removed by Filter: 44
                                       ->  Hash  (cost=1.15..1.15 rows=1 width=4) (actual time=0.024..0.024 rows=1 loops=3)
                                             Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                             ->  Seq Scan on role_type rt  (cost=0.00..1.15 rows=1 width=4) (actual time=0.016..0.017 rows=1 loops=3)
                                                   Filter: ((role)::text = 'actress'::text)
                                                   Rows Removed by Filter: 11
                                 ->  Index Scan using title_pkey on title t  (cost=0.43..0.64 rows=1 width=21) (actual time=0.009..0.009 rows=0 loops=425)
                                       Index Cond: (id = ci.movie_id)
                                       Filter: ((production_year >= 2005) AND (production_year <= 2015))
                                       Rows Removed by Filter: 1
                           ->  Index Scan using char_name_pkey on char_name chn  (cost=0.43..0.65 rows=1 width=20) (actual time=0.007..0.007 rows=1 loops=155)
                                 Index Cond: (id = ci.person_role_id)
               ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..0.64 rows=1 width=8) (actual time=0.009..0.011 rows=1 loops=139)
                     Index Cond: (movie_id = t.id)
                     Filter: ((note IS NOT NULL) AND (((note)::text ~~ '%(USA)%'::text) OR ((note)::text ~~ '%(worldwide)%'::text)))
                     Rows Removed by Filter: 5
         ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..0.49 rows=1 width=4) (actual time=0.005..0.005 rows=1 loops=123)
               Index Cond: (id = mc.company_id)
               Filter: ((country_code)::text = '[us]'::text)
               Rows Removed by Filter: 0
 Planning Time: 7.342 ms
 Execution Time: 273.508 ms
(44 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/9b.sql_explained.sql
SET
                                                                                        QUERY PLAN                                                                                         
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=83270.97..83270.98 rows=1 width=128) (actual time=258.962..258.962 rows=1 loops=1)
   ->  Nested Loop  (cost=1003.86..83270.96 rows=1 width=64) (actual time=116.357..258.935 rows=40 loops=1)
         ->  Nested Loop  (cost=1003.44..83270.37 rows=1 width=68) (actual time=116.345..258.789 rows=40 loops=1)
               ->  Nested Loop  (cost=1003.01..83269.66 rows=1 width=72) (actual time=116.134..258.292 rows=60 loops=1)
                     ->  Gather  (cost=1002.58..83268.98 rows=1 width=60) (actual time=116.116..259.919 rows=65 loops=1)
                           Workers Planned: 2
                           Workers Launched: 2
                           ->  Nested Loop  (cost=2.58..82268.88 rows=1 width=60) (actual time=109.546..256.324 rows=22 loops=3)
                                 ->  Hash Join  (cost=2.15..82267.52 rows=2 width=39) (actual time=105.721..255.863 rows=88 loops=3)
                                       Hash Cond: (ci.role_id = rt.id)
                                       ->  Nested Loop  (cost=0.99..82266.28 rows=18 width=43) (actual time=105.620..255.739 rows=88 loops=3)
                                             Join Filter: (n.id = ci.person_id)
                                             ->  Nested Loop  (cost=0.42..82155.29 rows=9 width=39) (actual time=102.835..250.355 rows=432 loops=3)
                                                   ->  Parallel Seq Scan on name n  (cost=0.00..81659.82 rows=40 width=19) (actual time=102.410..244.146 rows=1803 loops=3)
                                                         Filter: (((name)::text ~~ '%Angel%'::text) AND ((gender)::text = 'f'::text))
                                                         Rows Removed by Filter: 1387361
                                                   ->  Index Scan using person_id_aka_name on aka_name an  (cost=0.42..12.37 rows=2 width=20) (actual time=0.003..0.003 rows=0 loops=5409)
                                                         Index Cond: (person_id = n.id)
                                             ->  Index Scan using person_id_cast_info on cast_info ci  (cost=0.56..12.21 rows=10 width=16) (actual time=0.011..0.012 rows=0 loops=1296)
                                                   Index Cond: (person_id = an.person_id)
                                                   Filter: ((note)::text = '(voice)'::text)
                                                   Rows Removed by Filter: 43
                                       ->  Hash  (cost=1.15..1.15 rows=1 width=4) (actual time=0.023..0.024 rows=1 loops=3)
                                             Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                             ->  Seq Scan on role_type rt  (cost=0.00..1.15 rows=1 width=4) (actual time=0.018..0.019 rows=1 loops=3)
                                                   Filter: ((role)::text = 'actress'::text)
                                                   Rows Removed by Filter: 11
                                 ->  Index Scan using title_pkey on title t  (cost=0.43..0.68 rows=1 width=21) (actual time=0.005..0.005 rows=0 loops=265)
                                       Index Cond: (id = ci.movie_id)
                                       Filter: ((production_year >= 2007) AND (production_year <= 2010))
                                       Rows Removed by Filter: 1
                     ->  Index Scan using char_name_pkey on char_name chn  (cost=0.43..0.69 rows=1 width=20) (actual time=0.003..0.003 rows=1 loops=65)
                           Index Cond: (id = ci.person_role_id)
               ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..0.69 rows=1 width=8) (actual time=0.006..0.008 rows=1 loops=60)
                     Index Cond: (movie_id = ci.movie_id)
                     Filter: (((note)::text ~~ '%(200%)%'::text) AND (((note)::text ~~ '%(USA)%'::text) OR ((note)::text ~~ '%(worldwide)%'::text)))
                     Rows Removed by Filter: 7
         ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..0.59 rows=1 width=4) (actual time=0.003..0.003 rows=1 loops=40)
               Index Cond: (id = mc.company_id)
               Filter: ((country_code)::text = '[us]'::text)
 Planning Time: 6.980 ms
 Execution Time: 261.019 ms
(42 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/9c.sql_explained.sql
SET
                                                                                          QUERY PLAN                                                                                           
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=123482.63..123482.64 rows=1 width=128) (actual time=452.125..452.125 rows=1 loops=1)
   ->  Gather  (cost=123482.40..123482.61 rows=2 width=128) (actual time=451.551..455.037 rows=3 loops=1)
         Workers Planned: 2
         Workers Launched: 2
         ->  Partial Aggregate  (cost=122482.40..122482.41 rows=1 width=128) (actual time=449.108..449.108 rows=1 loops=3)
               ->  Nested Loop  (cost=81764.69..122480.72 rows=168 width=64) (actual time=256.892..448.293 rows=2715 loops=3)
                     Join Filter: (ci.movie_id = t.id)
                     ->  Nested Loop  (cost=81764.26..122392.38 rows=168 width=55) (actual time=256.842..439.849 rows=2715 loops=3)
                           ->  Nested Loop  (cost=81763.84..122186.52 rows=462 width=59) (actual time=256.211..422.050 rows=6115 loops=3)
                                 ->  Nested Loop  (cost=81763.41..122068.42 rows=173 width=51) (actual time=256.157..410.049 rows=2575 loops=3)
                                       ->  Hash Join  (cost=81762.98..121836.61 rows=358 width=39) (actual time=256.108..400.439 rows=2735 loops=3)
                                             Hash Cond: (ci.role_id = rt.id)
                                             ->  Nested Loop  (cost=81761.82..121820.18 rows=4301 width=43) (actual time=256.031..399.808 rows=2735 loops=3)
                                                   Join Filter: (n.id = ci.person_id)
                                                   ->  Parallel Hash Join  (cost=81761.26..97898.70 rows=1755 width=39) (actual time=254.194..330.191 rows=3508 loops=3)
                                                         Hash Cond: (an.person_id = n.id)
                                                         ->  Parallel Seq Scan on aka_name an  (cost=0.00..15151.60 rows=375560 width=20) (actual time=0.016..31.798 rows=300448 loops=3)
                                                         ->  Parallel Hash  (cost=81659.82..81659.82 rows=8115 width=19) (actual time=253.849..253.850 rows=16670 loops=3)
                                                               Buckets: 65536 (originally 32768)  Batches: 1 (originally 1)  Memory Usage: 3552kB
                                                               ->  Parallel Seq Scan on name n  (cost=0.00..81659.82 rows=8115 width=19) (actual time=103.200..245.600 rows=16670 loops=3)
                                                                     Filter: (((name)::text ~~ '%An%'::text) AND ((gender)::text = 'f'::text))
                                                                     Rows Removed by Filter: 1372493
                                                   ->  Index Scan using person_id_cast_info on cast_info ci  (cost=0.56..13.47 rows=13 width=16) (actual time=0.018..0.019 rows=1 loops=10525)
                                                         Index Cond: (person_id = an.person_id)
                                                         Filter: ((note)::text = ANY ('{(voice),"(voice: Japanese version)","(voice) (uncredited)","(voice: English version)"}'::text[]))
                                                         Rows Removed by Filter: 44
                                             ->  Hash  (cost=1.15..1.15 rows=1 width=4) (actual time=0.022..0.022 rows=1 loops=3)
                                                   Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                   ->  Seq Scan on role_type rt  (cost=0.00..1.15 rows=1 width=4) (actual time=0.015..0.016 rows=1 loops=3)
                                                         Filter: ((role)::text = 'actress'::text)
                                                         Rows Removed by Filter: 11
                                       ->  Index Scan using char_name_pkey on char_name chn  (cost=0.43..0.65 rows=1 width=20) (actual time=0.003..0.003 rows=1 loops=8204)
                                             Index Cond: (id = ci.person_role_id)
                                 ->  Index Scan using movie_id_movie_companies on movie_companies mc  (cost=0.43..0.63 rows=5 width=8) (actual time=0.003..0.004 rows=2 loops=7726)
                                       Index Cond: (movie_id = ci.movie_id)
                           ->  Index Scan using company_name_pkey on company_name cn  (cost=0.42..0.45 rows=1 width=4) (actual time=0.003..0.003 rows=0 loops=18345)
                                 Index Cond: (id = mc.company_id)
                                 Filter: ((country_code)::text = '[us]'::text)
                                 Rows Removed by Filter: 1
                     ->  Index Scan using title_pkey on title t  (cost=0.43..0.51 rows=1 width=21) (actual time=0.003..0.003 rows=1 loops=8144)
                           Index Cond: (id = mc.movie_id)
 Planning Time: 7.031 ms
 Execution Time: 455.292 ms
(43 rows)

execute /home/pei/benchmarks/imdb_job-postgres/skinner_explained/9d.sql_explained.sql
SET
                                                                                                  QUERY PLAN                                                                                                  
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate  (cost=211411.33..211411.34 rows=1 width=128) (actual time=3795.266..3795.266 rows=1 loops=1)
   ->  Gather  (cost=211411.10..211411.31 rows=2 width=128) (actual time=2882.801..3798.136 rows=3 loops=1)
         Workers Planned: 2
         Workers Launched: 2
         ->  Partial Aggregate  (cost=210411.10..210411.11 rows=1 width=128) (actual time=3179.909..3179.909 rows=1 loops=3)
               ->  Nested Loop  (cost=140783.51..210327.94 rows=8316 width=64) (actual time=2095.113..3141.803 rows=161027 loops=3)
                     ->  Nested Loop  (cost=140783.09..208504.03 rows=3393 width=56) (actual time=2094.138..2974.904 rows=57856 loops=3)
                           Join Filter: (ci.movie_id = t.id)
                           ->  Nested Loop  (cost=140782.66..206719.92 rows=3393 width=47) (actual time=2094.116..2826.007 rows=57856 loops=3)
                                 ->  Nested Loop  (cost=140782.23..202181.65 rows=7009 width=35) (actual time=2094.093..2632.510 rows=63155 loops=3)
                                       ->  Hash Join  (cost=140781.80..179531.73 rows=30299 width=16) (actual time=2094.061..2442.071 rows=63185 loops=3)
                                             Hash Cond: (mc.movie_id = ci.movie_id)
                                             ->  Parallel Hash Join  (cost=5351.77..37866.93 rows=395644 width=4) (actual time=23.732..253.388 rows=384599 loops=3)
                                                   Hash Cond: (mc.company_id = cn.id)
                                                   ->  Parallel Seq Scan on movie_companies mc  (cost=0.00..29661.37 rows=1087137 width=8) (actual time=0.014..78.844 rows=869710 loops=3)
                                                   ->  Parallel Hash  (cost=4722.92..4722.92 rows=50308 width=4) (actual time=23.158..23.159 rows=28281 loops=3)
                                                         Buckets: 131072  Batches: 1  Memory Usage: 4384kB
                                                         ->  Parallel Seq Scan on company_name cn  (cost=0.00..4722.92 rows=50308 width=4) (actual time=0.016..16.091 rows=28281 loops=3)
                                                               Filter: ((country_code)::text = '[us]'::text)
                                                               Rows Removed by Filter: 50051
                                             ->  Hash  (cost=134124.20..134124.20 rows=75106 width=12) (actual time=2069.326..2069.326 rows=276166 loops=3)
                                                   Buckets: 131072 (originally 131072)  Batches: 4 (originally 2)  Memory Usage: 3984kB
                                                   ->  Nested Loop  (cost=0.56..134124.20 rows=75106 width=12) (actual time=0.203..2015.181 rows=276166 loops=3)
                                                         ->  Seq Scan on role_type rt  (cost=0.00..1.15 rows=1 width=4) (actual time=0.010..0.013 rows=1 loops=3)
                                                               Filter: ((role)::text = 'actress'::text)
                                                               Rows Removed by Filter: 11
                                                         ->  Index Scan using role_id_cast_info on cast_info ci  (cost=0.56..133303.71 rows=81934 width=16) (actual time=0.190..1992.194 rows=276166 loops=3)
                                                               Index Cond: (role_id = rt.id)
                                                               Filter: ((note)::text = ANY ('{(voice),"(voice: Japanese version)","(voice) (uncredited)","(voice: English version)"}'::text[]))
                                                               Rows Removed by Filter: 7175807
                                       ->  Index Scan using name_pkey on name n  (cost=0.43..0.75 rows=1 width=19) (actual time=0.003..0.003 rows=1 loops=189554)
                                             Index Cond: (id = ci.person_id)
                                             Filter: ((gender)::text = 'f'::text)
                                             Rows Removed by Filter: 0
                                 ->  Index Scan using char_name_pkey on char_name chn  (cost=0.43..0.65 rows=1 width=20) (actual time=0.003..0.003 rows=1 loops=189464)
                                       Index Cond: (id = ci.person_role_id)
                           ->  Index Scan using title_pkey on title t  (cost=0.43..0.51 rows=1 width=21) (actual time=0.002..0.002 rows=1 loops=173567)
                                 Index Cond: (id = mc.movie_id)
                     ->  Index Scan using person_id_aka_name on aka_name an  (cost=0.42..0.52 rows=2 width=20) (actual time=0.002..0.002 rows=3 loops=173567)
                           Index Cond: (person_id = n.id)
 Planning Time: 7.354 ms
 Execution Time: 3798.380 ms
(42 rows)

